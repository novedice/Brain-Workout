/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,n,t={2751:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,":root {\n  --color-primary: #a463f2;\n  --color-gray-dark: #ccc;\n  --color-gray: #f9fafb;\n  --font-primary: 'Inter', sans-serif;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml,\nbody {\n  font-family: var(--font-primary);\n}\n\n.calendar {\n  border: solid 1px black;\n}\n\n.upper-case {\n  text-transform: uppercase;\n}\n\n.upper-first {\n  text-transform: capitalize;\n}\n\n.lower-case {\n  text-transform: lowercase;\n}\n\n.text-cursive {\n  font-style: italic;\n}\n","",{version:3,sources:["webpack://./src/App.css"],names:[],mappings:"AAAA;EACE,wBAAwB;EACxB,uBAAuB;EACvB,qBAAqB;EACrB,mCAAmC;AACrC;;AAEA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;;EAEE,gCAAgC;AAClC;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:[":root {\n  --color-primary: #a463f2;\n  --color-gray-dark: #ccc;\n  --color-gray: #f9fafb;\n  --font-primary: 'Inter', sans-serif;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml,\nbody {\n  font-family: var(--font-primary);\n}\n\n.calendar {\n  border: solid 1px black;\n}\n\n.upper-case {\n  text-transform: uppercase;\n}\n\n.upper-first {\n  text-transform: capitalize;\n}\n\n.lower-case {\n  text-transform: lowercase;\n}\n\n.text-cursive {\n  font-style: italic;\n}\n"],sourceRoot:""}]);const s=i},3011:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".category {\n  cursor: pointer;\n  padding: 5px 10px;\n  border-radius: 5px;\n  margin-bottom: 5px;\n  transition: all 0.3s;\n\n}\n\n.category:hover {\n  background-color: #d9dce9;\n}\n\n.categories-input {\n  position: absolute;\n  z-index: -1;\n  opacity: 0;\n}","",{version:3,sources:["webpack://./src/components/GameCategories.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;EAClB,oBAAoB;;AAEtB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,UAAU;AACZ",sourcesContent:[".category {\n  cursor: pointer;\n  padding: 5px 10px;\n  border-radius: 5px;\n  margin-bottom: 5px;\n  transition: all 0.3s;\n\n}\n\n.category:hover {\n  background-color: #d9dce9;\n}\n\n.categories-input {\n  position: absolute;\n  z-index: -1;\n  opacity: 0;\n}"],sourceRoot:""}]);const s=i},4573:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,'.container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  cursor: pointer;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 6px;\n  border-radius: 10px;\n}\n\n.click-area {\n  width: 100%;\n  height: 73vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  border-radius: 10px;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 6px;\n}\n\n.green-label {\n  color: rgb(75, 219, 106)\n}\n\n.time-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font: 500 52px "Fira Sans", sans-serif;\n  text-align: center;\n  color: white;\n}\n\n.time-container h1 {\n  color: black;\n  margin-bottom: 40px;\n}\n\n.time-container h2 {\n  width: 80%;\n  margin-bottom: 60px;\n}\n\n.time-container h3 {\n  font-size: 22px;\n}\n\n.click-text {\n  font: 500 52px sans-serif;\n  color: white;\n}\n\n.small-text {\n  margin-top: 20px;\n  font: 500 22px sans-serif;\n  color: white;\n}',"",{version:3,sources:["webpack://./src/components/Games/ReactionTime/ReactionTime.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,eAAe;EACf,wCAAwC;EACxC,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,mBAAmB;EACnB,wCAAwC;AAC1C;;AAEA;EACE;AACF;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,sCAAsC;EACtC,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,UAAU;EACV,mBAAmB;AACrB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,YAAY;AACd",sourcesContent:['.container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  cursor: pointer;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 6px;\n  border-radius: 10px;\n}\n\n.click-area {\n  width: 100%;\n  height: 73vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  border-radius: 10px;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 6px;\n}\n\n.green-label {\n  color: rgb(75, 219, 106)\n}\n\n.time-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font: 500 52px "Fira Sans", sans-serif;\n  text-align: center;\n  color: white;\n}\n\n.time-container h1 {\n  color: black;\n  margin-bottom: 40px;\n}\n\n.time-container h2 {\n  width: 80%;\n  margin-bottom: 60px;\n}\n\n.time-container h3 {\n  font-size: 22px;\n}\n\n.click-text {\n  font: 500 52px sans-serif;\n  color: white;\n}\n\n.small-text {\n  margin-top: 20px;\n  font: 500 22px sans-serif;\n  color: white;\n}'],sourceRoot:""}]);const s=i},6109:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".cover {\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 5%;\n}\n\n.left-card {\n  width: 205px;\n  height: 205px;\n  padding: 5px;\n}\n\n.right-card {\n  width: 205px;\n  height: 205px;\n  padding: 5px;\n}\n\n.card {\n  position: relative;\n  perspective: 1000px;\n}\n\n/* .card-front,\n.card-back {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  /* top: 0; */\n/* left: 0; */\n/* transition: 0.8s;\n  backface-visibility: hidden;\n} */\n\n.card-front {\n  z-index: 100;\n  position: absolute;\n}\n\n.card-back {\n  opacity: 1;\n  z-index: 1;\n}\n\n.changing-back {\n  perspective: 1000;\n  animation: rotateBack 0.5s 1;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n\n.changing-front {\n  perspective: 1000;\n  -webkit-animation: rotateFront 0.5s 1;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  animation: rotateFront 0.5s 1;\n}\n\n@keyframes rotateFront {\n  from {\n    transform-origin: left;\n    transform: rotateY(0deg);\n    transform-style: preserve-3d;\n  }\n\n  to {\n    transform: rotateY(-180deg);\n    transform-style: preserve-3d;\n    transform-origin: left;\n  }\n}\n\n.speed-match__container {\n  height: 73vh;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n}","",{version:3,sources:["webpack://./src/components/Games/SpeedMatch/speedMatch.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,WAAW;EACX,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;;;;;cAKc;AACd,aAAa;AACb;;GAEG;;AAEH;EACE,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,UAAU;EACV,UAAU;AACZ;;AAEA;EAEE,iBAAiB;EAEjB,4BAA4B;EAC5B,mCAA2B;UAA3B,2BAA2B;AAC7B;;AAEA;EAEE,iBAAiB;EACjB,qCAAqC;EACrC,mCAA2B;UAA3B,2BAA2B;EAC3B,6BAA6B;AAC/B;;AAEA;EACE;IACE,sBAAsB;IACtB,wBAAwB;IACxB,4BAA4B;EAC9B;;EAEA;IACE,2BAA2B;IAC3B,4BAA4B;IAC5B,sBAAsB;EACxB;AACF;;AAEA;EACE,YAAY;EACZ,wCAAwC;EACxC,mBAAmB;AACrB",sourcesContent:[".cover {\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 5%;\n}\n\n.left-card {\n  width: 205px;\n  height: 205px;\n  padding: 5px;\n}\n\n.right-card {\n  width: 205px;\n  height: 205px;\n  padding: 5px;\n}\n\n.card {\n  position: relative;\n  perspective: 1000px;\n}\n\n/* .card-front,\n.card-back {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  /* top: 0; */\n/* left: 0; */\n/* transition: 0.8s;\n  backface-visibility: hidden;\n} */\n\n.card-front {\n  z-index: 100;\n  position: absolute;\n}\n\n.card-back {\n  opacity: 1;\n  z-index: 1;\n}\n\n.changing-back {\n  -webkit-perspective: 1000;\n  perspective: 1000;\n  -webkit-animation: rotateBack 0.5s 1;\n  animation: rotateBack 0.5s 1;\n  backface-visibility: hidden;\n}\n\n.changing-front {\n  -webkit-perspective: 1000;\n  perspective: 1000;\n  -webkit-animation: rotateFront 0.5s 1;\n  backface-visibility: hidden;\n  animation: rotateFront 0.5s 1;\n}\n\n@keyframes rotateFront {\n  from {\n    transform-origin: left;\n    transform: rotateY(0deg);\n    transform-style: preserve-3d;\n  }\n\n  to {\n    transform: rotateY(-180deg);\n    transform-style: preserve-3d;\n    transform-origin: left;\n  }\n}\n\n.speed-match__container {\n  height: 73vh;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n}"],sourceRoot:""}]);const s=i},4133:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".game-name {\n\tpadding-top: 50px;\n\tfont-size: 52px;\n}\n\n.time-left {\n\tfont-size: 22px;\n}\n\n.important-text {\n\tcolor: rgb(59 130 246 / 0.5);\n\tfont-size: 22px;\n}\n\n.container-game {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\theight: 100%;\n\tbox-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n\tborder-radius: 10px;\n\n}\n\n.content {\n\n\tpadding: 10px;\n\tborder-radius: 7px;\n\tbox-shadow: 1px 1px 6px rgb(214, 212, 212);\n\n}\n\n.input-section {\n\twidth: 400px;\n\tmargin: 16px 0;\n\tpadding: 3px 5px;\n\tborder-radius: 7px;\n\tbox-shadow: 1px 1px 6px rgb(214, 212, 212);\n\toutline: none;\n}\n\n.background-sucsess {\n\tbackground-color: greenyellow;\n}\n\n.background-failed {\n\tbackground-color: red;\n}\n\n.result-section {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n}\n\n.result-container {\n\tfont-size: 22px;\n\tpadding: 10px 31px;\n\tmargin-bottom: 16px;\n}\n\n.btn {\n\tbox-shadow: 1px 1px 6px rgb(214, 212, 212);\n}\n\n.section {\n\tborder-bottom: none;\n\tpadding: 0 40px;\n}","",{version:3,sources:["webpack://./src/components/Games/TypingSpeed/TypingSpeed.css"],names:[],mappings:"AAAA;CACC,iBAAiB;CACjB,eAAe;AAChB;;AAEA;CACC,eAAe;AAChB;;AAEA;CACC,4BAA4B;CAC5B,eAAe;AAChB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,mBAAmB;CACnB,YAAY;CACZ,wCAAwC;CACxC,mBAAmB;;AAEpB;;AAEA;;CAEC,aAAa;CACb,kBAAkB;CAClB,0CAA0C;;AAE3C;;AAEA;CACC,YAAY;CACZ,cAAc;CACd,gBAAgB;CAChB,kBAAkB;CAClB,0CAA0C;CAC1C,aAAa;AACd;;AAEA;CACC,6BAA6B;AAC9B;;AAEA;CACC,qBAAqB;AACtB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,mBAAmB;AACpB;;AAEA;CACC,eAAe;CACf,kBAAkB;CAClB,mBAAmB;AACpB;;AAEA;CACC,0CAA0C;AAC3C;;AAEA;CACC,mBAAmB;CACnB,eAAe;AAChB",sourcesContent:[".game-name {\n\tpadding-top: 50px;\n\tfont-size: 52px;\n}\n\n.time-left {\n\tfont-size: 22px;\n}\n\n.important-text {\n\tcolor: rgb(59 130 246 / 0.5);\n\tfont-size: 22px;\n}\n\n.container-game {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\theight: 100%;\n\tbox-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n\tborder-radius: 10px;\n\n}\n\n.content {\n\n\tpadding: 10px;\n\tborder-radius: 7px;\n\tbox-shadow: 1px 1px 6px rgb(214, 212, 212);\n\n}\n\n.input-section {\n\twidth: 400px;\n\tmargin: 16px 0;\n\tpadding: 3px 5px;\n\tborder-radius: 7px;\n\tbox-shadow: 1px 1px 6px rgb(214, 212, 212);\n\toutline: none;\n}\n\n.background-sucsess {\n\tbackground-color: greenyellow;\n}\n\n.background-failed {\n\tbackground-color: red;\n}\n\n.result-section {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n}\n\n.result-container {\n\tfont-size: 22px;\n\tpadding: 10px 31px;\n\tmargin-bottom: 16px;\n}\n\n.btn {\n\tbox-shadow: 1px 1px 6px rgb(214, 212, 212);\n}\n\n.section {\n\tborder-bottom: none;\n\tpadding: 0 40px;\n}"],sourceRoot:""}]);const s=i},2167:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".pause-wrap {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n","",{version:3,sources:["webpack://./src/components/Games/gamesComponents/PauseComponent.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;AACxB",sourcesContent:[".pause-wrap {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n"],sourceRoot:""}]);const s=i},89:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".finish-game {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(59, 130, 246, 0.5);\n}\n\n.button-start-finished {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgb(232 171 66);\n  border-radius: 30px;\n  padding-left: 20px;\n  padding-right: 20px;\n}\n","",{version:3,sources:["webpack://./src/components/Games/gamesComponents/finishGameTable.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,yCAAyC;AAC3C;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,iCAAiC;EACjC,mBAAmB;EACnB,kBAAkB;EAClB,mBAAmB;AACrB",sourcesContent:[".finish-game {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(59, 130, 246, 0.5);\n}\n\n.button-start-finished {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgb(232 171 66);\n  border-radius: 30px;\n  padding-left: 20px;\n  padding-right: 20px;\n}\n"],sourceRoot:""}]);const s=i},7754:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".prestart-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  cursor: pointer;\n  height: inherit;\n  background-color: rgb(59 130 246 / 0.5);\n  height: 73vh;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 6px;\n  border-radius: 10px;\n  justify-content: center;\n  width: 100%;\n}\n\n.name-of-the-game {\n  display: flex;\n  align-items: center;\n  font-size: 52px;\n  color: black;\n  margin-bottom: 30px;\n  /* text-transform: uppercase; */\n}\n\n.game-description {\n  text-align: center;\n  margin-bottom: 5%;\n  color: rgb(7 89 133);\n  font-size: large;\n  width: 80%;\n}\n\n.prestart-image {\n  width: 50%;\n  height: 25%;\n  -o-object-fit: contain;\n     object-fit: contain;\n  opacity: 0.6;\n  margin-bottom: 30px;\n}\n\n.buttons-prestart {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.how-to-play-button {\n  margin-right: 3%;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  /* border: solid 8px rgb(147 197 253); */\n  border-radius: 10px;\n  background-color: #D1D5D8;\n  height: 40px;\n  width: 150px;\n}","",{version:3,sources:["webpack://./src/components/Games/gamesComponents/prestart.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,eAAe;EACf,eAAe;EACf,uCAAuC;EACvC,YAAY;EACZ,wCAAwC;EACxC,mBAAmB;EACnB,uBAAuB;EACvB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,YAAY;EACZ,mBAAmB;EACnB,+BAA+B;AACjC;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,oBAAoB;EACpB,gBAAgB;EAChB,UAAU;AACZ;;AAEA;EACE,UAAU;EACV,WAAW;EACX,sBAAmB;KAAnB,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,6BAA6B;EAC7B,wCAAwC;EACxC,mBAAmB;EACnB,yBAAyB;EACzB,YAAY;EACZ,YAAY;AACd",sourcesContent:[".prestart-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  cursor: pointer;\n  height: inherit;\n  background-color: rgb(59 130 246 / 0.5);\n  height: 73vh;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 6px;\n  border-radius: 10px;\n  justify-content: center;\n  width: 100%;\n}\n\n.name-of-the-game {\n  display: flex;\n  align-items: center;\n  font-size: 52px;\n  color: black;\n  margin-bottom: 30px;\n  /* text-transform: uppercase; */\n}\n\n.game-description {\n  text-align: center;\n  margin-bottom: 5%;\n  color: rgb(7 89 133);\n  font-size: large;\n  width: 80%;\n}\n\n.prestart-image {\n  width: 50%;\n  height: 25%;\n  object-fit: contain;\n  opacity: 0.6;\n  margin-bottom: 30px;\n}\n\n.buttons-prestart {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.how-to-play-button {\n  margin-right: 3%;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  /* border: solid 8px rgb(147 197 253); */\n  border-radius: 10px;\n  background-color: #D1D5D8;\n  height: 40px;\n  width: 150px;\n}"],sourceRoot:""}]);const s=i},269:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".right-now {\n  animation: pulsing 1s infinite;\n}\n\n/* .right-now:hover {\n  width: 100px;\n  height: 70px;\n  background-color: rgb(43, 156, 83);\n}*/\n\n.wrong-now {\n  transition-property: background-color;\n  transition-duration: 2s;\n}\n\n.wrong-now:hover {\n  /* width: 100px; */\n  /* height: 70px; */\n  background-color: rgb(214, 57, 57);\n}\n\n/* .c {\n  background: green;\n  border-radius: 100%;\n  width: 100px;\n  height: 100px;\n  -webkit-animation: pulsing 2s infinite;\n  animation: pulsing 2s infinite;\n} */\n\n@keyframes pulsing {\n  0% {\n    transform: scale(1, 1);\n  }\n\n  50% {\n    transform: scale(1.2, 1.2);\n  }\n}\n\n.head-game {\n  margin: 50px auto;\n}\n\n.color-match__container {\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n}","",{version:3,sources:["webpack://./src/components/Games/meaningColor/meaningColor.css"],names:[],mappings:"AAAA;EAEE,8BAA8B;AAChC;;AAEA;;;;EAIE;;AAEF;EACE,qCAAqC;EACrC,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,kCAAkC;AACpC;;AAEA;;;;;;;GAOG;;AAmBH;EACE;IAEE,sBAAsB;EACxB;;EAEA;IAEE,0BAA0B;EAC5B;AACF;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,wCAAwC;EACxC,mBAAmB;AACrB",sourcesContent:[".right-now {\n  -webkit-animation: pulsing 1s infinite;\n  animation: pulsing 1s infinite;\n}\n\n/* .right-now:hover {\n  width: 100px;\n  height: 70px;\n  background-color: rgb(43, 156, 83);\n}*/\n\n.wrong-now {\n  transition-property: background-color;\n  transition-duration: 2s;\n}\n\n.wrong-now:hover {\n  /* width: 100px; */\n  /* height: 70px; */\n  background-color: rgb(214, 57, 57);\n}\n\n/* .c {\n  background: green;\n  border-radius: 100%;\n  width: 100px;\n  height: 100px;\n  -webkit-animation: pulsing 2s infinite;\n  animation: pulsing 2s infinite;\n} */\n\n@-webkit-keyframes pulsing {\n  0% {\n    -webkit-transform: scale(1, 1);\n    transform: scale(1, 1);\n  }\n\n  50% {\n    -webkit-transform: scale(1.2, 1.2);\n    transform: scale(1.2, 1.2);\n  }\n\n  100% {\n    -webkit-transform: scale(1, 1);\n    transform: scale(1, 1);\n  }\n}\n\n@keyframes pulsing {\n  0% {\n    -webkit-transform: scale(1, 1);\n    transform: scale(1, 1);\n  }\n\n  50% {\n    -webkit-transform: scale(1.2, 1.2);\n    transform: scale(1.2, 1.2);\n  }\n}\n\n.head-game {\n  margin: 50px auto;\n}\n\n.color-match__container {\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n}"],sourceRoot:""}]);const s=i},8260:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".number-game__wrap {\n  display: grid;\n  justify-content: center;\n  grid-template-rows: auto 1fr auto;\n  height: 100%;\n  align-items: center;\n  gap: 5px;\n  padding: 50px 0;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n}\n\n.number-game__container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  gap: 10px;\n}\n\n.number-game__start {\n  align-self: center;\n  justify-self: center;\n\n}\n\n.number-game__title {\n  text-align: center;\n  font-size: 20px;\n  font-weight: bold;\n  padding-bottom: 10px;\n}\n\n.number-game__description {\n  font-style: italic;\n  padding-bottom: 10px;\n}\n\n.number-game__best-result {\n  text-align: center;\n  margin-top: 10px;\n  padding-bottom: 10px;\n}\n\n.number-game__score {\n  font-size: 18px;\n  text-transform: capitalize;\n}\n\n.number-game__remember {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  font-weight: bold;\n  font-size: 20px;\n  color: #333;\n}\n\n.number-game__number {\n  font-size: 28px;\n  border-bottom: 2px solid rgb(7 89 133);\n  width: 100%;\n  text-align: center;\n  margin-bottom: 10px;\n}\n\n.number-game__inner {\n  width: 100%;\n}\n\n.number-game__input {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n}\n\n.number-game__input input {\n  border-bottom: 2px solid rgb(7 89 133);\n  padding: 5px;\n  text-align: center;\n  width: 100%;\n  border-radius: 5px;\n  outline: transparent;\n}\n\n.number-game__input button {\n  border: 2px solid rgb(7 89 133);\n  border-top: none;\n  width: 100%;\n  padding: 5px;\n  border-radius: 5px;\n}\n\n.number-game__container-inner {\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  width: 100%;\n}","",{version:3,sources:["webpack://./src/components/Games/numberMemory/NumberMemory.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;EACvB,iCAAiC;EACjC,YAAY;EACZ,mBAAmB;EACnB,QAAQ;EACR,eAAe;EACf,wCAAwC;EACxC,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,YAAY;EACZ,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;;AAEtB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,oBAAoB;AACtB;;AAEA;EACE,eAAe;EACf,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,sBAAsB;EACtB,mBAAmB;EACnB,iBAAiB;EACjB,eAAe;EACf,WAAW;AACb;;AAEA;EACE,eAAe;EACf,sCAAsC;EACtC,WAAW;EACX,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,QAAQ;AACV;;AAEA;EACE,sCAAsC;EACtC,YAAY;EACZ,kBAAkB;EAClB,WAAW;EACX,kBAAkB;EAClB,oBAAoB;AACtB;;AAEA;EACE,+BAA+B;EAC/B,gBAAgB;EAChB,WAAW;EACX,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,WAAW;AACb",sourcesContent:[".number-game__wrap {\n  display: grid;\n  justify-content: center;\n  grid-template-rows: auto 1fr auto;\n  height: 100%;\n  align-items: center;\n  gap: 5px;\n  padding: 50px 0;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n}\n\n.number-game__container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  gap: 10px;\n}\n\n.number-game__start {\n  align-self: center;\n  justify-self: center;\n\n}\n\n.number-game__title {\n  text-align: center;\n  font-size: 20px;\n  font-weight: bold;\n  padding-bottom: 10px;\n}\n\n.number-game__description {\n  font-style: italic;\n  padding-bottom: 10px;\n}\n\n.number-game__best-result {\n  text-align: center;\n  margin-top: 10px;\n  padding-bottom: 10px;\n}\n\n.number-game__score {\n  font-size: 18px;\n  text-transform: capitalize;\n}\n\n.number-game__remember {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  font-weight: bold;\n  font-size: 20px;\n  color: #333;\n}\n\n.number-game__number {\n  font-size: 28px;\n  border-bottom: 2px solid rgb(7 89 133);\n  width: 100%;\n  text-align: center;\n  margin-bottom: 10px;\n}\n\n.number-game__inner {\n  width: 100%;\n}\n\n.number-game__input {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n}\n\n.number-game__input input {\n  border-bottom: 2px solid rgb(7 89 133);\n  padding: 5px;\n  text-align: center;\n  width: 100%;\n  border-radius: 5px;\n  outline: transparent;\n}\n\n.number-game__input button {\n  border: 2px solid rgb(7 89 133);\n  border-top: none;\n  width: 100%;\n  padding: 5px;\n  border-radius: 5px;\n}\n\n.number-game__container-inner {\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  width: 100%;\n}"],sourceRoot:""}]);const s=i},2925:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".sequence-memory__warp {\n  display: grid;\n  justify-content: center;\n  grid-template-rows: auto 1fr auto;\n  height: 100%;\n  align-items: center;\n  gap: 10px;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n  padding: 50px 0;\n}\n\n/* .sequence-memory */\n\n.sequence-memory__title {\n  text-align: center;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.sequence-memory__description {\n  font-style: italic;\n  text-align: center;\n}\n\n.sequence-memory__score {\n  font-size: 18px;\n  text-transform: capitalize;\n}\n\n.sequence-memory__field {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 3px;\n  min-width: 250px;\n  max-width: 300px;\n  width: 100%;\n  aspect-ratio: 1/1;\n  position: relative;\n}\n\n.sequence-memory__container {\n  display: grid;\n  text-align: center;\n  gap: 5px;\n}\n\n.sequence-memory__field-btn {\n  width: 100%;\n  height: 100%;\n  border: 3px solid rgb(7 89 133);\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.sequence-memory__field-btn.active {\n  background-color: rgb(7 89 133);\n}\n\n.sequence-memory__field.disabled::after {\n  content: '';\n  display: block;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n}","",{version:3,sources:["webpack://./src/components/Games/sequenceMemory/SequenceMemory.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;EACvB,iCAAiC;EACjC,YAAY;EACZ,mBAAmB;EACnB,SAAS;EACT,wCAAwC;EACxC,mBAAmB;EACnB,eAAe;AACjB;;AAEA,qBAAqB;;AAErB;EACE,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,qCAAqC;EACrC,kCAAkC;EAClC,QAAQ;EACR,gBAAgB;EAChB,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,QAAQ;AACV;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,+BAA+B;EAC/B,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,+BAA+B;AACjC;;AAEA;EACE,WAAW;EACX,cAAc;EACd,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,OAAO;EACP,MAAM;AACR",sourcesContent:[".sequence-memory__warp {\n  display: grid;\n  justify-content: center;\n  grid-template-rows: auto 1fr auto;\n  height: 100%;\n  align-items: center;\n  gap: 10px;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n  padding: 50px 0;\n}\n\n/* .sequence-memory */\n\n.sequence-memory__title {\n  text-align: center;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.sequence-memory__description {\n  font-style: italic;\n  text-align: center;\n}\n\n.sequence-memory__score {\n  font-size: 18px;\n  text-transform: capitalize;\n}\n\n.sequence-memory__field {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 3px;\n  min-width: 250px;\n  max-width: 300px;\n  width: 100%;\n  aspect-ratio: 1/1;\n  position: relative;\n}\n\n.sequence-memory__container {\n  display: grid;\n  text-align: center;\n  gap: 5px;\n}\n\n.sequence-memory__field-btn {\n  width: 100%;\n  height: 100%;\n  border: 3px solid rgb(7 89 133);\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.sequence-memory__field-btn.active {\n  background-color: rgb(7 89 133);\n}\n\n.sequence-memory__field.disabled::after {\n  content: '';\n  display: block;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n}"],sourceRoot:""}]);const s=i},6284:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".game-wrapper {\n    width: 100%;\n    margin: 0 auto;\n    box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n    height: 73vh;\n    border-radius: 10px;\n    padding-top: 50px;\n}\n\n.grid-cards {\n    margin-top: 30px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    grid-gap: 10px;\n}\n\nh1 {\n    font-size: 32px;\n}","",{version:3,sources:["webpack://./src/components/MemoryGame/MemoryGame.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,cAAc;IACd,wCAAwC;IACxC,YAAY;IACZ,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,sCAAsC;IACtC,cAAc;AAClB;;AAEA;IACI,eAAe;AACnB",sourcesContent:[".game-wrapper {\n    width: 100%;\n    margin: 0 auto;\n    box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n    height: 73vh;\n    border-radius: 10px;\n    padding-top: 50px;\n}\n\n.grid-cards {\n    margin-top: 30px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    grid-gap: 10px;\n}\n\nh1 {\n    font-size: 32px;\n}"],sourceRoot:""}]);const s=i},5573:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".card {\n  position: relative;\n}\n\n.card img {\n  display: block;\n  cursor: pointer;\n  border-radius: 6px;\n}\n\n.card .front-card {\n  transform: rotateY(90deg);\n  transition: all ease-in 0.2s;\n  position: absolute;\n\n}\n\n.flipped .front-card {\n  transform: rotateX(0deg);\n  transition-delay: 0.2s;\n\n}\n\n.card .back-card {\n  transition: all ease-in 0.2s;\n  transition-delay: 0.2s;\n}\n\n.flipped .back-card {\n  transform: rotateY(90deg);\n  transition-delay: 0s;\n}\n\n.shake {\n  animation: shake 0.2s ease-in-out;\n}\n\n@keyframes shake {\n\n  0%,\n  100% {\n    transform: translateX(0);\n  }\n\n  20% {\n    transform: translateX(-13px);\n  }\n\n  40% {\n    transform: translateX(13px);\n  }\n\n  60% {\n    transform: translateX(-8px);\n\n  }\n\n  80% {\n    transform: translateX(-8px);\n  }\n}","",{version:3,sources:["webpack://./src/components/MemoryGame/SingleCard.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,4BAA4B;EAC5B,kBAAkB;;AAEpB;;AAEA;EACE,wBAAwB;EACxB,sBAAsB;;AAExB;;AAEA;EACE,4BAA4B;EAC5B,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;EACzB,oBAAoB;AACtB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;;EAEE;;IAEE,wBAAwB;EAC1B;;EAEA;IACE,4BAA4B;EAC9B;;EAEA;IACE,2BAA2B;EAC7B;;EAEA;IACE,2BAA2B;;EAE7B;;EAEA;IACE,2BAA2B;EAC7B;AACF",sourcesContent:[".card {\n  position: relative;\n}\n\n.card img {\n  display: block;\n  cursor: pointer;\n  border-radius: 6px;\n}\n\n.card .front-card {\n  transform: rotateY(90deg);\n  transition: all ease-in 0.2s;\n  position: absolute;\n\n}\n\n.flipped .front-card {\n  transform: rotateX(0deg);\n  transition-delay: 0.2s;\n\n}\n\n.card .back-card {\n  transition: all ease-in 0.2s;\n  transition-delay: 0.2s;\n}\n\n.flipped .back-card {\n  transform: rotateY(90deg);\n  transition-delay: 0s;\n}\n\n.shake {\n  animation: shake 0.2s ease-in-out;\n}\n\n@keyframes shake {\n\n  0%,\n  100% {\n    transform: translateX(0);\n  }\n\n  20% {\n    transform: translateX(-13px);\n  }\n\n  40% {\n    transform: translateX(13px);\n  }\n\n  60% {\n    transform: translateX(-8px);\n\n  }\n\n  80% {\n    transform: translateX(-8px);\n  }\n}"],sourceRoot:""}]);const s=i},5336:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".calendar {\n  max-width: 100%;\n  display: flex;\n  flex-direction: column;\n  border: solid 1px rgb(26, 79, 63);\n  border-radius: 10px;\n}\n\n.table {\n  max-width: 100%;\n  width: 300px;\n  table-layout: fixed;\n}\n\n.year {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-self: center;\n}\n\n/* .change-period {\n  border: solid 1px gray;\n} */\n.change-period:hover {\n  cursor: pointer;\n}\n\n.table-calendar {\n  padding: 5px;\n}\n\n.month {\n  align-self: center;\n}\n\n.days-of-week-row {\n  margin-bottom: 2px;\n}\n.day-of-week {\n  /* width: 10%; */\n  width: 14%;\n  height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  padding: 8px;\n}\n.days-row {\n  height: 42px;\n  /* padding: 5px; */\n}\n\n.every-day {\n  box-sizing: border-box;\n  width: 14%;\n  height: 14%;\n  text-align: center;\n  padding: 5px;\n  /* border: solid 1px black; */\n  background-color: white;\n  border-radius: 50%;\n}\n\n.active-date {\n  background-color: aquamarine;\n}\n\n.not-active {\n  background-color: gray;\n}\n","",{version:3,sources:["webpack://./src/components/UserCalendar.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,iCAAiC;EACjC,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,aAAa;EACb,8BAA8B;EAC9B,kBAAkB;AACpB;;AAEA;;GAEG;AACH;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,UAAU;EACV,YAAY;EACZ,sBAAsB;EACtB,kBAAkB;EAClB,YAAY;AACd;AACA;EACE,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,UAAU;EACV,WAAW;EACX,kBAAkB;EAClB,YAAY;EACZ,6BAA6B;EAC7B,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,sBAAsB;AACxB",sourcesContent:[".calendar {\n  max-width: 100%;\n  display: flex;\n  flex-direction: column;\n  border: solid 1px rgb(26, 79, 63);\n  border-radius: 10px;\n}\n\n.table {\n  max-width: 100%;\n  width: 300px;\n  table-layout: fixed;\n}\n\n.year {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-self: center;\n}\n\n/* .change-period {\n  border: solid 1px gray;\n} */\n.change-period:hover {\n  cursor: pointer;\n}\n\n.table-calendar {\n  padding: 5px;\n}\n\n.month {\n  align-self: center;\n}\n\n.days-of-week-row {\n  margin-bottom: 2px;\n}\n.day-of-week {\n  /* width: 10%; */\n  width: 14%;\n  height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  padding: 8px;\n}\n.days-row {\n  height: 42px;\n  /* padding: 5px; */\n}\n\n.every-day {\n  box-sizing: border-box;\n  width: 14%;\n  height: 14%;\n  text-align: center;\n  padding: 5px;\n  /* border: solid 1px black; */\n  background-color: white;\n  border-radius: 50%;\n}\n\n.active-date {\n  background-color: aquamarine;\n}\n\n.not-active {\n  background-color: gray;\n}\n"],sourceRoot:""}]);const s=i},6228:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".modal {\n  height: 100vh;\n  width: 100vw;\n  background-color: rgba(0, 0, 0, 0.4);\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* transform: scale(0); */\n  opacity: 0;\n  pointer-events: none;\n  transition: 0.3s;\n}\n.modal.active {\n  /* transform: scale(1); */\n  opacity: 1;\n  pointer-events: all;\n}\n.modal__content {\n  padding: 20px;\n  border-radius: 10px;\n  background-color: white;\n  /* height: 200px; */\n  width: 45vw;\n  transform: scale(0.5);\n  transition: 0.3s all;\n}\n\n.modal__content.active {\n  transform: scale(1);\n}\n\n.caption_login {\n  font: bold 24px sans-serif;\n}\n.link__signup {\n  padding-left: 5px;\n  color: blue;\n  cursor: pointer;\n}\n\n.link__signup:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.label__signup {\n  display: flex;\n  flex-direction: column;\n  align-content: flex-start;\n}\n","",{version:3,sources:["webpack://./src/components/modal/ModalWindow.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,YAAY;EACZ,oCAAoC;EACpC,eAAe;EACf,MAAM;EACN,OAAO;EACP,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,yBAAyB;EACzB,UAAU;EACV,oBAAoB;EACpB,gBAAgB;AAClB;AACA;EACE,yBAAyB;EACzB,UAAU;EACV,mBAAmB;AACrB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,qBAAqB;EACrB,oBAAoB;AACtB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,0BAA0B;AAC5B;AACA;EACE,iBAAiB;EACjB,WAAW;EACX,eAAe;AACjB;;AAEA;EACE,0BAA0B;EAC1B,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,yBAAyB;AAC3B",sourcesContent:[".modal {\n  height: 100vh;\n  width: 100vw;\n  background-color: rgba(0, 0, 0, 0.4);\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* transform: scale(0); */\n  opacity: 0;\n  pointer-events: none;\n  transition: 0.3s;\n}\n.modal.active {\n  /* transform: scale(1); */\n  opacity: 1;\n  pointer-events: all;\n}\n.modal__content {\n  padding: 20px;\n  border-radius: 10px;\n  background-color: white;\n  /* height: 200px; */\n  width: 45vw;\n  transform: scale(0.5);\n  transition: 0.3s all;\n}\n\n.modal__content.active {\n  transform: scale(1);\n}\n\n.caption_login {\n  font: bold 24px sans-serif;\n}\n.link__signup {\n  padding-left: 5px;\n  color: blue;\n  cursor: pointer;\n}\n\n.link__signup:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.label__signup {\n  display: flex;\n  flex-direction: column;\n  align-content: flex-start;\n}\n"],sourceRoot:""}]);const s=i},1383:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,'/*\n! tailwindcss v3.2.4 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: \'\';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user\'s configured `sans` font-family by default.\n5. Use the user\'s configured `sans` font-feature-settings by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user\'s configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type=\'button\'],\n[type=\'reset\'],\n[type=\'submit\'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type=\'search\'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user\'s configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role="button"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don\'t get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden] {\n  display: none;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n.container {\n  width: 100%;\n}\n@media (min-width: 640px) {\n\n  .container {\n    max-width: 640px;\n  }\n}\n@media (min-width: 768px) {\n\n  .container {\n    max-width: 768px;\n  }\n}\n@media (min-width: 1024px) {\n\n  .container {\n    max-width: 1024px;\n  }\n}\n@media (min-width: 1280px) {\n\n  .container {\n    max-width: 1280px;\n  }\n}\n@media (min-width: 1536px) {\n\n  .container {\n    max-width: 1536px;\n  }\n}\n.m-2 {\n  margin: 0.5rem;\n}\n.m-5 {\n  margin: 1.25rem;\n}\n.my-3 {\n  margin-top: 0.75rem;\n  margin-bottom: 0.75rem;\n}\n.mt-\\[10px\\] {\n  margin-top: 10px;\n}\n.mb-4 {\n  margin-bottom: 1rem;\n}\n.mb-3 {\n  margin-bottom: 0.75rem;\n}\n.mb-10 {\n  margin-bottom: 2.5rem;\n}\n.mr-4 {\n  margin-right: 1rem;\n}\n.mb-8 {\n  margin-bottom: 2rem;\n}\n.-ml-3 {\n  margin-left: -0.75rem;\n}\n.mr-2 {\n  margin-right: 0.5rem;\n}\n.mr-5 {\n  margin-right: 1.25rem;\n}\n.mr-12 {\n  margin-right: 3rem;\n}\n.mr-3 {\n  margin-right: 0.75rem;\n}\n.mb-1 {\n  margin-bottom: 0.25rem;\n}\n.mb-6 {\n  margin-bottom: 1.5rem;\n}\n.ml-auto {\n  margin-left: auto;\n}\n.mr-auto {\n  margin-right: auto;\n}\n.mr-1 {\n  margin-right: 0.25rem;\n}\n.mt-2 {\n  margin-top: 0.5rem;\n}\n.mb-2 {\n  margin-bottom: 0.5rem;\n}\n.mb-5 {\n  margin-bottom: 1.25rem;\n}\n.mt-12 {\n  margin-top: 3rem;\n}\n.mb-\\[5\\%\\] {\n  margin-bottom: 5%;\n}\n.block {\n  display: block;\n}\n.flex {\n  display: flex;\n}\n.table {\n  display: table;\n}\n.h-screen {\n  height: 100vh;\n}\n.h-\\[auto\\] {\n  height: auto;\n}\n.h-16 {\n  height: 4rem;\n}\n.h-\\[20px\\] {\n  height: 20px;\n}\n.h-\\[30px\\] {\n  height: 30px;\n}\n.h-full {\n  height: 100%;\n}\n.h-\\[276px\\] {\n  height: 276px;\n}\n.h-\\[50px\\] {\n  height: 50px;\n}\n.h-\\[200px\\] {\n  height: 200px;\n}\n.h-auto {\n  height: auto;\n}\n.h-\\[34px\\] {\n  height: 34px;\n}\n.h-\\[40px\\] {\n  height: 40px;\n}\n.h-2\\/3 {\n  height: 66.666667%;\n}\n.h-\\[100px\\] {\n  height: 100px;\n}\n.max-h-5 {\n  max-height: 1.25rem;\n}\n.w-full {\n  width: 100%;\n}\n.w-\\[full\\] {\n  width: full;\n}\n.w-\\[20px\\] {\n  width: 20px;\n}\n.w-\\[100\\%\\] {\n  width: 100%;\n}\n.w-\\[150px\\] {\n  width: 150px;\n}\n.w-\\[80px\\] {\n  width: 80px;\n}\n.w-\\[50px\\] {\n  width: 50px;\n}\n.w-16 {\n  width: 4rem;\n}\n.w-\\[30px\\] {\n  width: 30px;\n}\n.w-56 {\n  width: 14rem;\n}\n.w-fit {\n  width: -moz-fit-content;\n  width: fit-content;\n}\n.w-\\[200px\\] {\n  width: 200px;\n}\n.w-\\[17px\\] {\n  width: 17px;\n}\n.w-\\[504px\\] {\n  width: 504px;\n}\n.w-28 {\n  width: 7rem;\n}\n.w-20 {\n  width: 5rem;\n}\n.w-\\[34px\\] {\n  width: 34px;\n}\n.w-\\[45\\%\\] {\n  width: 45%;\n}\n.max-w-lg {\n  max-width: 32rem;\n}\n.flex-shrink-0 {\n  flex-shrink: 0;\n}\n.cursor-pointer {\n  cursor: pointer;\n}\n.appearance-none {\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n}\n.flex-row {\n  flex-direction: row;\n}\n.flex-col {\n  flex-direction: column;\n}\n.flex-wrap {\n  flex-wrap: wrap;\n}\n.items-center {\n  align-items: center;\n}\n.justify-start {\n  justify-content: flex-start;\n}\n.justify-center {\n  justify-content: center;\n}\n.justify-between {\n  justify-content: space-between;\n}\n.justify-around {\n  justify-content: space-around;\n}\n.self-end {\n  align-self: flex-end;\n}\n.self-center {\n  align-self: center;\n}\n.rounded-full {\n  border-radius: 9999px;\n}\n.rounded {\n  border-radius: 0.25rem;\n}\n.rounded-xl {\n  border-radius: 0.75rem;\n}\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n.border {\n  border-width: 1px;\n}\n.border-4 {\n  border-width: 4px;\n}\n.border-2 {\n  border-width: 2px;\n}\n.border-8 {\n  border-width: 8px;\n}\n.border-gray-200 {\n  --tw-border-opacity: 1;\n  border-color: rgb(229 231 235 / var(--tw-border-opacity));\n}\n.border-teal-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(20 184 166 / var(--tw-border-opacity));\n}\n.border-red-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(239 68 68 / var(--tw-border-opacity));\n}\n.border-blue-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(59 130 246 / var(--tw-border-opacity));\n}\n.border-yellow-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(234 179 8 / var(--tw-border-opacity));\n}\n.border-black {\n  --tw-border-opacity: 1;\n  border-color: rgb(0 0 0 / var(--tw-border-opacity));\n}\n.border-blue-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(147 197 253 / var(--tw-border-opacity));\n}\n.border-sky-700 {\n  --tw-border-opacity: 1;\n  border-color: rgb(3 105 161 / var(--tw-border-opacity));\n}\n.bg-blue-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(96 165 250 / var(--tw-bg-opacity));\n}\n.bg-blue-300 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(147 197 253 / var(--tw-bg-opacity));\n}\n.bg-gray-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\n}\n.bg-teal-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(20 184 166 / var(--tw-bg-opacity));\n}\n.bg-gray-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n.bg-slate-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(226 232 240 / var(--tw-bg-opacity));\n}\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n.bg-blue-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n}\n.bg-blue-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(29 78 216 / var(--tw-bg-opacity));\n}\n.bg-gray-300 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(209 213 219 / var(--tw-bg-opacity));\n}\n.bg-red-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(248 113 113 / var(--tw-bg-opacity));\n}\n.bg-green-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n}\n.bg-red-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n}\n.p-1 {\n  padding: 0.25rem;\n}\n.p-2 {\n  padding: 0.5rem;\n}\n.p-4 {\n  padding: 1rem;\n}\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n.px-12 {\n  padding-left: 3rem;\n  padding-right: 3rem;\n}\n.py-3 {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n.py-0 {\n  padding-top: 0px;\n  padding-bottom: 0px;\n}\n.pr-\\[10\\%\\] {\n  padding-right: 10%;\n}\n.pl-\\[10\\%\\] {\n  padding-left: 10%;\n}\n.text-center {\n  text-align: center;\n}\n.align-baseline {\n  vertical-align: baseline;\n}\n.align-middle {\n  vertical-align: middle;\n}\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.text-5xl {\n  font-size: 3rem;\n  line-height: 1;\n}\n.font-bold {\n  font-weight: 700;\n}\n.uppercase {\n  text-transform: uppercase;\n}\n.italic {\n  font-style: italic;\n}\n.leading-tight {\n  line-height: 1.25;\n}\n.tracking-wide {\n  letter-spacing: 0.025em;\n}\n.text-blue-800 {\n  --tw-text-opacity: 1;\n  color: rgb(30 64 175 / var(--tw-text-opacity));\n}\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.text-gray-700 {\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\n.text-red-500 {\n  --tw-text-opacity: 1;\n  color: rgb(239 68 68 / var(--tw-text-opacity));\n}\n.text-blue-500 {\n  --tw-text-opacity: 1;\n  color: rgb(59 130 246 / var(--tw-text-opacity));\n}\n.text-yellow-500 {\n  --tw-text-opacity: 1;\n  color: rgb(234 179 8 / var(--tw-text-opacity));\n}\n.text-black {\n  --tw-text-opacity: 1;\n  color: rgb(0 0 0 / var(--tw-text-opacity));\n}\n.text-blue-900 {\n  --tw-text-opacity: 1;\n  color: rgb(30 58 138 / var(--tw-text-opacity));\n}\n.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.duration-300 {\n  transition-duration: 300ms;\n}\n.first-letter\\:uppercase::first-letter {\n  text-transform: uppercase;\n}\n.first-line\\:h-20::first-line {\n  height: 5rem;\n}\n.checked\\:text-red-500:checked {\n  --tw-text-opacity: 1;\n  color: rgb(239 68 68 / var(--tw-text-opacity));\n}\n.hover\\:border-teal-700:hover {\n  --tw-border-opacity: 1;\n  border-color: rgb(15 118 110 / var(--tw-border-opacity));\n}\n.hover\\:bg-red-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n}\n.hover\\:bg-teal-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(15 118 110 / var(--tw-bg-opacity));\n}\n.hover\\:text-red-200:hover {\n  --tw-text-opacity: 1;\n  color: rgb(254 202 202 / var(--tw-text-opacity));\n}\n.focus\\:border-gray-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(107 114 128 / var(--tw-border-opacity));\n}\n.focus\\:bg-white:focus {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}',"",{version:3,sources:["webpack://./src/index.css","<no source>"],names:[],mappings:"AAAA;;CAAc,CAAd;;;CAAc;;AAAd;;;EAAA,sBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,mBAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,gBAAc;AAAA;;AAAd;;;;;;CAAc;;AAAd;EAAA,gBAAc,EAAd,MAAc;EAAd,8BAAc,EAAd,MAAc;EAAd,gBAAc,EAAd,MAAc;EAAd,cAAc;KAAd,WAAc,EAAd,MAAc;EAAd,4NAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,yCAAc;UAAd,iCAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;EAAA,kBAAc;EAAd,oBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;EAAd,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,mBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,+GAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,cAAc;EAAd,cAAc;EAAd,kBAAc;EAAd,wBAAc;AAAA;;AAAd;EAAA,eAAc;AAAA;;AAAd;EAAA,WAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;EAAd,yBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;EAAA,oBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,SAAc,EAAd,MAAc;EAAd,UAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,oBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,0BAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,aAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,YAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,6BAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,0BAAc,EAAd,MAAc;EAAd,aAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,kBAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;;;;;;;;EAAA,SAAc;AAAA;;AAAd;EAAA,SAAc;EAAd,UAAc;AAAA;;AAAd;EAAA,UAAc;AAAA;;AAAd;;;EAAA,gBAAc;EAAd,SAAc;EAAd,UAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;AAAA;;AAAd;;CAAc;AAAd;EAAA,eAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;;;;EAAA,cAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;EAAd,YAAc;AAAA;;AAAd,wEAAc;AAAd;EAAA,aAAc;AAAA;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,sCAAc;EAAd,kCAAc;EAAd,2BAAc;EAAd,sBAAc;EAAd,8BAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,sCAAc;EAAd,kCAAc;EAAd,2BAAc;EAAd,sBAAc;EAAd,8BAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd;AAAc;AACd;EAAA;AAAoB;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AACpB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,wBAAmB;KAAnB,qBAAmB;UAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,gBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,eAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAFnB;EAAA;CCAA;ADAA;EAAA;CCAA;ADAA;EAAA,qBCAA;EDAA;CCAA;ADAA;EAAA,uBCAA;EDAA;CCAA;ADAA;EAAA,mBCAA;EDAA;CCAA;ADAA;EAAA,mBCAA;EDAA;CCAA;ADAA;EAAA,qBCAA;EDAA;CCAA;ADAA;EAAA,uBCAA;EDAA;CCAA;ADAA;EAAA,mBCAA;EDAA;CCAA;ADAA;EAAA,+BCAA;EDAA;CCAA",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;",null],sourceRoot:""}]);const s=i},4168:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".account-page {\n  background-color: rgb(238, 237, 237);\n  height: inherit;\n}\n\n.account-container {\n  display: flex;\n  width: 80%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n  height: 95%;\n}\n\n.aside-nav-account {\n  display: flex;\n  flex-direction: column;\n  margin-right: 10px;\n  width: 300px;\n}\n\n.aside-nav-list {\n  display: flex;\n  justify-items: center;\n  align-content: center;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n.aside-nav-list:hover {\n  cursor: pointer;\n  color: orange;\n}\n\nmain {\n  width: 100%;\n}\n\n.open-now {\n  background-color: rgb(147 197 253);\n  color: white;\n  border-radius: 5px;\n}\n\n.account-info {\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  width: 100%;\n  padding: 3%;\n  /* border-bottom: solid 1px black; */\n}\n\n.section {\n  display: flex;\n  flex-direction: column;\n  /* border-bottom: solid 1px gray; */\n  padding-bottom: 5%;\n  padding-top: 3%;\n  justify-content: space-around;\n}\n\n.h2-account {\n  font-size: 2em;\n  line-height: 1.35em;\n  font-weight: 500;\n  margin-bottom: 15px;\n}\n\n.h3-account {\n  font-size: 1.45em;\n  line-height: 1.4em;\n  margin-bottom: 15px;\n}\n\n.info-block {\n  margin-bottom: 5%;\n  font-size: 16px;\n  line-height: 24px;\n}\n\n.info {\n  display: flex;\n  margin-bottom: 10px;\n}\n\n.change-info {\n  text-decoration: underline;\n  color: blue;\n}\n\n.change-info:hover {\n  cursor: pointer;\n}\n\n.change-in-process {\n  display: flex;\n  margin-bottom: 5px;\n}\n\n.name-email {\n  margin-right: 100px;\n}\n\n.name-email::first-letter {\n  text-transform: uppercase;\n}\n\n.user-name-email {\n  font-size: 20px;\n}\n\n.label__settings {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.block-changing {\n  display: flex;\n  width: 60%;\n  flex-direction: column;\n}\n\n.category-in-favorites {\n  padding: 10px;\n  background-color: gray;\n  margin-bottom: 5px;\n  display: flex;\n  color: white;\n}\n\n.category-in-favorites:hover {\n  cursor: pointer;\n  background-color: rgb(227, 198, 143);\n}\n\n.choosen-category {\n  background-color: rgb(86, 136, 177);\n}\n\n.choosen-category>img {\n  display: block;\n}\n\n.checked {\n  display: none;\n}","",{version:3,sources:["webpack://./src/pages/AccountSettingsPage.css"],names:[],mappings:"AAAA;EACE,oCAAoC;EACpC,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,iBAAiB;EACjB,kBAAkB;EAClB,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,qBAAqB;EACrB,qBAAqB;EACrB,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,aAAa;AACf;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,kCAAkC;EAClC,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,WAAW;EACX,WAAW;EACX,oCAAoC;AACtC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mCAAmC;EACnC,kBAAkB;EAClB,eAAe;EACf,6BAA6B;AAC/B;;AAEA;EACE,cAAc;EACd,mBAAmB;EACnB,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,0BAA0B;EAC1B,WAAW;AACb;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,aAAa;EACb,YAAY;AACd;;AAEA;EACE,eAAe;EACf,oCAAoC;AACtC;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;AACf",sourcesContent:[".account-page {\n  background-color: rgb(238, 237, 237);\n  height: inherit;\n}\n\n.account-container {\n  display: flex;\n  width: 80%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n  height: 95%;\n}\n\n.aside-nav-account {\n  display: flex;\n  flex-direction: column;\n  margin-right: 10px;\n  width: 300px;\n}\n\n.aside-nav-list {\n  display: flex;\n  justify-items: center;\n  align-content: center;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n.aside-nav-list:hover {\n  cursor: pointer;\n  color: orange;\n}\n\nmain {\n  width: 100%;\n}\n\n.open-now {\n  background-color: rgb(147 197 253);\n  color: white;\n  border-radius: 5px;\n}\n\n.account-info {\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  width: 100%;\n  padding: 3%;\n  /* border-bottom: solid 1px black; */\n}\n\n.section {\n  display: flex;\n  flex-direction: column;\n  /* border-bottom: solid 1px gray; */\n  padding-bottom: 5%;\n  padding-top: 3%;\n  justify-content: space-around;\n}\n\n.h2-account {\n  font-size: 2em;\n  line-height: 1.35em;\n  font-weight: 500;\n  margin-bottom: 15px;\n}\n\n.h3-account {\n  font-size: 1.45em;\n  line-height: 1.4em;\n  margin-bottom: 15px;\n}\n\n.info-block {\n  margin-bottom: 5%;\n  font-size: 16px;\n  line-height: 24px;\n}\n\n.info {\n  display: flex;\n  margin-bottom: 10px;\n}\n\n.change-info {\n  text-decoration: underline;\n  color: blue;\n}\n\n.change-info:hover {\n  cursor: pointer;\n}\n\n.change-in-process {\n  display: flex;\n  margin-bottom: 5px;\n}\n\n.name-email {\n  margin-right: 100px;\n}\n\n.name-email::first-letter {\n  text-transform: uppercase;\n}\n\n.user-name-email {\n  font-size: 20px;\n}\n\n.label__settings {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.block-changing {\n  display: flex;\n  width: 60%;\n  flex-direction: column;\n}\n\n.category-in-favorites {\n  padding: 10px;\n  background-color: gray;\n  margin-bottom: 5px;\n  display: flex;\n  color: white;\n}\n\n.category-in-favorites:hover {\n  cursor: pointer;\n  background-color: rgb(227, 198, 143);\n}\n\n.choosen-category {\n  background-color: rgb(86, 136, 177);\n}\n\n.choosen-category>img {\n  display: block;\n}\n\n.checked {\n  display: none;\n}"],sourceRoot:""}]);const s=i},5659:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".game-page {\n  background-color: rgb(238, 237, 237);\n  height: inherit;\n}\n\n.game-page-container {\n  display: flex;\n  width: 85%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n  height: 97%;\n}\n\n.input-radio {\n  display: none;\n}\n\n.category-image {\n  width: 50px;\n  height: auto;\n  border: solid 4px rgb(147, 197, 253);\n  margin-right: 2%;\n  border-radius: 5px;\n}\n\n.games-info {\n  display: flex;\n  flex-direction: column;\n  /* flex-wrap: wrap; */\n  background-color: white;\n  width: 100%;\n  padding: 2%;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n  height: 100%;\n}\n\n.game-contant {\n  height: 90%;\n  align-content: center;\n}\n\n.aside-nav-game {\n  display: flex;\n  flex-direction: column;\n  width: 250px;\n  background-color: white;\n  box-shadow: rgb(0 0 0 / 10%) 0px 4px 6px;\n  border-radius: 10px;\n  margin-right: 5%;\n  height: 100%;\n  padding: 15px;\n}\n\n.aside-nav-game-list {\n  display: flex;\n  justify-items: center;\n  align-content: center;\n  padding: 10px;\n  border-radius: 20px;\n}\n\n.aside-nav-game-list:hover {\n  cursor: pointer;\n  color: orange;\n}\n\n.h2-category {\n  font-size: 2em;\n  line-height: 1em;\n  font-weight: 500;\n  /* margin-bottom: 15px; */\n  display: flex;\n  align-items: center;\n  box-shadow: 0 4px 6px -6px #5a5959;\n  padding-bottom: 2%;\n  height: 10%;\n}\n\n.game-image-small {\n  width: 80px;\n  height: auto;\n  margin: 5% auto;\n}\n\n.game-small {\n  margin: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n  padding: 5px;\n  width: 200px;\n  height: 170px;\n  background-color: #93C5FD;\n  transition: all .3s;\n}\n\n.game-small:hover {\n  background-color: rgb(254 202 202);\n}\n\n.name-of-game {\n  color: rgb(5, 98, 148);\n  font-weight: 600;\n}","",{version:3,sources:["webpack://./src/pages/gamePage1.css"],names:[],mappings:"AAAA;EACE,oCAAoC;EACpC,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,iBAAiB;EACjB,kBAAkB;EAClB,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,oCAAoC;EACpC,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,qBAAqB;EACrB,uBAAuB;EACvB,WAAW;EACX,WAAW;EACX,wCAAwC;EACxC,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,WAAW;EACX,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,YAAY;EACZ,uBAAuB;EACvB,wCAAwC;EACxC,mBAAmB;EACnB,gBAAgB;EAChB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,aAAa;EACb,qBAAqB;EACrB,qBAAqB;EACrB,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,aAAa;AACf;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,gBAAgB;EAChB,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,kCAAkC;EAClC,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,wCAAwC;EACxC,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,kCAAkC;AACpC;;AAEA;EACE,sBAAsB;EACtB,gBAAgB;AAClB",sourcesContent:[".game-page {\n  background-color: rgb(238, 237, 237);\n  height: inherit;\n}\n\n.game-page-container {\n  display: flex;\n  width: 85%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n  height: 97%;\n}\n\n.input-radio {\n  display: none;\n}\n\n.category-image {\n  width: 50px;\n  height: auto;\n  border: solid 4px rgb(147, 197, 253);\n  margin-right: 2%;\n  border-radius: 5px;\n}\n\n.games-info {\n  display: flex;\n  flex-direction: column;\n  /* flex-wrap: wrap; */\n  background-color: white;\n  width: 100%;\n  padding: 2%;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n  height: 100%;\n}\n\n.game-contant {\n  height: 90%;\n  align-content: center;\n}\n\n.aside-nav-game {\n  display: flex;\n  flex-direction: column;\n  width: 250px;\n  background-color: white;\n  box-shadow: rgb(0 0 0 / 10%) 0px 4px 6px;\n  border-radius: 10px;\n  margin-right: 5%;\n  height: 100%;\n  padding: 15px;\n}\n\n.aside-nav-game-list {\n  display: flex;\n  justify-items: center;\n  align-content: center;\n  padding: 10px;\n  border-radius: 20px;\n}\n\n.aside-nav-game-list:hover {\n  cursor: pointer;\n  color: orange;\n}\n\n.h2-category {\n  font-size: 2em;\n  line-height: 1em;\n  font-weight: 500;\n  /* margin-bottom: 15px; */\n  display: flex;\n  align-items: center;\n  box-shadow: 0 4px 6px -6px #5a5959;\n  padding-bottom: 2%;\n  height: 10%;\n}\n\n.game-image-small {\n  width: 80px;\n  height: auto;\n  margin: 5% auto;\n}\n\n.game-small {\n  margin: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n  padding: 5px;\n  width: 200px;\n  height: 170px;\n  background-color: #93C5FD;\n  transition: all .3s;\n}\n\n.game-small:hover {\n  background-color: rgb(254 202 202);\n}\n\n.name-of-game {\n  color: rgb(5, 98, 148);\n  font-weight: 600;\n}"],sourceRoot:""}]);const s=i},5714:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".main-container {\n  display: flex;\n  justify-content: space-between;\n  width: 80%;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.workout-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  border-radius: 4px;\n  width: 60%;\n  color: white;\n  background-color: rgb(147 197 253);\n}\n\n.calendar-container {\n  display: flex;\n  flex-direction: column;\n  max-width: 40%;\n  align-items: center;\n  justify-content: center;\n}\n","",{version:3,sources:["webpack://./src/pages/mainPage.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;EAC9B,UAAU;EACV,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,6BAA6B;EAC7B,kBAAkB;EAClB,UAAU;EACV,YAAY;EACZ,kCAAkC;AACpC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,cAAc;EACd,mBAAmB;EACnB,uBAAuB;AACzB",sourcesContent:[".main-container {\n  display: flex;\n  justify-content: space-between;\n  width: 80%;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.workout-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  border-radius: 4px;\n  width: 60%;\n  color: white;\n  background-color: rgb(147 197 253);\n}\n\n.calendar-container {\n  display: flex;\n  flex-direction: column;\n  max-width: 40%;\n  align-items: center;\n  justify-content: center;\n}\n"],sourceRoot:""}]);const s=i},9303:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(7537),a=t.n(r),o=t(3645),i=t.n(o)()(a());i.push([e.id,".page-container {\n  margin: 0;\n  padding: 0;\n  overflow-y: auto;\n}\n\n.statistic-container {\n  display: flex;\n  width: 85%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  height: 97vh;\n}\n\n.game-statistic {\n  display: flex;\n  justify-content: space-around;\n}\n\n.small-img {\n  width: 50px;\n}\n\n.statistic-h2 {\n  font-size: 2em;\n  line-height: 1em;\n  font-weight: 500;\n  /* margin-bottom: 15px; */\n  display: flex;\n  align-items: center;\n  box-shadow: 0 4px 6px -6px #5a5959;\n  padding-bottom: 2%;\n  height: 10%;\n}\n\n.statistic-page {\n  display: flex;\n  flex-direction: column;\n  /* flex-wrap: wrap; */\n  background-color: white;\n  width: 100%;\n  padding: 2%;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n  height: 100%;\n}\n\n.statistic-block {\n  margin: 15px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n  padding: 5px;\n  width: 100%;\n  /* height: 300px; */\n  background-color: #93c5fd;\n  transition: all 0.3s;\n}\n","",{version:3,sources:["webpack://./src/pages/statisticPage.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,iBAAiB;EACjB,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,gBAAgB;EAChB,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,kCAAkC;EAClC,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,qBAAqB;EACrB,uBAAuB;EACvB,WAAW;EACX,WAAW;EACX,wCAAwC;EACxC,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,6BAA6B;EAC7B,wCAAwC;EACxC,mBAAmB;EACnB,YAAY;EACZ,WAAW;EACX,mBAAmB;EACnB,yBAAyB;EACzB,oBAAoB;AACtB",sourcesContent:[".page-container {\n  margin: 0;\n  padding: 0;\n  overflow-y: auto;\n}\n\n.statistic-container {\n  display: flex;\n  width: 85%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  height: 97vh;\n}\n\n.game-statistic {\n  display: flex;\n  justify-content: space-around;\n}\n\n.small-img {\n  width: 50px;\n}\n\n.statistic-h2 {\n  font-size: 2em;\n  line-height: 1em;\n  font-weight: 500;\n  /* margin-bottom: 15px; */\n  display: flex;\n  align-items: center;\n  box-shadow: 0 4px 6px -6px #5a5959;\n  padding-bottom: 2%;\n  height: 10%;\n}\n\n.statistic-page {\n  display: flex;\n  flex-direction: column;\n  /* flex-wrap: wrap; */\n  background-color: white;\n  width: 100%;\n  padding: 2%;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n  height: 100%;\n}\n\n.statistic-block {\n  margin: 15px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  box-shadow: rgb(0 0 0 / 10%) 0px 2px 5px;\n  border-radius: 10px;\n  padding: 5px;\n  width: 100%;\n  /* height: 300px; */\n  background-color: #93c5fd;\n  transition: all 0.3s;\n}\n"],sourceRoot:""}]);const s=i},3645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),n.push(u))}},n}},7537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},8679:(e,n,t)=>{"use strict";var r=t(9864),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?i:s[e.$$typeof]||a}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=i;var c=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,A=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(n,t,r){if("string"!=typeof t){if(p){var a=f(t);a&&a!==p&&e(n,a,r)}var i=u(t);d&&(i=i.concat(d(t)));for(var s=l(n),m=l(t),h=0;h<i.length;++h){var g=i[h];if(!(o[g]||r&&r[g]||m&&m[g]||s&&s[g])){var b=A(t,g);try{c(n,g,b)}catch(e){}}}}return n}},8324:(e,n,t)=>{var r=t(6377),a=["ability","able","aboard","about","above","accept","accident","according","account","accurate","acres","across","act","action","active","activity","actual","actually","add","addition","additional","adjective","adult","adventure","advice","affect","afraid","after","afternoon","again","against","age","ago","agree","ahead","aid","air","airplane","alike","alive","all","allow","almost","alone","along","aloud","alphabet","already","also","although","am","among","amount","ancient","angle","angry","animal","announced","another","answer","ants","any","anybody","anyone","anything","anyway","anywhere","apart","apartment","appearance","apple","applied","appropriate","are","area","arm","army","around","arrange","arrangement","arrive","arrow","art","article","as","aside","ask","asleep","at","ate","atmosphere","atom","atomic","attached","attack","attempt","attention","audience","author","automobile","available","average","avoid","aware","away","baby","back","bad","badly","bag","balance","ball","balloon","band","bank","bar","bare","bark","barn","base","baseball","basic","basis","basket","bat","battle","be","bean","bear","beat","beautiful","beauty","became","because","become","becoming","bee","been","before","began","beginning","begun","behavior","behind","being","believed","bell","belong","below","belt","bend","beneath","bent","beside","best","bet","better","between","beyond","bicycle","bigger","biggest","bill","birds","birth","birthday","bit","bite","black","blank","blanket","blew","blind","block","blood","blow","blue","board","boat","body","bone","book","border","born","both","bottle","bottom","bound","bow","bowl","box","boy","brain","branch","brass","brave","bread","break","breakfast","breath","breathe","breathing","breeze","brick","bridge","brief","bright","bring","broad","broke","broken","brother","brought","brown","brush","buffalo","build","building","built","buried","burn","burst","bus","bush","business","busy","but","butter","buy","by","cabin","cage","cake","call","calm","came","camera","camp","can","canal","cannot","cap","capital","captain","captured","car","carbon","card","care","careful","carefully","carried","carry","case","cast","castle","cat","catch","cattle","caught","cause","cave","cell","cent","center","central","century","certain","certainly","chain","chair","chamber","chance","change","changing","chapter","character","characteristic","charge","chart","check","cheese","chemical","chest","chicken","chief","child","children","choice","choose","chose","chosen","church","circle","circus","citizen","city","class","classroom","claws","clay","clean","clear","clearly","climate","climb","clock","close","closely","closer","cloth","clothes","clothing","cloud","club","coach","coal","coast","coat","coffee","cold","collect","college","colony","color","column","combination","combine","come","comfortable","coming","command","common","community","company","compare","compass","complete","completely","complex","composed","composition","compound","concerned","condition","congress","connected","consider","consist","consonant","constantly","construction","contain","continent","continued","contrast","control","conversation","cook","cookies","cool","copper","copy","corn","corner","correct","correctly","cost","cotton","could","count","country","couple","courage","course","court","cover","cow","cowboy","crack","cream","create","creature","crew","crop","cross","crowd","cry","cup","curious","current","curve","customs","cut","cutting","daily","damage","dance","danger","dangerous","dark","darkness","date","daughter","dawn","day","dead","deal","dear","death","decide","declared","deep","deeply","deer","definition","degree","depend","depth","describe","desert","design","desk","detail","determine","develop","development","diagram","diameter","did","die","differ","difference","different","difficult","difficulty","dig","dinner","direct","direction","directly","dirt","dirty","disappear","discover","discovery","discuss","discussion","disease","dish","distance","distant","divide","division","do","doctor","does","dog","doing","doll","dollar","done","donkey","door","dot","double","doubt","down","dozen","draw","drawn","dream","dress","drew","dried","drink","drive","driven","driver","driving","drop","dropped","drove","dry","duck","due","dug","dull","during","dust","duty","each","eager","ear","earlier","early","earn","earth","easier","easily","east","easy","eat","eaten","edge","education","effect","effort","egg","eight","either","electric","electricity","element","elephant","eleven","else","empty","end","enemy","energy","engine","engineer","enjoy","enough","enter","entire","entirely","environment","equal","equally","equator","equipment","escape","especially","essential","establish","even","evening","event","eventually","ever","every","everybody","everyone","everything","everywhere","evidence","exact","exactly","examine","example","excellent","except","exchange","excited","excitement","exciting","exclaimed","exercise","exist","expect","experience","experiment","explain","explanation","explore","express","expression","extra","eye","face","facing","fact","factor","factory","failed","fair","fairly","fall","fallen","familiar","family","famous","far","farm","farmer","farther","fast","fastened","faster","fat","father","favorite","fear","feathers","feature","fed","feed","feel","feet","fell","fellow","felt","fence","few","fewer","field","fierce","fifteen","fifth","fifty","fight","fighting","figure","fill","film","final","finally","find","fine","finest","finger","finish","fire","fireplace","firm","first","fish","five","fix","flag","flame","flat","flew","flies","flight","floating","floor","flow","flower","fly","fog","folks","follow","food","foot","football","for","force","foreign","forest","forget","forgot","forgotten","form","former","fort","forth","forty","forward","fought","found","four","fourth","fox","frame","free","freedom","frequently","fresh","friend","friendly","frighten","frog","from","front","frozen","fruit","fuel","full","fully","fun","function","funny","fur","furniture","further","future","gain","game","garage","garden","gas","gasoline","gate","gather","gave","general","generally","gentle","gently","get","getting","giant","gift","girl","give","given","giving","glad","glass","globe","go","goes","gold","golden","gone","good","goose","got","government","grabbed","grade","gradually","grain","grandfather","grandmother","graph","grass","gravity","gray","great","greater","greatest","greatly","green","grew","ground","group","grow","grown","growth","guard","guess","guide","gulf","gun","habit","had","hair","half","halfway","hall","hand","handle","handsome","hang","happen","happened","happily","happy","harbor","hard","harder","hardly","has","hat","have","having","hay","he","headed","heading","health","heard","hearing","heart","heat","heavy","height","held","hello","help","helpful","her","herd","here","herself","hidden","hide","high","higher","highest","highway","hill","him","himself","his","history","hit","hold","hole","hollow","home","honor","hope","horn","horse","hospital","hot","hour","house","how","however","huge","human","hundred","hung","hungry","hunt","hunter","hurried","hurry","hurt","husband","ice","idea","identity","if","ill","image","imagine","immediately","importance","important","impossible","improve","in","inch","include","including","income","increase","indeed","independent","indicate","individual","industrial","industry","influence","information","inside","instance","instant","instead","instrument","interest","interior","into","introduced","invented","involved","iron","is","island","it","its","itself","jack","jar","jet","job","join","joined","journey","joy","judge","jump","jungle","just","keep","kept","key","kids","kill","kind","kitchen","knew","knife","know","knowledge","known","label","labor","lack","lady","laid","lake","lamp","land","language","large","larger","largest","last","late","later","laugh","law","lay","layers","lead","leader","leaf","learn","least","leather","leave","leaving","led","left","leg","length","lesson","let","letter","level","library","lie","life","lift","light","like","likely","limited","line","lion","lips","liquid","list","listen","little","live","living","load","local","locate","location","log","lonely","long","longer","look","loose","lose","loss","lost","lot","loud","love","lovely","low","lower","luck","lucky","lunch","lungs","lying","machine","machinery","mad","made","magic","magnet","mail","main","mainly","major","make","making","man","managed","manner","manufacturing","many","map","mark","market","married","mass","massage","master","material","mathematics","matter","may","maybe","me","meal","mean","means","meant","measure","meat","medicine","meet","melted","member","memory","men","mental","merely","met","metal","method","mice","middle","might","mighty","mile","military","milk","mill","mind","mine","minerals","minute","mirror","missing","mission","mistake","mix","mixture","model","modern","molecular","moment","money","monkey","month","mood","moon","more","morning","most","mostly","mother","motion","motor","mountain","mouse","mouth","move","movement","movie","moving","mud","muscle","music","musical","must","my","myself","mysterious","nails","name","nation","national","native","natural","naturally","nature","near","nearby","nearer","nearest","nearly","necessary","neck","needed","needle","needs","negative","neighbor","neighborhood","nervous","nest","never","new","news","newspaper","next","nice","night","nine","no","nobody","nodded","noise","none","noon","nor","north","nose","not","note","noted","nothing","notice","noun","now","number","numeral","nuts","object","observe","obtain","occasionally","occur","ocean","of","off","offer","office","officer","official","oil","old","older","oldest","on","once","one","only","onto","open","operation","opinion","opportunity","opposite","or","orange","orbit","order","ordinary","organization","organized","origin","original","other","ought","our","ourselves","out","outer","outline","outside","over","own","owner","oxygen","pack","package","page","paid","pain","paint","pair","palace","pale","pan","paper","paragraph","parallel","parent","park","part","particles","particular","particularly","partly","parts","party","pass","passage","past","path","pattern","pay","peace","pen","pencil","people","per","percent","perfect","perfectly","perhaps","period","person","personal","pet","phrase","physical","piano","pick","picture","pictured","pie","piece","pig","pile","pilot","pine","pink","pipe","pitch","place","plain","plan","plane","planet","planned","planning","plant","plastic","plate","plates","play","pleasant","please","pleasure","plenty","plural","plus","pocket","poem","poet","poetry","point","pole","police","policeman","political","pond","pony","pool","poor","popular","population","porch","port","position","positive","possible","possibly","post","pot","potatoes","pound","pour","powder","power","powerful","practical","practice","prepare","present","president","press","pressure","pretty","prevent","previous","price","pride","primitive","principal","principle","printed","private","prize","probably","problem","process","produce","product","production","program","progress","promised","proper","properly","property","protection","proud","prove","provide","public","pull","pupil","pure","purple","purpose","push","put","putting","quarter","queen","question","quick","quickly","quiet","quietly","quite","rabbit","race","radio","railroad","rain","raise","ran","ranch","range","rapidly","rate","rather","raw","rays","reach","read","reader","ready","real","realize","rear","reason","recall","receive","recent","recently","recognize","record","red","refer","refused","region","regular","related","relationship","religious","remain","remarkable","remember","remove","repeat","replace","replied","report","represent","require","research","respect","rest","result","return","review","rhyme","rhythm","rice","rich","ride","riding","right","ring","rise","rising","river","road","roar","rock","rocket","rocky","rod","roll","roof","room","root","rope","rose","rough","round","route","row","rubbed","rubber","rule","ruler","run","running","rush","sad","saddle","safe","safety","said","sail","sale","salmon","salt","same","sand","sang","sat","satellites","satisfied","save","saved","saw","say","scale","scared","scene","school","science","scientific","scientist","score","screen","sea","search","season","seat","second","secret","section","see","seed","seeing","seems","seen","seldom","select","selection","sell","send","sense","sent","sentence","separate","series","serious","serve","service","sets","setting","settle","settlers","seven","several","shade","shadow","shake","shaking","shall","shallow","shape","share","sharp","she","sheep","sheet","shelf","shells","shelter","shine","shinning","ship","shirt","shoe","shoot","shop","shore","short","shorter","shot","should","shoulder","shout","show","shown","shut","sick","sides","sight","sign","signal","silence","silent","silk","silly","silver","similar","simple","simplest","simply","since","sing","single","sink","sister","sit","sitting","situation","six","size","skill","skin","sky","slabs","slave","sleep","slept","slide","slight","slightly","slip","slipped","slope","slow","slowly","small","smaller","smallest","smell","smile","smoke","smooth","snake","snow","so","soap","social","society","soft","softly","soil","solar","sold","soldier","solid","solution","solve","some","somebody","somehow","someone","something","sometime","somewhere","son","song","soon","sort","sound","source","south","southern","space","speak","special","species","specific","speech","speed","spell","spend","spent","spider","spin","spirit","spite","split","spoken","sport","spread","spring","square","stage","stairs","stand","standard","star","stared","start","state","statement","station","stay","steady","steam","steel","steep","stems","step","stepped","stick","stiff","still","stock","stomach","stone","stood","stop","stopped","store","storm","story","stove","straight","strange","stranger","straw","stream","street","strength","stretch","strike","string","strip","strong","stronger","struck","structure","struggle","stuck","student","studied","studying","subject","substance","success","successful","such","sudden","suddenly","sugar","suggest","suit","sum","summer","sun","sunlight","supper","supply","support","suppose","sure","surface","surprise","surrounded","swam","sweet","swept","swim","swimming","swing","swung","syllable","symbol","system","table","tail","take","taken","tales","talk","tall","tank","tape","task","taste","taught","tax","tea","teach","teacher","team","tears","teeth","telephone","television","tell","temperature","ten","tent","term","terrible","test","than","thank","that","thee","them","themselves","then","theory","there","therefore","these","they","thick","thin","thing","think","third","thirty","this","those","thou","though","thought","thousand","thread","three","threw","throat","through","throughout","throw","thrown","thumb","thus","thy","tide","tie","tight","tightly","till","time","tin","tiny","tip","tired","title","to","tobacco","today","together","told","tomorrow","tone","tongue","tonight","too","took","tool","top","topic","torn","total","touch","toward","tower","town","toy","trace","track","trade","traffic","trail","train","transportation","trap","travel","treated","tree","triangle","tribe","trick","tried","trip","troops","tropical","trouble","truck","trunk","truth","try","tube","tune","turn","twelve","twenty","twice","two","type","typical","uncle","under","underline","understanding","unhappy","union","unit","universe","unknown","unless","until","unusual","up","upon","upper","upward","us","use","useful","using","usual","usually","valley","valuable","value","vapor","variety","various","vast","vegetable","verb","vertical","very","vessels","victory","view","village","visit","visitor","voice","volume","vote","vowel","voyage","wagon","wait","walk","wall","want","war","warm","warn","was","wash","waste","watch","water","wave","way","we","weak","wealth","wear","weather","week","weigh","weight","welcome","well","went","were","west","western","wet","whale","what","whatever","wheat","wheel","when","whenever","where","wherever","whether","which","while","whispered","whistle","white","who","whole","whom","whose","why","wide","widely","wife","wild","will","willing","win","wind","window","wing","winter","wire","wise","wish","with","within","without","wolf","women","won","wonder","wonderful","wood","wooden","wool","word","wore","work","worker","world","worried","worry","worse","worth","would","wrapped","write","writer","writing","written","wrong","wrote","yard","year","yellow","yes","yesterday","yet","you","young","younger","your","yourself","youth","zero","zebra","zipper","zoo","zulu"];function o(e){const n=e?.seed?new r(e.seed):null;function t(){return e&&e.maxLength>1?function(){for(var n,t=!1;!t;)(n=o()).length<=e.maxLength&&(t=!0);return n}():o()}function o(){return a[i(a.length)]}function i(e){const t=n?n():Math.random();return Math.floor(t*e)}if(void 0===e)return t();"number"==typeof e&&(e={exactly:e}),e.exactly&&(e.min=e.exactly,e.max=e.exactly),"number"!=typeof e.wordsPerString&&(e.wordsPerString=1),"function"!=typeof e.formatter&&(e.formatter=e=>e),"string"!=typeof e.separator&&(e.separator=" ");for(var s=e.min+i(e.max+1-e.min),l=[],c="",u=0,d=0;d<s*e.wordsPerString;d++)u===e.wordsPerString-1?c+=e.formatter(t(),u):c+=e.formatter(t(),u)+e.separator,u++,(d+1)%e.wordsPerString==0&&(l.push(c),c="",u=0);return"string"==typeof e.join&&(l=l.join(e.join)),l}e.exports=o,o.wordList=a},4448:(e,n,t)=>{"use strict";var r=t(7294),a=t(3840);function o(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,s={};function l(e,n){c(e,n),c(e+"Capture",n)}function c(e,n){for(s[e]=n,e=0;e<n.length;e++)i.add(n[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,A=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},p={};function m(e,n,t,r,a,o,i){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=o,this.removeEmptyString=i}var h={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){h[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];h[n]=new m(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){h[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){h[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){h[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){h[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){h[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){h[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){h[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function y(e,n,t,r){var a=h.hasOwnProperty(n)?h[n]:null;(null!==a?0!==a.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,a,r)&&(t=null),r||null===a?function(e){return!!d.call(p,e)||!d.call(f,e)&&(A.test(e)?p[e]=!0:(f[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):a.mustUseProperty?e[a.propertyName]=null===t?3!==a.type&&"":t:(n=a.attributeName,r=a.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(a=a.type)||4===a&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(g,b);h[n]=new m(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(g,b);h[n]=new m(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(g,b);h[n]=new m(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){h[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),h.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){h[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var v=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),E=Symbol.for("react.portal"),w=Symbol.for("react.fragment"),B=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),k=Symbol.for("react.provider"),j=Symbol.for("react.context"),S=Symbol.for("react.forward_ref"),_=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),T=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var P=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var R=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=R&&e[R]||e["@@iterator"])?e:null}var L,M=Object.assign;function D(e){if(void 0===L)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);L=n&&n[1]||""}return"\n"+L+e}var F=!1;function U(e,n){if(!e||F)return"";F=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var a=n.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,s=o.length-1;1<=i&&0<=s&&a[i]!==o[s];)s--;for(;1<=i&&0<=s;i--,s--)if(a[i]!==o[s]){if(1!==i||1!==s)do{if(i--,0>--s||a[i]!==o[s]){var l="\n"+a[i].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=i&&0<=s);break}}}finally{F=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?D(e):""}function z(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function H(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case w:return"Fragment";case E:return"Portal";case C:return"Profiler";case B:return"StrictMode";case _:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case j:return(e.displayName||"Context")+".Consumer";case k:return(e._context.displayName||"Context")+".Provider";case S:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(n=e.displayName||null)?n:H(e.type)||"Memo";case T:n=e._payload,e=e._init;try{return H(e(n))}catch(e){}}return null}function G(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return H(n);case 8:return n===B?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function $(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function q(e){e._valueTracker||(e._valueTracker=function(e){var n=$(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var a=t.get,o=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function Z(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function V(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function Y(e,n){var t=n.checked;return M({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function X(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=W(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function K(e,n){null!=(n=n.checked)&&y(e,"checked",n,!1)}function Q(e,n){K(e,n);var t=W(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,W(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function J(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&V(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var a=0;a<t.length;a++)n["$"+t[a]]=!0;for(t=0;t<e.length;t++)a=n.hasOwnProperty("$"+e[t].value),e[t].selected!==a&&(e[t].selected=a),a&&r&&(e[t].defaultSelected=!0)}else{for(t=""+W(t),n=null,a=0;a<e.length;a++){if(e[a].value===t)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==n||e[a].disabled||(n=e[a])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(o(91));return M({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(o(92));if(ne(t)){if(1<t.length)throw Error(o(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:W(t)}}function oe(e,n){var t=W(n.value),r=W(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function ie(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?se(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,n)}))}:ue);function Ae(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function me(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||fe.hasOwnProperty(e)&&fe[e]?(""+n).trim():n+"px"}function he(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),a=me(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,a):e[t]=a}}Object.keys(fe).forEach((function(e){pe.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),fe[n]=fe[e]}))}));var ge=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,n){if(n){if(ge[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(o(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(o(62))}}function ye(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ve=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,we=null,Be=null;function Ce(e){if(e=ya(e)){if("function"!=typeof Ee)throw Error(o(280));var n=e.stateNode;n&&(n=xa(n),Ee(e.stateNode,e.type,n))}}function ke(e){we?Be?Be.push(e):Be=[e]:we=e}function je(){if(we){var e=we,n=Be;if(Be=we=null,Ce(e),n)for(e=0;e<n.length;e++)Ce(n[e])}}function Se(e,n){return e(n)}function _e(){}var Ne=!1;function Oe(e,n,t){if(Ne)return e(n,t);Ne=!0;try{return Se(e,n,t)}finally{Ne=!1,(null!==we||null!==Be)&&(_e(),je())}}function Te(e,n){var t=e.stateNode;if(null===t)return null;var r=xa(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(o(231,n,typeof t));return t}var Pe=!1;if(u)try{var Re={};Object.defineProperty(Re,"passive",{get:function(){Pe=!0}}),window.addEventListener("test",Re,Re),window.removeEventListener("test",Re,Re)}catch(ue){Pe=!1}function Ie(e,n,t,r,a,o,i,s,l){var c=Array.prototype.slice.call(arguments,3);try{n.apply(t,c)}catch(e){this.onError(e)}}var Le=!1,Me=null,De=!1,Fe=null,Ue={onError:function(e){Le=!0,Me=e}};function ze(e,n,t,r,a,o,i,s,l){Le=!1,Me=null,Ie.apply(Ue,arguments)}function He(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{0!=(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function Ge(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function We(e){if(He(e)!==e)throw Error(o(188))}function $e(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=He(e)))throw Error(o(188));return n!==e?null:e}for(var t=e,r=n;;){var a=t.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){t=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===t)return We(a),e;if(i===r)return We(a),n;i=i.sibling}throw Error(o(188))}if(t.return!==r.return)t=a,r=i;else{for(var s=!1,l=a.child;l;){if(l===t){s=!0,t=a,r=i;break}if(l===r){s=!0,r=a,t=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===t){s=!0,t=i,r=a;break}if(l===r){s=!0,r=i,t=a;break}l=l.sibling}if(!s)throw Error(o(189))}}if(t.alternate!==r)throw Error(o(190))}if(3!==t.tag)throw Error(o(188));return t.stateNode.current===t?e:n}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=qe(e);if(null!==n)return n;e=e.sibling}return null}var Ze=a.unstable_scheduleCallback,Ve=a.unstable_cancelCallback,Ye=a.unstable_shouldYield,Xe=a.unstable_requestPaint,Ke=a.unstable_now,Qe=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,en=a.unstable_UserBlockingPriority,nn=a.unstable_NormalPriority,tn=a.unstable_LowPriority,rn=a.unstable_IdlePriority,an=null,on=null,sn=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ln(e)/cn|0)|0},ln=Math.log,cn=Math.LN2,un=64,dn=4194304;function An(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function fn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&t;if(0!==i){var s=i&~a;0!==s?r=An(s):0!=(o&=i)&&(r=An(o))}else 0!=(i=t&~a)?r=An(i):0!==o&&(r=An(o));if(0===r)return 0;if(0!==n&&n!==r&&0==(n&a)&&((a=r&-r)>=(o=n&-n)||16===a&&0!=(4194240&o)))return n;if(0!=(4&r)&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)a=1<<(t=31-sn(n)),r|=e[t],n&=~a;return r}function pn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function mn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function hn(){var e=un;return 0==(4194240&(un<<=1))&&(un=64),e}function gn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function bn(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-sn(n)]=t}function yn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-sn(t),a=1<<r;a&n|e[r]&n&&(e[r]|=n),t&=~a}}var vn=0;function xn(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var En,wn,Bn,Cn,kn,jn=!1,Sn=[],_n=null,Nn=null,On=null,Tn=new Map,Pn=new Map,Rn=[],In="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ln(e,n){switch(e){case"focusin":case"focusout":_n=null;break;case"dragenter":case"dragleave":Nn=null;break;case"mouseover":case"mouseout":On=null;break;case"pointerover":case"pointerout":Tn.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":Pn.delete(n.pointerId)}}function Mn(e,n,t,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==n&&null!==(n=ya(n))&&wn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==a&&-1===n.indexOf(a)&&n.push(a),e)}function Dn(e){var n=ba(e.target);if(null!==n){var t=He(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=Ge(t)))return e.blockedOn=n,void kn(e.priority,(function(){Bn(t)}))}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function Fn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Xn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=ya(t))&&wn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);ve=r,t.target.dispatchEvent(r),ve=null,n.shift()}return!0}function Un(e,n,t){Fn(e)&&t.delete(n)}function zn(){jn=!1,null!==_n&&Fn(_n)&&(_n=null),null!==Nn&&Fn(Nn)&&(Nn=null),null!==On&&Fn(On)&&(On=null),Tn.forEach(Un),Pn.forEach(Un)}function Hn(e,n){e.blockedOn===n&&(e.blockedOn=null,jn||(jn=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,zn)))}function Gn(e){function n(n){return Hn(n,e)}if(0<Sn.length){Hn(Sn[0],e);for(var t=1;t<Sn.length;t++){var r=Sn[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_n&&Hn(_n,e),null!==Nn&&Hn(Nn,e),null!==On&&Hn(On,e),Tn.forEach(n),Pn.forEach(n),t=0;t<Rn.length;t++)(r=Rn[t]).blockedOn===e&&(r.blockedOn=null);for(;0<Rn.length&&null===(t=Rn[0]).blockedOn;)Dn(t),null===t.blockedOn&&Rn.shift()}var Wn=v.ReactCurrentBatchConfig,$n=!0;function qn(e,n,t,r){var a=vn,o=Wn.transition;Wn.transition=null;try{vn=1,Vn(e,n,t,r)}finally{vn=a,Wn.transition=o}}function Zn(e,n,t,r){var a=vn,o=Wn.transition;Wn.transition=null;try{vn=4,Vn(e,n,t,r)}finally{vn=a,Wn.transition=o}}function Vn(e,n,t,r){if($n){var a=Xn(e,n,t,r);if(null===a)Wr(e,n,r,Yn,t),Ln(e,r);else if(function(e,n,t,r,a){switch(n){case"focusin":return _n=Mn(_n,e,n,t,r,a),!0;case"dragenter":return Nn=Mn(Nn,e,n,t,r,a),!0;case"mouseover":return On=Mn(On,e,n,t,r,a),!0;case"pointerover":var o=a.pointerId;return Tn.set(o,Mn(Tn.get(o)||null,e,n,t,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Pn.set(o,Mn(Pn.get(o)||null,e,n,t,r,a)),!0}return!1}(a,e,n,t,r))r.stopPropagation();else if(Ln(e,r),4&n&&-1<In.indexOf(e)){for(;null!==a;){var o=ya(a);if(null!==o&&En(o),null===(o=Xn(e,n,t,r))&&Wr(e,n,r,Yn,t),o===a)break;a=o}null!==a&&r.stopPropagation()}else Wr(e,n,r,null,t)}}var Yn=null;function Xn(e,n,t,r){if(Yn=null,null!==(e=ba(e=xe(r))))if(null===(n=He(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=Ge(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return Yn=e,null}function Kn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Qe()){case Je:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Qn=null,Jn=null,et=null;function nt(){if(et)return et;var e,n,t=Jn,r=t.length,a="value"in Qn?Qn.value:Qn.textContent,o=a.length;for(e=0;e<r&&t[e]===a[e];e++);var i=r-e;for(n=1;n<=i&&t[r-n]===a[o-n];n++);return et=a.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function at(){return!1}function ot(e){function n(n,t,r,a,o){for(var i in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(n=e[i],this[i]=n?n(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rt:at,this.isPropagationStopped=at,this}return M(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var it,st,lt,ct={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ut=ot(ct),dt=M({},ct,{view:0,detail:0}),At=ot(dt),ft=M({},dt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Ct,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lt&&(lt&&"mousemove"===e.type?(it=e.screenX-lt.screenX,st=e.screenY-lt.screenY):st=it=0,lt=e),it)},movementY:function(e){return"movementY"in e?e.movementY:st}}),pt=ot(ft),mt=ot(M({},ft,{dataTransfer:0})),ht=ot(M({},dt,{relatedTarget:0})),gt=ot(M({},ct,{animationName:0,elapsedTime:0,pseudoElement:0})),bt=M({},ct,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yt=ot(bt),vt=ot(M({},ct,{data:0})),xt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Et={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Bt(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=wt[e])&&!!n[e]}function Ct(){return Bt}var kt=M({},dt,{key:function(e){if(e.key){var n=xt[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Et[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Ct,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),jt=ot(kt),St=ot(M({},ft,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_t=ot(M({},dt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Ct})),Nt=ot(M({},ct,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ot=M({},ft,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Tt=ot(Ot),Pt=[9,13,27,32],Rt=u&&"CompositionEvent"in window,It=null;u&&"documentMode"in document&&(It=document.documentMode);var Lt=u&&"TextEvent"in window&&!It,Mt=u&&(!Rt||It&&8<It&&11>=It),Dt=String.fromCharCode(32),Ft=!1;function Ut(e,n){switch(e){case"keyup":return-1!==Pt.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ht=!1,Gt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Gt[e.type]:"textarea"===n}function $t(e,n,t,r){ke(r),0<(n=qr(n,"onChange")).length&&(t=new ut("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var qt=null,Zt=null;function Vt(e){Dr(e,0)}function Yt(e){if(Z(va(e)))return e}function Xt(e,n){if("change"===e)return n}var Kt=!1;if(u){var Qt;if(u){var Jt="oninput"in document;if(!Jt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jt="function"==typeof er.oninput}Qt=Jt}else Qt=!1;Kt=Qt&&(!document.documentMode||9<document.documentMode)}function nr(){qt&&(qt.detachEvent("onpropertychange",tr),Zt=qt=null)}function tr(e){if("value"===e.propertyName&&Yt(Zt)){var n=[];$t(n,Zt,e,xe(e)),Oe(Vt,n)}}function rr(e,n,t){"focusin"===e?(nr(),Zt=t,(qt=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yt(Zt)}function or(e,n){if("click"===e)return Yt(n)}function ir(e,n){if("input"===e||"change"===e)return Yt(n)}var sr="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function lr(e,n){if(sr(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var a=t[r];if(!d.call(n,a)||!sr(e[a],n[a]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,n){var t,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?dr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function Ar(){for(var e=window,n=V();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=V((e=n.contentWindow).document)}return n}function fr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function pr(e){var n=Ar(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&dr(t.ownerDocument.documentElement,t)){if(null!==r&&fr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var a=t.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=ur(t,o);var i=ur(t,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((n=n.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(n),e.extend(i.node,i.offset)):(n.setEnd(i.node,i.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=u&&"documentMode"in document&&11>=document.documentMode,hr=null,gr=null,br=null,yr=!1;function vr(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;yr||null==hr||hr!==V(r)||(r="selectionStart"in(r=hr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&lr(br,r)||(br=r,0<(r=qr(gr,"onSelect")).length&&(n=new ut("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=hr)))}function xr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var Er={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},wr={},Br={};function Cr(e){if(wr[e])return wr[e];if(!Er[e])return e;var n,t=Er[e];for(n in t)if(t.hasOwnProperty(n)&&n in Br)return wr[e]=t[n];return e}u&&(Br=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var kr=Cr("animationend"),jr=Cr("animationiteration"),Sr=Cr("animationstart"),_r=Cr("transitionend"),Nr=new Map,Or="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Tr(e,n){Nr.set(e,n),l(n,[e])}for(var Pr=0;Pr<Or.length;Pr++){var Rr=Or[Pr];Tr(Rr.toLowerCase(),"on"+(Rr[0].toUpperCase()+Rr.slice(1)))}Tr(kr,"onAnimationEnd"),Tr(jr,"onAnimationIteration"),Tr(Sr,"onAnimationStart"),Tr("dblclick","onDoubleClick"),Tr("focusin","onFocus"),Tr("focusout","onBlur"),Tr(_r,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Mr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,a,i,s,l,c){if(ze.apply(this,arguments),Le){if(!Le)throw Error(o(198));var u=Me;Le=!1,Me=null,De||(De=!0,Fe=u)}}(r,n,void 0,e),e.currentTarget=null}function Dr(e,n){n=0!=(4&n);for(var t=0;t<e.length;t++){var r=e[t],a=r.event;r=r.listeners;e:{var o=void 0;if(n)for(var i=r.length-1;0<=i;i--){var s=r[i],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&a.isPropagationStopped())break e;Mr(a,s,c),o=l}else for(i=0;i<r.length;i++){if(l=(s=r[i]).instance,c=s.currentTarget,s=s.listener,l!==o&&a.isPropagationStopped())break e;Mr(a,s,c),o=l}}}if(De)throw e=Fe,De=!1,Fe=null,e}function Fr(e,n){var t=n[ma];void 0===t&&(t=n[ma]=new Set);var r=e+"__bubble";t.has(r)||(Gr(n,e,2,!1),t.add(r))}function Ur(e,n,t){var r=0;n&&(r|=4),Gr(t,e,r,n)}var zr="_reactListening"+Math.random().toString(36).slice(2);function Hr(e){if(!e[zr]){e[zr]=!0,i.forEach((function(n){"selectionchange"!==n&&(Lr.has(n)||Ur(n,!1,e),Ur(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[zr]||(n[zr]=!0,Ur("selectionchange",!1,n))}}function Gr(e,n,t,r){switch(Kn(n)){case 1:var a=qn;break;case 4:a=Zn;break;default:a=Vn}t=a.bind(null,n,t,e),a=void 0,!Pe||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(a=!0),r?void 0!==a?e.addEventListener(n,t,{capture:!0,passive:a}):e.addEventListener(n,t,!0):void 0!==a?e.addEventListener(n,t,{passive:a}):e.addEventListener(n,t,!1)}function Wr(e,n,t,r,a){var o=r;if(0==(1&n)&&0==(2&n)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var s=r.stateNode.containerInfo;if(s===a||8===s.nodeType&&s.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===a||8===l.nodeType&&l.parentNode===a))return;i=i.return}for(;null!==s;){if(null===(i=ba(s)))return;if(5===(l=i.tag)||6===l){r=o=i;continue e}s=s.parentNode}}r=r.return}Oe((function(){var r=o,a=xe(t),i=[];e:{var s=Nr.get(e);if(void 0!==s){var l=ut,c=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":l=jt;break;case"focusin":c="focus",l=ht;break;case"focusout":c="blur",l=ht;break;case"beforeblur":case"afterblur":l=ht;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=_t;break;case kr:case jr:case Sr:l=gt;break;case _r:l=Nt;break;case"scroll":l=At;break;case"wheel":l=Tt;break;case"copy":case"cut":case"paste":l=yt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=St}var u=0!=(4&n),d=!u&&"scroll"===e,A=u?null!==s?s+"Capture":null:s;u=[];for(var f,p=r;null!==p;){var m=(f=p).stateNode;if(5===f.tag&&null!==m&&(f=m,null!==A&&null!=(m=Te(p,A))&&u.push($r(p,m,f))),d)break;p=p.return}0<u.length&&(s=new l(s,c,null,t,a),i.push({event:s,listeners:u}))}}if(0==(7&n)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||t===ve||!(c=t.relatedTarget||t.fromElement)||!ba(c)&&!c[pa])&&(l||s)&&(s=a.window===a?a:(s=a.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=t.relatedTarget||t.toElement)?ba(c):null)&&(c!==(d=He(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=pt,m="onMouseLeave",A="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=St,m="onPointerLeave",A="onPointerEnter",p="pointer"),d=null==l?s:va(l),f=null==c?s:va(c),(s=new u(m,p+"leave",l,t,a)).target=d,s.relatedTarget=f,m=null,ba(a)===r&&((u=new u(A,p+"enter",c,t,a)).target=f,u.relatedTarget=d,m=u),d=m,l&&c)e:{for(A=c,p=0,f=u=l;f;f=Zr(f))p++;for(f=0,m=A;m;m=Zr(m))f++;for(;0<p-f;)u=Zr(u),p--;for(;0<f-p;)A=Zr(A),f--;for(;p--;){if(u===A||null!==A&&u===A.alternate)break e;u=Zr(u),A=Zr(A)}u=null}else u=null;null!==l&&Vr(i,s,l,u,!1),null!==c&&null!==d&&Vr(i,d,c,u,!0)}if("select"===(l=(s=r?va(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var h=Xt;else if(Wt(s))if(Kt)h=ir;else{h=ar;var g=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(h=or);switch(h&&(h=h(e,r))?$t(i,h,t,a):(g&&g(e,s,r),"focusout"===e&&(g=s._wrapperState)&&g.controlled&&"number"===s.type&&ee(s,"number",s.value)),g=r?va(r):window,e){case"focusin":(Wt(g)||"true"===g.contentEditable)&&(hr=g,gr=r,br=null);break;case"focusout":br=gr=hr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,vr(i,t,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":vr(i,t,a)}var b;if(Rt)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Ht?Ut(e,t)&&(y="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(y="onCompositionStart");y&&(Mt&&"ko"!==t.locale&&(Ht||"onCompositionStart"!==y?"onCompositionEnd"===y&&Ht&&(b=nt()):(Jn="value"in(Qn=a)?Qn.value:Qn.textContent,Ht=!0)),0<(g=qr(r,y)).length&&(y=new vt(y,e,null,t,a),i.push({event:y,listeners:g}),(b||null!==(b=zt(t)))&&(y.data=b))),(b=Lt?function(e,n){switch(e){case"compositionend":return zt(n);case"keypress":return 32!==n.which?null:(Ft=!0,Dt);case"textInput":return(e=n.data)===Dt&&Ft?null:e;default:return null}}(e,t):function(e,n){if(Ht)return"compositionend"===e||!Rt&&Ut(e,n)?(e=nt(),et=Jn=Qn=null,Ht=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Mt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=qr(r,"onBeforeInput")).length&&(a=new vt("onBeforeInput","beforeinput",null,t,a),i.push({event:a,listeners:r}),a.data=b)}Dr(i,n)}))}function $r(e,n,t){return{instance:e,listener:n,currentTarget:t}}function qr(e,n){for(var t=n+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Te(e,t))&&r.unshift($r(e,o,a)),null!=(o=Te(e,n))&&r.push($r(e,o,a))),e=e.return}return r}function Zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Vr(e,n,t,r,a){for(var o=n._reactName,i=[];null!==t&&t!==r;){var s=t,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,a?null!=(l=Te(t,o))&&i.unshift($r(t,l,s)):a||null!=(l=Te(t,o))&&i.push($r(t,l,s))),t=t.return}0!==i.length&&e.push({event:n,listeners:i})}var Yr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Kr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Xr,"")}function Qr(e,n,t){if(n=Kr(n),Kr(e)!==n&&t)throw Error(o(425))}function Jr(){}var ea=null,na=null;function ta(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(sa)}:ra;function sa(e){setTimeout((function(){throw e}))}function la(e,n){var t=n,r=0;do{var a=t.nextSibling;if(e.removeChild(t),a&&8===a.nodeType)if("/$"===(t=a.data)){if(0===r)return e.removeChild(a),void Gn(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=a}while(t);Gn(n)}function ca(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function ua(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),Aa="__reactFiber$"+da,fa="__reactProps$"+da,pa="__reactContainer$"+da,ma="__reactEvents$"+da,ha="__reactListeners$"+da,ga="__reactHandles$"+da;function ba(e){var n=e[Aa];if(n)return n;for(var t=e.parentNode;t;){if(n=t[pa]||t[Aa]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=ua(e);null!==e;){if(t=e[Aa])return t;e=ua(e)}return n}t=(e=t).parentNode}return null}function ya(e){return!(e=e[Aa]||e[pa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function va(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function xa(e){return e[fa]||null}var Ea=[],wa=-1;function Ba(e){return{current:e}}function Ca(e){0>wa||(e.current=Ea[wa],Ea[wa]=null,wa--)}function ka(e,n){wa++,Ea[wa]=e.current,e.current=n}var ja={},Sa=Ba(ja),_a=Ba(!1),Na=ja;function Oa(e,n){var t=e.type.contextTypes;if(!t)return ja;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in t)o[a]=n[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ta(e){return null!=e.childContextTypes}function Pa(){Ca(_a),Ca(Sa)}function Ra(e,n,t){if(Sa.current!==ja)throw Error(o(168));ka(Sa,n),ka(_a,t)}function Ia(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var a in r=r.getChildContext())if(!(a in n))throw Error(o(108,G(e)||"Unknown",a));return M({},t,r)}function La(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ja,Na=Sa.current,ka(Sa,e),ka(_a,_a.current),!0}function Ma(e,n,t){var r=e.stateNode;if(!r)throw Error(o(169));t?(e=Ia(e,n,Na),r.__reactInternalMemoizedMergedChildContext=e,Ca(_a),Ca(Sa),ka(Sa,e)):Ca(_a),ka(_a,t)}var Da=null,Fa=!1,Ua=!1;function za(e){null===Da?Da=[e]:Da.push(e)}function Ha(){if(!Ua&&null!==Da){Ua=!0;var e=0,n=vn;try{var t=Da;for(vn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Da=null,Fa=!1}catch(n){throw null!==Da&&(Da=Da.slice(e+1)),Ze(Je,Ha),n}finally{vn=n,Ua=!1}}return null}var Ga=[],Wa=0,$a=null,qa=0,Za=[],Va=0,Ya=null,Xa=1,Ka="";function Qa(e,n){Ga[Wa++]=qa,Ga[Wa++]=$a,$a=e,qa=n}function Ja(e,n,t){Za[Va++]=Xa,Za[Va++]=Ka,Za[Va++]=Ya,Ya=e;var r=Xa;e=Ka;var a=32-sn(r)-1;r&=~(1<<a),t+=1;var o=32-sn(n)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Xa=1<<32-sn(n)+a|t<<a|r,Ka=o+e}else Xa=1<<o|t<<a|r,Ka=e}function eo(e){null!==e.return&&(Qa(e,1),Ja(e,1,0))}function no(e){for(;e===$a;)$a=Ga[--Wa],Ga[Wa]=null,qa=Ga[--Wa],Ga[Wa]=null;for(;e===Ya;)Ya=Za[--Va],Za[Va]=null,Ka=Za[--Va],Za[Va]=null,Xa=Za[--Va],Za[Va]=null}var to=null,ro=null,ao=!1,oo=null;function io(e,n){var t=Oc(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function so(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,to=e,ro=ca(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,to=e,ro=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Ya?{id:Xa,overflow:Ka}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=Oc(18,null,null,0)).stateNode=n,t.return=e,e.child=t,to=e,ro=null,!0);default:return!1}}function lo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function co(e){if(ao){var n=ro;if(n){var t=n;if(!so(e,n)){if(lo(e))throw Error(o(418));n=ca(t.nextSibling);var r=to;n&&so(e,n)?io(r,t):(e.flags=-4097&e.flags|2,ao=!1,to=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,to=e}}}function uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;to=e}function Ao(e){if(e!==to)return!1;if(!ao)return uo(e),ao=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!ta(e.type,e.memoizedProps)),n&&(n=ro)){if(lo(e))throw fo(),Error(o(418));for(;n;)io(e,n),n=ca(n.nextSibling)}if(uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){ro=ca(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}ro=null}}else ro=to?ca(e.stateNode.nextSibling):null;return!0}function fo(){for(var e=ro;e;)e=ca(e.nextSibling)}function po(){ro=to=null,ao=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var ho=v.ReactCurrentBatchConfig;function go(e,n){if(e&&e.defaultProps){for(var t in n=M({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}var bo=Ba(null),yo=null,vo=null,xo=null;function Eo(){xo=vo=yo=null}function wo(e){var n=bo.current;Ca(bo),e._currentValue=n}function Bo(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function Co(e,n){yo=e,xo=vo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&n)&&(vs=!0),e.firstContext=null)}function ko(e){var n=e._currentValue;if(xo!==e)if(e={context:e,memoizedValue:n,next:null},null===vo){if(null===yo)throw Error(o(308));vo=e,yo.dependencies={lanes:0,firstContext:e}}else vo=vo.next=e;return n}var jo=null;function So(e){null===jo?jo=[e]:jo.push(e)}function _o(e,n,t,r){var a=n.interleaved;return null===a?(t.next=t,So(n)):(t.next=a.next,a.next=t),n.interleaved=t,No(e,r)}function No(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var Oo=!1;function To(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Po(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ro(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function Io(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Sl)){var a=r.pending;return null===a?n.next=n:(n.next=a.next,a.next=n),r.pending=n,No(e,t)}return null===(a=r.interleaved)?(n.next=n,So(r)):(n.next=a.next,a.next=n),r.interleaved=n,No(e,t)}function Lo(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,0!=(4194240&t))){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,yn(e,t)}}function Mo(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var a=null,o=null;if(null!==(t=t.firstBaseUpdate)){do{var i={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===o?a=o=i:o=o.next=i,t=t.next}while(null!==t);null===o?a=o=n:o=o.next=n}else a=o=n;return t={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function Do(e,n,t,r){var a=e.updateQueue;Oo=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,s=a.shared.pending;if(null!==s){a.shared.pending=null;var l=s,c=l.next;l.next=null,null===i?o=c:i.next=c,i=l;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==o){var d=a.baseState;for(i=0,u=c=l=null,s=o;;){var A=s.lane,f=s.eventTime;if((r&A)===A){null!==u&&(u=u.next={eventTime:f,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var p=e,m=s;switch(A=n,f=t,m.tag){case 1:if("function"==typeof(p=m.payload)){d=p.call(f,d,A);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(A="function"==typeof(p=m.payload)?p.call(f,d,A):p))break e;d=M({},d,A);break e;case 2:Oo=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(A=a.effects)?a.effects=[s]:A.push(s))}else f={eventTime:f,lane:A,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=f,l=d):u=u.next=f,i|=A;if(null===(s=s.next)){if(null===(s=a.shared.pending))break;s=(A=s).next,A.next=null,a.lastBaseUpdate=A,a.shared.pending=null}}if(null===u&&(l=d),a.baseState=l,a.firstBaseUpdate=c,a.lastBaseUpdate=u,null!==(n=a.shared.interleaved)){a=n;do{i|=a.lane,a=a.next}while(a!==n)}else null===o&&(a.shared.lanes=0);Ll|=i,e.lanes=i,e.memoizedState=d}}function Fo(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],a=r.callback;if(null!==a){if(r.callback=null,r=t,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Uo=(new r.Component).refs;function zo(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:M({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var Ho={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=ec(),a=nc(e),o=Ro(r,a);o.payload=n,null!=t&&(o.callback=t),null!==(n=Io(e,o,a))&&(tc(n,e,a,r),Lo(n,e,a))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=ec(),a=nc(e),o=Ro(r,a);o.tag=1,o.payload=n,null!=t&&(o.callback=t),null!==(n=Io(e,o,a))&&(tc(n,e,a,r),Lo(n,e,a))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=ec(),r=nc(e),a=Ro(t,r);a.tag=2,null!=n&&(a.callback=n),null!==(n=Io(e,a,r))&&(tc(n,e,r,t),Lo(n,e,r))}};function Go(e,n,t,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(n.prototype&&n.prototype.isPureReactComponent&&lr(t,r)&&lr(a,o))}function Wo(e,n,t){var r=!1,a=ja,o=n.contextType;return"object"==typeof o&&null!==o?o=ko(o):(a=Ta(n)?Na:Sa.current,o=(r=null!=(r=n.contextTypes))?Oa(e,a):ja),n=new n(t,o),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=Ho,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),n}function $o(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&Ho.enqueueReplaceState(n,n.state,null)}function qo(e,n,t,r){var a=e.stateNode;a.props=t,a.state=e.memoizedState,a.refs=Uo,To(e);var o=n.contextType;"object"==typeof o&&null!==o?a.context=ko(o):(o=Ta(n)?Na:Sa.current,a.context=Oa(e,o)),a.state=e.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(zo(e,n,o,t),a.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(n=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),n!==a.state&&Ho.enqueueReplaceState(a,a.state,null),Do(e,t,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function Zo(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(o(309));var r=t.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===i?n.ref:(n=function(e){var n=a.refs;n===Uo&&(n=a.refs={}),null===e?delete n[i]:n[i]=e},n._stringRef=i,n)}if("string"!=typeof e)throw Error(o(284));if(!t._owner)throw Error(o(290,e))}return e}function Vo(e,n){throw e=Object.prototype.toString.call(n),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function Yo(e){return(0,e._init)(e._payload)}function Xo(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function a(e,n){return(e=Pc(e,n)).index=0,e.sibling=null,e}function i(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function s(n){return e&&null===n.alternate&&(n.flags|=2),n}function l(e,n,t,r){return null===n||6!==n.tag?((n=Mc(t,e.mode,r)).return=e,n):((n=a(n,t)).return=e,n)}function c(e,n,t,r){var o=t.type;return o===w?d(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===T&&Yo(o)===n.type)?((r=a(n,t.props)).ref=Zo(e,n,t),r.return=e,r):((r=Rc(t.type,t.key,t.props,null,e.mode,r)).ref=Zo(e,n,t),r.return=e,r)}function u(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Dc(t,e.mode,r)).return=e,n):((n=a(n,t.children||[])).return=e,n)}function d(e,n,t,r,o){return null===n||7!==n.tag?((n=Ic(t,e.mode,r,o)).return=e,n):((n=a(n,t)).return=e,n)}function A(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Mc(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return(t=Rc(n.type,n.key,n.props,null,e.mode,t)).ref=Zo(e,null,n),t.return=e,t;case E:return(n=Dc(n,e.mode,t)).return=e,n;case T:return A(e,(0,n._init)(n._payload),t)}if(ne(n)||I(n))return(n=Ic(n,e.mode,t,null)).return=e,n;Vo(e,n)}return null}function f(e,n,t,r){var a=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==a?null:l(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return t.key===a?c(e,n,t,r):null;case E:return t.key===a?u(e,n,t,r):null;case T:return f(e,n,(a=t._init)(t._payload),r)}if(ne(t)||I(t))return null!==a?null:d(e,n,t,r,null);Vo(e,t)}return null}function p(e,n,t,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return l(n,e=e.get(t)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return c(n,e=e.get(null===r.key?t:r.key)||null,r,a);case E:return u(n,e=e.get(null===r.key?t:r.key)||null,r,a);case T:return p(e,n,t,(0,r._init)(r._payload),a)}if(ne(r)||I(r))return d(n,e=e.get(t)||null,r,a,null);Vo(n,r)}return null}function m(a,o,s,l){for(var c=null,u=null,d=o,m=o=0,h=null;null!==d&&m<s.length;m++){d.index>m?(h=d,d=null):h=d.sibling;var g=f(a,d,s[m],l);if(null===g){null===d&&(d=h);break}e&&d&&null===g.alternate&&n(a,d),o=i(g,o,m),null===u?c=g:u.sibling=g,u=g,d=h}if(m===s.length)return t(a,d),ao&&Qa(a,m),c;if(null===d){for(;m<s.length;m++)null!==(d=A(a,s[m],l))&&(o=i(d,o,m),null===u?c=d:u.sibling=d,u=d);return ao&&Qa(a,m),c}for(d=r(a,d);m<s.length;m++)null!==(h=p(d,a,m,s[m],l))&&(e&&null!==h.alternate&&d.delete(null===h.key?m:h.key),o=i(h,o,m),null===u?c=h:u.sibling=h,u=h);return e&&d.forEach((function(e){return n(a,e)})),ao&&Qa(a,m),c}function h(a,s,l,c){var u=I(l);if("function"!=typeof u)throw Error(o(150));if(null==(l=u.call(l)))throw Error(o(151));for(var d=u=null,m=s,h=s=0,g=null,b=l.next();null!==m&&!b.done;h++,b=l.next()){m.index>h?(g=m,m=null):g=m.sibling;var y=f(a,m,b.value,c);if(null===y){null===m&&(m=g);break}e&&m&&null===y.alternate&&n(a,m),s=i(y,s,h),null===d?u=y:d.sibling=y,d=y,m=g}if(b.done)return t(a,m),ao&&Qa(a,h),u;if(null===m){for(;!b.done;h++,b=l.next())null!==(b=A(a,b.value,c))&&(s=i(b,s,h),null===d?u=b:d.sibling=b,d=b);return ao&&Qa(a,h),u}for(m=r(a,m);!b.done;h++,b=l.next())null!==(b=p(m,a,h,b.value,c))&&(e&&null!==b.alternate&&m.delete(null===b.key?h:b.key),s=i(b,s,h),null===d?u=b:d.sibling=b,d=b);return e&&m.forEach((function(e){return n(a,e)})),ao&&Qa(a,h),u}return function e(r,o,i,l){if("object"==typeof i&&null!==i&&i.type===w&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case x:e:{for(var c=i.key,u=o;null!==u;){if(u.key===c){if((c=i.type)===w){if(7===u.tag){t(r,u.sibling),(o=a(u,i.props.children)).return=r,r=o;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===T&&Yo(c)===u.type){t(r,u.sibling),(o=a(u,i.props)).ref=Zo(r,u,i),o.return=r,r=o;break e}t(r,u);break}n(r,u),u=u.sibling}i.type===w?((o=Ic(i.props.children,r.mode,l,i.key)).return=r,r=o):((l=Rc(i.type,i.key,i.props,null,r.mode,l)).ref=Zo(r,o,i),l.return=r,r=l)}return s(r);case E:e:{for(u=i.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){t(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}t(r,o);break}n(r,o),o=o.sibling}(o=Dc(i,r.mode,l)).return=r,r=o}return s(r);case T:return e(r,o,(u=i._init)(i._payload),l)}if(ne(i))return m(r,o,i,l);if(I(i))return h(r,o,i,l);Vo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(t(r,o.sibling),(o=a(o,i)).return=r,r=o):(t(r,o),(o=Mc(i,r.mode,l)).return=r,r=o),s(r)):t(r,o)}}var Ko=Xo(!0),Qo=Xo(!1),Jo={},ei=Ba(Jo),ni=Ba(Jo),ti=Ba(Jo);function ri(e){if(e===Jo)throw Error(o(174));return e}function ai(e,n){switch(ka(ti,n),ka(ni,e),ka(ei,Jo),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:le(null,"");break;default:n=le(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}Ca(ei),ka(ei,n)}function oi(){Ca(ei),Ca(ni),Ca(ti)}function ii(e){ri(ti.current);var n=ri(ei.current),t=le(n,e.type);n!==t&&(ka(ni,e),ka(ei,t))}function si(e){ni.current===e&&(Ca(ei),Ca(ni))}var li=Ba(0);function ci(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(0!=(128&n.flags))return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var ui=[];function di(){for(var e=0;e<ui.length;e++)ui[e]._workInProgressVersionPrimary=null;ui.length=0}var Ai=v.ReactCurrentDispatcher,fi=v.ReactCurrentBatchConfig,pi=0,mi=null,hi=null,gi=null,bi=!1,yi=!1,vi=0,xi=0;function Ei(){throw Error(o(321))}function wi(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!sr(e[t],n[t]))return!1;return!0}function Bi(e,n,t,r,a,i){if(pi=i,mi=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,Ai.current=null===e||null===e.memoizedState?ss:ls,e=t(r,a),yi){i=0;do{if(yi=!1,vi=0,25<=i)throw Error(o(301));i+=1,gi=hi=null,n.updateQueue=null,Ai.current=cs,e=t(r,a)}while(yi)}if(Ai.current=is,n=null!==hi&&null!==hi.next,pi=0,gi=hi=mi=null,bi=!1,n)throw Error(o(300));return e}function Ci(){var e=0!==vi;return vi=0,e}function ki(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===gi?mi.memoizedState=gi=e:gi=gi.next=e,gi}function ji(){if(null===hi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=hi.next;var n=null===gi?mi.memoizedState:gi.next;if(null!==n)gi=n,hi=e;else{if(null===e)throw Error(o(310));e={memoizedState:(hi=e).memoizedState,baseState:hi.baseState,baseQueue:hi.baseQueue,queue:hi.queue,next:null},null===gi?mi.memoizedState=gi=e:gi=gi.next=e}return gi}function Si(e,n){return"function"==typeof n?n(e):n}function _i(e){var n=ji(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=hi,a=r.baseQueue,i=t.pending;if(null!==i){if(null!==a){var s=a.next;a.next=i.next,i.next=s}r.baseQueue=a=i,t.pending=null}if(null!==a){i=a.next,r=r.baseState;var l=s=null,c=null,u=i;do{var d=u.lane;if((pi&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var A={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=A,s=r):c=c.next=A,mi.lanes|=d,Ll|=d}u=u.next}while(null!==u&&u!==i);null===c?s=r:c.next=l,sr(r,n.memoizedState)||(vs=!0),n.memoizedState=r,n.baseState=s,n.baseQueue=c,t.lastRenderedState=r}if(null!==(e=t.interleaved)){a=e;do{i=a.lane,mi.lanes|=i,Ll|=i,a=a.next}while(a!==e)}else null===a&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function Ni(e){var n=ji(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=t.dispatch,a=t.pending,i=n.memoizedState;if(null!==a){t.pending=null;var s=a=a.next;do{i=e(i,s.action),s=s.next}while(s!==a);sr(i,n.memoizedState)||(vs=!0),n.memoizedState=i,null===n.baseQueue&&(n.baseState=i),t.lastRenderedState=i}return[i,r]}function Oi(){}function Ti(e,n){var t=mi,r=ji(),a=n(),i=!sr(r.memoizedState,a);if(i&&(r.memoizedState=a,vs=!0),r=r.queue,Wi(Ii.bind(null,t,r,e),[e]),r.getSnapshot!==n||i||null!==gi&&1&gi.memoizedState.tag){if(t.flags|=2048,Fi(9,Ri.bind(null,t,r,a,n),void 0,null),null===_l)throw Error(o(349));0!=(30&pi)||Pi(t,n,a)}return a}function Pi(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=mi.updateQueue)?(n={lastEffect:null,stores:null},mi.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Ri(e,n,t,r){n.value=t,n.getSnapshot=r,Li(n)&&Mi(e)}function Ii(e,n,t){return t((function(){Li(n)&&Mi(e)}))}function Li(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!sr(e,t)}catch(e){return!0}}function Mi(e){var n=No(e,1);null!==n&&tc(n,e,1,-1)}function Di(e){var n=ki();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Si,lastRenderedState:e},n.queue=e,e=e.dispatch=ts.bind(null,mi,e),[n.memoizedState,e]}function Fi(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=mi.updateQueue)?(n={lastEffect:null,stores:null},mi.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function Ui(){return ji().memoizedState}function zi(e,n,t,r){var a=ki();mi.flags|=e,a.memoizedState=Fi(1|n,t,void 0,void 0===r?null:r)}function Hi(e,n,t,r){var a=ji();r=void 0===r?null:r;var o=void 0;if(null!==hi){var i=hi.memoizedState;if(o=i.destroy,null!==r&&wi(r,i.deps))return void(a.memoizedState=Fi(n,t,o,r))}mi.flags|=e,a.memoizedState=Fi(1|n,t,o,r)}function Gi(e,n){return zi(8390656,8,e,n)}function Wi(e,n){return Hi(2048,8,e,n)}function $i(e,n){return Hi(4,2,e,n)}function qi(e,n){return Hi(4,4,e,n)}function Zi(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function Vi(e,n,t){return t=null!=t?t.concat([e]):null,Hi(4,4,Zi.bind(null,n,e),t)}function Yi(){}function Xi(e,n){var t=ji();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&wi(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Ki(e,n){var t=ji();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&wi(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Qi(e,n,t){return 0==(21&pi)?(e.baseState&&(e.baseState=!1,vs=!0),e.memoizedState=t):(sr(t,n)||(t=hn(),mi.lanes|=t,Ll|=t,e.baseState=!0),n)}function Ji(e,n){var t=vn;vn=0!==t&&4>t?t:4,e(!0);var r=fi.transition;fi.transition={};try{e(!1),n()}finally{vn=t,fi.transition=r}}function es(){return ji().memoizedState}function ns(e,n,t){var r=nc(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},rs(e)?as(n,t):null!==(t=_o(e,n,t,r))&&(tc(t,e,r,ec()),os(t,n,r))}function ts(e,n,t){var r=nc(e),a={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(rs(e))as(n,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=n.lastRenderedReducer))try{var i=n.lastRenderedState,s=o(i,t);if(a.hasEagerState=!0,a.eagerState=s,sr(s,i)){var l=n.interleaved;return null===l?(a.next=a,So(n)):(a.next=l.next,l.next=a),void(n.interleaved=a)}}catch(e){}null!==(t=_o(e,n,a,r))&&(tc(t,e,r,a=ec()),os(t,n,r))}}function rs(e){var n=e.alternate;return e===mi||null!==n&&n===mi}function as(e,n){yi=bi=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function os(e,n,t){if(0!=(4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,yn(e,t)}}var is={readContext:ko,useCallback:Ei,useContext:Ei,useEffect:Ei,useImperativeHandle:Ei,useInsertionEffect:Ei,useLayoutEffect:Ei,useMemo:Ei,useReducer:Ei,useRef:Ei,useState:Ei,useDebugValue:Ei,useDeferredValue:Ei,useTransition:Ei,useMutableSource:Ei,useSyncExternalStore:Ei,useId:Ei,unstable_isNewReconciler:!1},ss={readContext:ko,useCallback:function(e,n){return ki().memoizedState=[e,void 0===n?null:n],e},useContext:ko,useEffect:Gi,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,zi(4194308,4,Zi.bind(null,n,e),t)},useLayoutEffect:function(e,n){return zi(4194308,4,e,n)},useInsertionEffect:function(e,n){return zi(4,2,e,n)},useMemo:function(e,n){var t=ki();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=ki();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=ns.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ki().memoizedState=e},useState:Di,useDebugValue:Yi,useDeferredValue:function(e){return ki().memoizedState=e},useTransition:function(){var e=Di(!1),n=e[0];return e=Ji.bind(null,e[1]),ki().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=mi,a=ki();if(ao){if(void 0===t)throw Error(o(407));t=t()}else{if(t=n(),null===_l)throw Error(o(349));0!=(30&pi)||Pi(r,n,t)}a.memoizedState=t;var i={value:t,getSnapshot:n};return a.queue=i,Gi(Ii.bind(null,r,i,e),[e]),r.flags|=2048,Fi(9,Ri.bind(null,r,i,t,n),void 0,null),t},useId:function(){var e=ki(),n=_l.identifierPrefix;if(ao){var t=Ka;n=":"+n+"R"+(t=(Xa&~(1<<32-sn(Xa)-1)).toString(32)+t),0<(t=vi++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=xi++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},ls={readContext:ko,useCallback:Xi,useContext:ko,useEffect:Wi,useImperativeHandle:Vi,useInsertionEffect:$i,useLayoutEffect:qi,useMemo:Ki,useReducer:_i,useRef:Ui,useState:function(){return _i(Si)},useDebugValue:Yi,useDeferredValue:function(e){return Qi(ji(),hi.memoizedState,e)},useTransition:function(){return[_i(Si)[0],ji().memoizedState]},useMutableSource:Oi,useSyncExternalStore:Ti,useId:es,unstable_isNewReconciler:!1},cs={readContext:ko,useCallback:Xi,useContext:ko,useEffect:Wi,useImperativeHandle:Vi,useInsertionEffect:$i,useLayoutEffect:qi,useMemo:Ki,useReducer:Ni,useRef:Ui,useState:function(){return Ni(Si)},useDebugValue:Yi,useDeferredValue:function(e){var n=ji();return null===hi?n.memoizedState=e:Qi(n,hi.memoizedState,e)},useTransition:function(){return[Ni(Si)[0],ji().memoizedState]},useMutableSource:Oi,useSyncExternalStore:Ti,useId:es,unstable_isNewReconciler:!1};function us(e,n){try{var t="",r=n;do{t+=z(r),r=r.return}while(r);var a=t}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:a,digest:null}}function ds(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function As(e,n){try{console.error(n.value)}catch(e){setTimeout((function(){throw e}))}}var fs="function"==typeof WeakMap?WeakMap:Map;function ps(e,n,t){(t=Ro(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){Wl||(Wl=!0,$l=r),As(0,n)},t}function ms(e,n,t){(t=Ro(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=n.value;t.payload=function(){return r(a)},t.callback=function(){As(0,n)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(t.callback=function(){As(0,n),"function"!=typeof r&&(null===ql?ql=new Set([this]):ql.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function hs(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new fs;var a=new Set;r.set(n,a)}else void 0===(a=r.get(n))&&(a=new Set,r.set(n,a));a.has(t)||(a.add(t),e=Cc.bind(null,e,n,t),n.then(e,e))}function gs(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function bs(e,n,t,r,a){return 0==(1&e.mode)?(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Ro(-1,1)).tag=2,Io(t,n,1))),t.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var ys=v.ReactCurrentOwner,vs=!1;function xs(e,n,t,r){n.child=null===e?Qo(n,null,t,r):Ko(n,e.child,t,r)}function Es(e,n,t,r,a){t=t.render;var o=n.ref;return Co(n,a),r=Bi(e,n,t,r,o,a),t=Ci(),null===e||vs?(ao&&t&&eo(n),n.flags|=1,xs(e,n,r,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Ws(e,n,a))}function ws(e,n,t,r,a){if(null===e){var o=t.type;return"function"!=typeof o||Tc(o)||void 0!==o.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Rc(t.type,null,r,n,n.mode,a)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=o,Bs(e,n,o,r,a))}if(o=e.child,0==(e.lanes&a)){var i=o.memoizedProps;if((t=null!==(t=t.compare)?t:lr)(i,r)&&e.ref===n.ref)return Ws(e,n,a)}return n.flags|=1,(e=Pc(o,r)).ref=n.ref,e.return=n,n.child=e}function Bs(e,n,t,r,a){if(null!==e){var o=e.memoizedProps;if(lr(o,r)&&e.ref===n.ref){if(vs=!1,n.pendingProps=r=o,0==(e.lanes&a))return n.lanes=e.lanes,Ws(e,n,a);0!=(131072&e.flags)&&(vs=!0)}}return js(e,n,t,r,a)}function Cs(e,n,t){var r=n.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&n.mode))n.memoizedState={baseLanes:0,cachePool:null,transitions:null},ka(Pl,Tl),Tl|=t;else{if(0==(1073741824&t))return e=null!==o?o.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,ka(Pl,Tl),Tl|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:t,ka(Pl,Tl),Tl|=r}else null!==o?(r=o.baseLanes|t,n.memoizedState=null):r=t,ka(Pl,Tl),Tl|=r;return xs(e,n,a,t),n.child}function ks(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function js(e,n,t,r,a){var o=Ta(t)?Na:Sa.current;return o=Oa(n,o),Co(n,a),t=Bi(e,n,t,r,o,a),r=Ci(),null===e||vs?(ao&&r&&eo(n),n.flags|=1,xs(e,n,t,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Ws(e,n,a))}function Ss(e,n,t,r,a){if(Ta(t)){var o=!0;La(n)}else o=!1;if(Co(n,a),null===n.stateNode)Gs(e,n),Wo(n,t,r),qo(n,t,r,a),r=!0;else if(null===e){var i=n.stateNode,s=n.memoizedProps;i.props=s;var l=i.context,c=t.contextType;c="object"==typeof c&&null!==c?ko(c):Oa(n,c=Ta(t)?Na:Sa.current);var u=t.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||l!==c)&&$o(n,i,r,c),Oo=!1;var A=n.memoizedState;i.state=A,Do(n,r,i,a),l=n.memoizedState,s!==r||A!==l||_a.current||Oo?("function"==typeof u&&(zo(n,t,u,r),l=n.memoizedState),(s=Oo||Go(n,t,s,r,A,l,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(n.flags|=4194308)):("function"==typeof i.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=l),i.props=r,i.state=l,i.context=c,r=s):("function"==typeof i.componentDidMount&&(n.flags|=4194308),r=!1)}else{i=n.stateNode,Po(e,n),s=n.memoizedProps,c=n.type===n.elementType?s:go(n.type,s),i.props=c,d=n.pendingProps,A=i.context,l="object"==typeof(l=t.contextType)&&null!==l?ko(l):Oa(n,l=Ta(t)?Na:Sa.current);var f=t.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==d||A!==l)&&$o(n,i,r,l),Oo=!1,A=n.memoizedState,i.state=A,Do(n,r,i,a);var p=n.memoizedState;s!==d||A!==p||_a.current||Oo?("function"==typeof f&&(zo(n,t,f,r),p=n.memoizedState),(c=Oo||Go(n,t,c,r,A,p,l)||!1)?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof i.componentDidUpdate&&(n.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&A===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&A===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=p),i.props=r,i.state=p,i.context=l,r=c):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&A===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&A===e.memoizedState||(n.flags|=1024),r=!1)}return _s(e,n,t,r,o,a)}function _s(e,n,t,r,a,o){ks(e,n);var i=0!=(128&n.flags);if(!r&&!i)return a&&Ma(n,t,!1),Ws(e,n,o);r=n.stateNode,ys.current=n;var s=i&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&i?(n.child=Ko(n,e.child,null,o),n.child=Ko(n,null,s,o)):xs(e,n,s,o),n.memoizedState=r.state,a&&Ma(n,t,!0),n.child}function Ns(e){var n=e.stateNode;n.pendingContext?Ra(0,n.pendingContext,n.pendingContext!==n.context):n.context&&Ra(0,n.context,!1),ai(e,n.containerInfo)}function Os(e,n,t,r,a){return po(),mo(a),n.flags|=256,xs(e,n,t,r),n.child}var Ts,Ps,Rs,Is={dehydrated:null,treeContext:null,retryLane:0};function Ls(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ms(e,n,t){var r,a=n.pendingProps,i=li.current,s=!1,l=0!=(128&n.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(s=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),ka(li,1&i),null===e)return co(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&n.mode)?n.lanes=1:"$!"===e.data?n.lanes=8:n.lanes=1073741824,null):(l=a.children,e=a.fallback,s?(a=n.mode,s=n.child,l={mode:"hidden",children:l},0==(1&a)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=Lc(l,a,0,null),e=Ic(e,a,t,null),s.return=n,e.return=n,s.sibling=e,n.child=s,n.child.memoizedState=Ls(t),n.memoizedState=Is,e):Ds(n,l));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,n,t,r,a,i,s){if(t)return 256&n.flags?(n.flags&=-257,Fs(e,n,s,r=ds(Error(o(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(i=r.fallback,a=n.mode,r=Lc({mode:"visible",children:r.children},a,0,null),(i=Ic(i,a,s,null)).flags|=2,r.return=n,i.return=n,r.sibling=i,n.child=r,0!=(1&n.mode)&&Ko(n,e.child,null,s),n.child.memoizedState=Ls(s),n.memoizedState=Is,i);if(0==(1&n.mode))return Fs(e,n,s,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var l=r.dgst;return r=l,Fs(e,n,s,r=ds(i=Error(o(419)),r,void 0))}if(l=0!=(s&e.childLanes),vs||l){if(null!==(r=_l)){switch(s&-s){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|s))?0:a)&&a!==i.retryLane&&(i.retryLane=a,No(e,a),tc(r,e,a,-1))}return mc(),Fs(e,n,s,r=ds(Error(o(421))))}return"$?"===a.data?(n.flags|=128,n.child=e.child,n=jc.bind(null,e),a._reactRetry=n,null):(e=i.treeContext,ro=ca(a.nextSibling),to=n,ao=!0,oo=null,null!==e&&(Za[Va++]=Xa,Za[Va++]=Ka,Za[Va++]=Ya,Xa=e.id,Ka=e.overflow,Ya=n),(n=Ds(n,r.children)).flags|=4096,n)}(e,n,l,a,r,i,t);if(s){s=a.fallback,l=n.mode,r=(i=e.child).sibling;var c={mode:"hidden",children:a.children};return 0==(1&l)&&n.child!==i?((a=n.child).childLanes=0,a.pendingProps=c,n.deletions=null):(a=Pc(i,c)).subtreeFlags=14680064&i.subtreeFlags,null!==r?s=Pc(r,s):(s=Ic(s,l,t,null)).flags|=2,s.return=n,a.return=n,a.sibling=s,n.child=a,a=s,s=n.child,l=null===(l=e.child.memoizedState)?Ls(t):{baseLanes:l.baseLanes|t,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~t,n.memoizedState=Is,a}return e=(s=e.child).sibling,a=Pc(s,{mode:"visible",children:a.children}),0==(1&n.mode)&&(a.lanes=t),a.return=n,a.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=a,n.memoizedState=null,a}function Ds(e,n){return(n=Lc({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function Fs(e,n,t,r){return null!==r&&mo(r),Ko(n,e.child,null,t),(e=Ds(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function Us(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),Bo(e.return,n,t)}function zs(e,n,t,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:a}:(o.isBackwards=n,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=t,o.tailMode=a)}function Hs(e,n,t){var r=n.pendingProps,a=r.revealOrder,o=r.tail;if(xs(e,n,r.children,t),0!=(2&(r=li.current)))r=1&r|2,n.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Us(e,t,n);else if(19===e.tag)Us(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ka(li,r),0==(1&n.mode))n.memoizedState=null;else switch(a){case"forwards":for(t=n.child,a=null;null!==t;)null!==(e=t.alternate)&&null===ci(e)&&(a=t),t=t.sibling;null===(t=a)?(a=n.child,n.child=null):(a=t.sibling,t.sibling=null),zs(n,!1,a,t,o);break;case"backwards":for(t=null,a=n.child,n.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ci(e)){n.child=a;break}e=a.sibling,a.sibling=t,t=a,a=e}zs(n,!0,t,null,o);break;case"together":zs(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function Gs(e,n){0==(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function Ws(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),Ll|=n.lanes,0==(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(o(153));if(null!==n.child){for(t=Pc(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Pc(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function $s(e,n){if(!ao)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function qs(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function Zs(e,n,t){var r=n.pendingProps;switch(no(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return qs(n),null;case 1:case 17:return Ta(n.type)&&Pa(),qs(n),null;case 3:return r=n.stateNode,oi(),Ca(_a),Ca(Sa),di(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ao(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&n.flags)||(n.flags|=1024,null!==oo&&(ic(oo),oo=null))),qs(n),null;case 5:si(n);var a=ri(ti.current);if(t=n.type,null!==e&&null!=n.stateNode)Ps(e,n,t,r),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(o(166));return qs(n),null}if(e=ri(ei.current),Ao(n)){r=n.stateNode,t=n.type;var i=n.memoizedProps;switch(r[Aa]=n,r[fa]=i,e=0!=(1&n.mode),t){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<Ir.length;a++)Fr(Ir[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":X(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":ae(r,i),Fr("invalid",r)}for(var l in be(t,i),a=null,i)if(i.hasOwnProperty(l)){var c=i[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Qr(r.textContent,c,e),a=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Qr(r.textContent,c,e),a=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Fr("scroll",r)}switch(t){case"input":q(r),J(r,i,!0);break;case"textarea":q(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,n.updateQueue=r,null!==r&&(n.flags|=4)}else{l=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(t,{is:r.is}):(e=l.createElement(t),"select"===t&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,t),e[Aa]=n,e[fa]=r,Ts(e,n),n.stateNode=e;e:{switch(l=ye(t,r),t){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Ir.length;a++)Fr(Ir[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":X(e,r),a=Y(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=M({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(i in be(t,a),c=a)if(c.hasOwnProperty(i)){var u=c[i];"style"===i?he(e,u):"dangerouslySetInnerHTML"===i?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===i?"string"==typeof u?("textarea"!==t||""!==u)&&Ae(e,u):"number"==typeof u&&Ae(e,""+u):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(s.hasOwnProperty(i)?null!=u&&"onScroll"===i&&Fr("scroll",e):null!=u&&y(e,i,u,l))}switch(t){case"input":q(e),J(e,r,!1);break;case"textarea":q(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?te(e,!!r.multiple,i,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return qs(n),null;case 6:if(e&&null!=n.stateNode)Rs(0,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(o(166));if(t=ri(ti.current),ri(ei.current),Ao(n)){if(r=n.stateNode,t=n.memoizedProps,r[Aa]=n,(i=r.nodeValue!==t)&&null!==(e=to))switch(e.tag){case 3:Qr(r.nodeValue,t,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Qr(r.nodeValue,t,0!=(1&e.mode))}i&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[Aa]=n,n.stateNode=r}return qs(n),null;case 13:if(Ca(li),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&0!=(1&n.mode)&&0==(128&n.flags))fo(),po(),n.flags|=98560,i=!1;else if(i=Ao(n),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=n.memoizedState)?i.dehydrated:null))throw Error(o(317));i[Aa]=n}else po(),0==(128&n.flags)&&(n.memoizedState=null),n.flags|=4;qs(n),i=!1}else null!==oo&&(ic(oo),oo=null),i=!0;if(!i)return 65536&n.flags?n:null}return 0!=(128&n.flags)?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,0!=(1&n.mode)&&(null===e||0!=(1&li.current)?0===Rl&&(Rl=3):mc())),null!==n.updateQueue&&(n.flags|=4),qs(n),null);case 4:return oi(),null===e&&Hr(n.stateNode.containerInfo),qs(n),null;case 10:return wo(n.type._context),qs(n),null;case 19:if(Ca(li),null===(i=n.memoizedState))return qs(n),null;if(r=0!=(128&n.flags),null===(l=i.rendering))if(r)$s(i,!1);else{if(0!==Rl||null!==e&&0!=(128&e.flags))for(e=n.child;null!==e;){if(null!==(l=ci(e))){for(n.flags|=128,$s(i,!1),null!==(r=l.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(i=t).flags&=14680066,null===(l=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,e=l.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return ka(li,1&li.current|2),n.child}e=e.sibling}null!==i.tail&&Ke()>Hl&&(n.flags|=128,r=!0,$s(i,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=ci(l))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),$s(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate&&!ao)return qs(n),null}else 2*Ke()-i.renderingStartTime>Hl&&1073741824!==t&&(n.flags|=128,r=!0,$s(i,!1),n.lanes=4194304);i.isBackwards?(l.sibling=n.child,n.child=l):(null!==(t=i.last)?t.sibling=l:n.child=l,i.last=l)}return null!==i.tail?(n=i.tail,i.rendering=n,i.tail=n.sibling,i.renderingStartTime=Ke(),n.sibling=null,t=li.current,ka(li,r?1&t|2:1&t),n):(qs(n),null);case 22:case 23:return dc(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&0!=(1&n.mode)?0!=(1073741824&Tl)&&(qs(n),6&n.subtreeFlags&&(n.flags|=8192)):qs(n),null;case 24:case 25:return null}throw Error(o(156,n.tag))}function Vs(e,n){switch(no(n),n.tag){case 1:return Ta(n.type)&&Pa(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return oi(),Ca(_a),Ca(Sa),di(),0!=(65536&(e=n.flags))&&0==(128&e)?(n.flags=-65537&e|128,n):null;case 5:return si(n),null;case 13:if(Ca(li),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(o(340));po()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return Ca(li),null;case 4:return oi(),null;case 10:return wo(n.type._context),null;case 22:case 23:return dc(),null;default:return null}}Ts=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Ps=function(e,n,t,r){var a=e.memoizedProps;if(a!==r){e=n.stateNode,ri(ei.current);var o,i=null;switch(t){case"input":a=Y(e,a),r=Y(e,r),i=[];break;case"select":a=M({},a,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(u in be(t,r),t=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u){var l=a[u];for(o in l)l.hasOwnProperty(o)&&(t||(t={}),t[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var c=r[u];if(l=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(o in l)!l.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(t||(t={}),t[o]="");for(o in c)c.hasOwnProperty(o)&&l[o]!==c[o]&&(t||(t={}),t[o]=c[o])}else t||(i||(i=[]),i.push(u,t)),t=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(i=i||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Fr("scroll",e),i||l===c||(i=[])):(i=i||[]).push(u,c))}t&&(i=i||[]).push("style",t);var u=i;(n.updateQueue=u)&&(n.flags|=4)}},Rs=function(e,n,t,r){t!==r&&(n.flags|=4)};var Ys=!1,Xs=!1,Ks="function"==typeof WeakSet?WeakSet:Set,Qs=null;function Js(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Bc(e,n,t)}else t.current=null}function el(e,n,t){try{t()}catch(t){Bc(e,n,t)}}var nl=!1;function tl(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&el(n,t,o)}a=a.next}while(a!==r)}}function rl(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function al(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function ol(e){var n=e.alternate;null!==n&&(e.alternate=null,ol(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[Aa],delete n[fa],delete n[ma],delete n[ha],delete n[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function il(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||il(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ll(e,n,t),e=e.sibling;null!==e;)ll(e,n,t),e=e.sibling}function cl(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cl(e,n,t),e=e.sibling;null!==e;)cl(e,n,t),e=e.sibling}var ul=null,dl=!1;function Al(e,n,t){for(t=t.child;null!==t;)fl(e,n,t),t=t.sibling}function fl(e,n,t){if(on&&"function"==typeof on.onCommitFiberUnmount)try{on.onCommitFiberUnmount(an,t)}catch(e){}switch(t.tag){case 5:Xs||Js(t,n);case 6:var r=ul,a=dl;ul=null,Al(e,n,t),dl=a,null!==(ul=r)&&(dl?(e=ul,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):ul.removeChild(t.stateNode));break;case 18:null!==ul&&(dl?(e=ul,t=t.stateNode,8===e.nodeType?la(e.parentNode,t):1===e.nodeType&&la(e,t),Gn(e)):la(ul,t.stateNode));break;case 4:r=ul,a=dl,ul=t.stateNode.containerInfo,dl=!0,Al(e,n,t),ul=r,dl=a;break;case 0:case 11:case 14:case 15:if(!Xs&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&el(t,n,i),a=a.next}while(a!==r)}Al(e,n,t);break;case 1:if(!Xs&&(Js(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){Bc(t,n,e)}Al(e,n,t);break;case 21:Al(e,n,t);break;case 22:1&t.mode?(Xs=(r=Xs)||null!==t.memoizedState,Al(e,n,t),Xs=r):Al(e,n,t);break;default:Al(e,n,t)}}function pl(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Ks),n.forEach((function(n){var r=Sc.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function ml(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var a=t[r];try{var i=e,s=n,l=s;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,dl=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===ul)throw Error(o(160));fl(i,s,a),ul=null,dl=!1;var c=a.alternate;null!==c&&(c.return=null),a.return=null}catch(e){Bc(a,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)hl(n,e),n=n.sibling}function hl(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(n,e),gl(e),4&r){try{tl(3,e,e.return),rl(3,e)}catch(n){Bc(e,e.return,n)}try{tl(5,e,e.return)}catch(n){Bc(e,e.return,n)}}break;case 1:ml(n,e),gl(e),512&r&&null!==t&&Js(t,t.return);break;case 5:if(ml(n,e),gl(e),512&r&&null!==t&&Js(t,t.return),32&e.flags){var a=e.stateNode;try{Ae(a,"")}catch(n){Bc(e,e.return,n)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,s=null!==t?t.memoizedProps:i,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===i.type&&null!=i.name&&K(a,i),ye(l,s);var u=ye(l,i);for(s=0;s<c.length;s+=2){var d=c[s],A=c[s+1];"style"===d?he(a,A):"dangerouslySetInnerHTML"===d?de(a,A):"children"===d?Ae(a,A):y(a,d,A,u)}switch(l){case"input":Q(a,i);break;case"textarea":oe(a,i);break;case"select":var f=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var p=i.value;null!=p?te(a,!!i.multiple,p,!1):f!==!!i.multiple&&(null!=i.defaultValue?te(a,!!i.multiple,i.defaultValue,!0):te(a,!!i.multiple,i.multiple?[]:"",!1))}a[fa]=i}catch(n){Bc(e,e.return,n)}}break;case 6:if(ml(n,e),gl(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(n){Bc(e,e.return,n)}}break;case 3:if(ml(n,e),gl(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Gn(n.containerInfo)}catch(n){Bc(e,e.return,n)}break;case 4:default:ml(n,e),gl(e);break;case 13:ml(n,e),gl(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(zl=Ke())),4&r&&pl(e);break;case 22:if(d=null!==t&&null!==t.memoizedState,1&e.mode?(Xs=(u=Xs)||d,ml(n,e),Xs=u):ml(n,e),gl(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&0!=(1&e.mode))for(Qs=e,d=e.child;null!==d;){for(A=Qs=d;null!==Qs;){switch(p=(f=Qs).child,f.tag){case 0:case 11:case 14:case 15:tl(4,f,f.return);break;case 1:Js(f,f.return);var m=f.stateNode;if("function"==typeof m.componentWillUnmount){r=f,t=f.return;try{n=r,m.props=n.memoizedProps,m.state=n.memoizedState,m.componentWillUnmount()}catch(e){Bc(r,t,e)}}break;case 5:Js(f,f.return);break;case 22:if(null!==f.memoizedState){xl(A);continue}}null!==p?(p.return=f,Qs=p):xl(A)}d=d.sibling}e:for(d=null,A=e;;){if(5===A.tag){if(null===d){d=A;try{a=A.stateNode,u?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(l=A.stateNode,s=null!=(c=A.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=me("display",s))}catch(n){Bc(e,e.return,n)}}}else if(6===A.tag){if(null===d)try{A.stateNode.nodeValue=u?"":A.memoizedProps}catch(n){Bc(e,e.return,n)}}else if((22!==A.tag&&23!==A.tag||null===A.memoizedState||A===e)&&null!==A.child){A.child.return=A,A=A.child;continue}if(A===e)break e;for(;null===A.sibling;){if(null===A.return||A.return===e)break e;d===A&&(d=null),A=A.return}d===A&&(d=null),A.sibling.return=A.return,A=A.sibling}}break;case 19:ml(n,e),gl(e),4&r&&pl(e);case 21:}}function gl(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(il(t)){var r=t;break e}t=t.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(Ae(a,""),r.flags&=-33),cl(e,sl(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;ll(e,sl(e),i);break;default:throw Error(o(161))}}catch(n){Bc(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function bl(e,n,t){Qs=e,yl(e,n,t)}function yl(e,n,t){for(var r=0!=(1&e.mode);null!==Qs;){var a=Qs,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Ys;if(!i){var s=a.alternate,l=null!==s&&null!==s.memoizedState||Xs;s=Ys;var c=Xs;if(Ys=i,(Xs=l)&&!c)for(Qs=a;null!==Qs;)l=(i=Qs).child,22===i.tag&&null!==i.memoizedState?El(a):null!==l?(l.return=i,Qs=l):El(a);for(;null!==o;)Qs=o,yl(o,n,t),o=o.sibling;Qs=a,Ys=s,Xs=c}vl(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Qs=o):vl(e)}}function vl(e){for(;null!==Qs;){var n=Qs;if(0!=(8772&n.flags)){var t=n.alternate;try{if(0!=(8772&n.flags))switch(n.tag){case 0:case 11:case 15:Xs||rl(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Xs)if(null===t)r.componentDidMount();else{var a=n.elementType===n.type?t.memoizedProps:go(n.type,t.memoizedProps);r.componentDidUpdate(a,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=n.updateQueue;null!==i&&Fo(n,i,r);break;case 3:var s=n.updateQueue;if(null!==s){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}Fo(n,s,t)}break;case 5:var l=n.stateNode;if(null===t&&4&n.flags){t=l;var c=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&t.focus();break;case"img":c.src&&(t.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var u=n.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var A=d.dehydrated;null!==A&&Gn(A)}}}break;default:throw Error(o(163))}Xs||512&n.flags&&al(n)}catch(e){Bc(n,n.return,e)}}if(n===e){Qs=null;break}if(null!==(t=n.sibling)){t.return=n.return,Qs=t;break}Qs=n.return}}function xl(e){for(;null!==Qs;){var n=Qs;if(n===e){Qs=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Qs=t;break}Qs=n.return}}function El(e){for(;null!==Qs;){var n=Qs;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{rl(4,n)}catch(e){Bc(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var a=n.return;try{r.componentDidMount()}catch(e){Bc(n,a,e)}}var o=n.return;try{al(n)}catch(e){Bc(n,o,e)}break;case 5:var i=n.return;try{al(n)}catch(e){Bc(n,i,e)}}}catch(e){Bc(n,n.return,e)}if(n===e){Qs=null;break}var s=n.sibling;if(null!==s){s.return=n.return,Qs=s;break}Qs=n.return}}var wl,Bl=Math.ceil,Cl=v.ReactCurrentDispatcher,kl=v.ReactCurrentOwner,jl=v.ReactCurrentBatchConfig,Sl=0,_l=null,Nl=null,Ol=0,Tl=0,Pl=Ba(0),Rl=0,Il=null,Ll=0,Ml=0,Dl=0,Fl=null,Ul=null,zl=0,Hl=1/0,Gl=null,Wl=!1,$l=null,ql=null,Zl=!1,Vl=null,Yl=0,Xl=0,Kl=null,Ql=-1,Jl=0;function ec(){return 0!=(6&Sl)?Ke():-1!==Ql?Ql:Ql=Ke()}function nc(e){return 0==(1&e.mode)?1:0!=(2&Sl)&&0!==Ol?Ol&-Ol:null!==ho.transition?(0===Jl&&(Jl=hn()),Jl):0!==(e=vn)?e:e=void 0===(e=window.event)?16:Kn(e.type)}function tc(e,n,t,r){if(50<Xl)throw Xl=0,Kl=null,Error(o(185));bn(e,t,r),0!=(2&Sl)&&e===_l||(e===_l&&(0==(2&Sl)&&(Ml|=t),4===Rl&&sc(e,Ol)),rc(e,r),1===t&&0===Sl&&0==(1&n.mode)&&(Hl=Ke()+500,Fa&&Ha()))}function rc(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-sn(o),s=1<<i,l=a[i];-1===l?0!=(s&t)&&0==(s&r)||(a[i]=pn(s,n)):l<=n&&(e.expiredLanes|=s),o&=~s}}(e,n);var r=fn(e,e===_l?Ol:0);if(0===r)null!==t&&Ve(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&Ve(t),1===n)0===e.tag?function(e){Fa=!0,za(e)}(lc.bind(null,e)):za(lc.bind(null,e)),ia((function(){0==(6&Sl)&&Ha()})),t=null;else{switch(xn(r)){case 1:t=Je;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=_c(t,ac.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function ac(e,n){if(Ql=-1,Jl=0,0!=(6&Sl))throw Error(o(327));var t=e.callbackNode;if(Ec()&&e.callbackNode!==t)return null;var r=fn(e,e===_l?Ol:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||n)n=hc(e,r);else{n=r;var a=Sl;Sl|=2;var i=pc();for(_l===e&&Ol===n||(Gl=null,Hl=Ke()+500,Ac(e,n));;)try{bc();break}catch(n){fc(e,n)}Eo(),Cl.current=i,Sl=a,null!==Nl?n=0:(_l=null,Ol=0,n=Rl)}if(0!==n){if(2===n&&0!==(a=mn(e))&&(r=a,n=oc(e,a)),1===n)throw t=Il,Ac(e,0),sc(e,r),rc(e,Ke()),t;if(6===n)sc(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var a=t[r],o=a.getSnapshot;a=a.value;try{if(!sr(o(),a))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(a)&&(2===(n=hc(e,r))&&0!==(i=mn(e))&&(r=i,n=oc(e,i)),1===n))throw t=Il,Ac(e,0),sc(e,r),rc(e,Ke()),t;switch(e.finishedWork=a,e.finishedLanes=r,n){case 0:case 1:throw Error(o(345));case 2:case 5:xc(e,Ul,Gl);break;case 3:if(sc(e,r),(130023424&r)===r&&10<(n=zl+500-Ke())){if(0!==fn(e,0))break;if(((a=e.suspendedLanes)&r)!==r){ec(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(xc.bind(null,e,Ul,Gl),n);break}xc(e,Ul,Gl);break;case 4:if(sc(e,r),(4194240&r)===r)break;for(n=e.eventTimes,a=-1;0<r;){var s=31-sn(r);i=1<<s,(s=n[s])>a&&(a=s),r&=~i}if(r=a,10<(r=(120>(r=Ke()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Bl(r/1960))-r)){e.timeoutHandle=ra(xc.bind(null,e,Ul,Gl),r);break}xc(e,Ul,Gl);break;default:throw Error(o(329))}}}return rc(e,Ke()),e.callbackNode===t?ac.bind(null,e):null}function oc(e,n){var t=Fl;return e.current.memoizedState.isDehydrated&&(Ac(e,n).flags|=256),2!==(e=hc(e,n))&&(n=Ul,Ul=t,null!==n&&ic(n)),e}function ic(e){null===Ul?Ul=e:Ul.push.apply(Ul,e)}function sc(e,n){for(n&=~Dl,n&=~Ml,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-sn(n),r=1<<t;e[t]=-1,n&=~r}}function lc(e){if(0!=(6&Sl))throw Error(o(327));Ec();var n=fn(e,0);if(0==(1&n))return rc(e,Ke()),null;var t=hc(e,n);if(0!==e.tag&&2===t){var r=mn(e);0!==r&&(n=r,t=oc(e,r))}if(1===t)throw t=Il,Ac(e,0),sc(e,n),rc(e,Ke()),t;if(6===t)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,xc(e,Ul,Gl),rc(e,Ke()),null}function cc(e,n){var t=Sl;Sl|=1;try{return e(n)}finally{0===(Sl=t)&&(Hl=Ke()+500,Fa&&Ha())}}function uc(e){null!==Vl&&0===Vl.tag&&0==(6&Sl)&&Ec();var n=Sl;Sl|=1;var t=jl.transition,r=vn;try{if(jl.transition=null,vn=1,e)return e()}finally{vn=r,jl.transition=t,0==(6&(Sl=n))&&Ha()}}function dc(){Tl=Pl.current,Ca(Pl)}function Ac(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,aa(t)),null!==Nl)for(t=Nl.return;null!==t;){var r=t;switch(no(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Pa();break;case 3:oi(),Ca(_a),Ca(Sa),di();break;case 5:si(r);break;case 4:oi();break;case 13:case 19:Ca(li);break;case 10:wo(r.type._context);break;case 22:case 23:dc()}t=t.return}if(_l=e,Nl=e=Pc(e.current,null),Ol=Tl=n,Rl=0,Il=null,Dl=Ml=Ll=0,Ul=Fl=null,null!==jo){for(n=0;n<jo.length;n++)if(null!==(r=(t=jo[n]).interleaved)){t.interleaved=null;var a=r.next,o=t.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}t.pending=r}jo=null}return e}function fc(e,n){for(;;){var t=Nl;try{if(Eo(),Ai.current=is,bi){for(var r=mi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}bi=!1}if(pi=0,gi=hi=mi=null,yi=!1,vi=0,kl.current=null,null===t||null===t.return){Rl=1,Il=n,Nl=null;break}e:{var i=e,s=t.return,l=t,c=n;if(n=Ol,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=l,A=d.tag;if(0==(1&d.mode)&&(0===A||11===A||15===A)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=gs(s);if(null!==p){p.flags&=-257,bs(p,s,l,0,n),1&p.mode&&hs(i,u,n),c=u;var m=(n=p).updateQueue;if(null===m){var h=new Set;h.add(c),n.updateQueue=h}else m.add(c);break e}if(0==(1&n)){hs(i,u,n),mc();break e}c=Error(o(426))}else if(ao&&1&l.mode){var g=gs(s);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),bs(g,s,l,0,n),mo(us(c,l));break e}}i=c=us(c,l),4!==Rl&&(Rl=2),null===Fl?Fl=[i]:Fl.push(i),i=s;do{switch(i.tag){case 3:i.flags|=65536,n&=-n,i.lanes|=n,Mo(i,ps(0,c,n));break e;case 1:l=c;var b=i.type,y=i.stateNode;if(0==(128&i.flags)&&("function"==typeof b.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===ql||!ql.has(y)))){i.flags|=65536,n&=-n,i.lanes|=n,Mo(i,ms(i,l,n));break e}}i=i.return}while(null!==i)}vc(t)}catch(e){n=e,Nl===t&&null!==t&&(Nl=t=t.return);continue}break}}function pc(){var e=Cl.current;return Cl.current=is,null===e?is:e}function mc(){0!==Rl&&3!==Rl&&2!==Rl||(Rl=4),null===_l||0==(268435455&Ll)&&0==(268435455&Ml)||sc(_l,Ol)}function hc(e,n){var t=Sl;Sl|=2;var r=pc();for(_l===e&&Ol===n||(Gl=null,Ac(e,n));;)try{gc();break}catch(n){fc(e,n)}if(Eo(),Sl=t,Cl.current=r,null!==Nl)throw Error(o(261));return _l=null,Ol=0,Rl}function gc(){for(;null!==Nl;)yc(Nl)}function bc(){for(;null!==Nl&&!Ye();)yc(Nl)}function yc(e){var n=wl(e.alternate,e,Tl);e.memoizedProps=e.pendingProps,null===n?vc(e):Nl=n,kl.current=null}function vc(e){var n=e;do{var t=n.alternate;if(e=n.return,0==(32768&n.flags)){if(null!==(t=Zs(t,n,Tl)))return void(Nl=t)}else{if(null!==(t=Vs(t,n)))return t.flags&=32767,void(Nl=t);if(null===e)return Rl=6,void(Nl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(n=n.sibling))return void(Nl=n);Nl=n=e}while(null!==n);0===Rl&&(Rl=5)}function xc(e,n,t){var r=vn,a=jl.transition;try{jl.transition=null,vn=1,function(e,n,t,r){do{Ec()}while(null!==Vl);if(0!=(6&Sl))throw Error(o(327));t=e.finishedWork;var a=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var a=31-sn(t),o=1<<a;n[a]=0,r[a]=-1,e[a]=-1,t&=~o}}(e,i),e===_l&&(Nl=_l=null,Ol=0),0==(2064&t.subtreeFlags)&&0==(2064&t.flags)||Zl||(Zl=!0,_c(nn,(function(){return Ec(),null}))),i=0!=(15990&t.flags),0!=(15990&t.subtreeFlags)||i){i=jl.transition,jl.transition=null;var s=vn;vn=1;var l=Sl;Sl|=4,kl.current=null,function(e,n){if(ea=$n,fr(e=Ar())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{t.nodeType,i.nodeType}catch(e){t=null;break e}var s=0,l=-1,c=-1,u=0,d=0,A=e,f=null;n:for(;;){for(var p;A!==t||0!==a&&3!==A.nodeType||(l=s+a),A!==i||0!==r&&3!==A.nodeType||(c=s+r),3===A.nodeType&&(s+=A.nodeValue.length),null!==(p=A.firstChild);)f=A,A=p;for(;;){if(A===e)break n;if(f===t&&++u===a&&(l=s),f===i&&++d===r&&(c=s),null!==(p=A.nextSibling))break;f=(A=f).parentNode}A=p}t=-1===l||-1===c?null:{start:l,end:c}}else t=null}t=t||{start:0,end:0}}else t=null;for(na={focusedElem:e,selectionRange:t},$n=!1,Qs=n;null!==Qs;)if(e=(n=Qs).child,0!=(1028&n.subtreeFlags)&&null!==e)e.return=n,Qs=e;else for(;null!==Qs;){n=Qs;try{var m=n.alternate;if(0!=(1024&n.flags))switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var h=m.memoizedProps,g=m.memoizedState,b=n.stateNode,y=b.getSnapshotBeforeUpdate(n.elementType===n.type?h:go(n.type,h),g);b.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var v=n.stateNode.containerInfo;1===v.nodeType?v.textContent="":9===v.nodeType&&v.documentElement&&v.removeChild(v.documentElement);break;default:throw Error(o(163))}}catch(e){Bc(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Qs=e;break}Qs=n.return}m=nl,nl=!1}(e,t),hl(t,e),pr(na),$n=!!ea,na=ea=null,e.current=t,bl(t,e,a),Xe(),Sl=l,vn=s,jl.transition=i}else e.current=t;if(Zl&&(Zl=!1,Vl=e,Yl=a),0===(i=e.pendingLanes)&&(ql=null),function(e){if(on&&"function"==typeof on.onCommitFiberRoot)try{on.onCommitFiberRoot(an,e,void 0,128==(128&e.current.flags))}catch(e){}}(t.stateNode),rc(e,Ke()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((a=n[t]).value,{componentStack:a.stack,digest:a.digest});if(Wl)throw Wl=!1,e=$l,$l=null,e;0!=(1&Yl)&&0!==e.tag&&Ec(),0!=(1&(i=e.pendingLanes))?e===Kl?Xl++:(Xl=0,Kl=e):Xl=0,Ha()}(e,n,t,r)}finally{jl.transition=a,vn=r}return null}function Ec(){if(null!==Vl){var e=xn(Yl),n=jl.transition,t=vn;try{if(jl.transition=null,vn=16>e?16:e,null===Vl)var r=!1;else{if(e=Vl,Vl=null,Yl=0,0!=(6&Sl))throw Error(o(331));var a=Sl;for(Sl|=4,Qs=e.current;null!==Qs;){var i=Qs,s=i.child;if(0!=(16&Qs.flags)){var l=i.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Qs=u;null!==Qs;){var d=Qs;switch(d.tag){case 0:case 11:case 15:tl(8,d,i)}var A=d.child;if(null!==A)A.return=d,Qs=A;else for(;null!==Qs;){var f=(d=Qs).sibling,p=d.return;if(ol(d),d===u){Qs=null;break}if(null!==f){f.return=p,Qs=f;break}Qs=p}}}var m=i.alternate;if(null!==m){var h=m.child;if(null!==h){m.child=null;do{var g=h.sibling;h.sibling=null,h=g}while(null!==h)}}Qs=i}}if(0!=(2064&i.subtreeFlags)&&null!==s)s.return=i,Qs=s;else e:for(;null!==Qs;){if(0!=(2048&(i=Qs).flags))switch(i.tag){case 0:case 11:case 15:tl(9,i,i.return)}var b=i.sibling;if(null!==b){b.return=i.return,Qs=b;break e}Qs=i.return}}var y=e.current;for(Qs=y;null!==Qs;){var v=(s=Qs).child;if(0!=(2064&s.subtreeFlags)&&null!==v)v.return=s,Qs=v;else e:for(s=y;null!==Qs;){if(0!=(2048&(l=Qs).flags))try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){Bc(l,l.return,e)}if(l===s){Qs=null;break e}var x=l.sibling;if(null!==x){x.return=l.return,Qs=x;break e}Qs=l.return}}if(Sl=a,Ha(),on&&"function"==typeof on.onPostCommitFiberRoot)try{on.onPostCommitFiberRoot(an,e)}catch(e){}r=!0}return r}finally{vn=t,jl.transition=n}}return!1}function wc(e,n,t){e=Io(e,n=ps(0,n=us(t,n),1),1),n=ec(),null!==e&&(bn(e,1,n),rc(e,n))}function Bc(e,n,t){if(3===e.tag)wc(e,e,t);else for(;null!==n;){if(3===n.tag){wc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r))){n=Io(n,e=ms(n,e=us(t,e),1),1),e=ec(),null!==n&&(bn(n,1,e),rc(n,e));break}}n=n.return}}function Cc(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=ec(),e.pingedLanes|=e.suspendedLanes&t,_l===e&&(Ol&t)===t&&(4===Rl||3===Rl&&(130023424&Ol)===Ol&&500>Ke()-zl?Ac(e,0):Dl|=t),rc(e,n)}function kc(e,n){0===n&&(0==(1&e.mode)?n=1:(n=dn,0==(130023424&(dn<<=1))&&(dn=4194304)));var t=ec();null!==(e=No(e,n))&&(bn(e,n,t),rc(e,t))}function jc(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),kc(e,t)}function Sc(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(t=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(n),kc(e,t)}function _c(e,n){return Ze(e,n)}function Nc(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Oc(e,n,t,r){return new Nc(e,n,t,r)}function Tc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Pc(e,n){var t=e.alternate;return null===t?((t=Oc(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Rc(e,n,t,r,a,i){var s=2;if(r=e,"function"==typeof e)Tc(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case w:return Ic(t.children,a,i,n);case B:s=8,a|=8;break;case C:return(e=Oc(12,t,n,2|a)).elementType=C,e.lanes=i,e;case _:return(e=Oc(13,t,n,a)).elementType=_,e.lanes=i,e;case N:return(e=Oc(19,t,n,a)).elementType=N,e.lanes=i,e;case P:return Lc(t,a,i,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:s=10;break e;case j:s=9;break e;case S:s=11;break e;case O:s=14;break e;case T:s=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(n=Oc(s,t,n,a)).elementType=e,n.type=r,n.lanes=i,n}function Ic(e,n,t,r){return(e=Oc(7,e,r,n)).lanes=t,e}function Lc(e,n,t,r){return(e=Oc(22,e,r,n)).elementType=P,e.lanes=t,e.stateNode={isHidden:!1},e}function Mc(e,n,t){return(e=Oc(6,e,null,n)).lanes=t,e}function Dc(e,n,t){return(n=Oc(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Fc(e,n,t,r,a){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gn(0),this.expirationTimes=gn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gn(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Uc(e,n,t,r,a,o,i,s,l){return e=new Fc(e,n,t,s,l),1===n?(n=1,!0===o&&(n|=8)):n=0,o=Oc(3,null,null,n),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},To(o),e}function zc(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}function Hc(e){if(!e)return ja;e:{if(He(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(Ta(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(o(171))}if(1===e.tag){var t=e.type;if(Ta(t))return Ia(e,t,n)}return n}function Gc(e,n,t,r,a,o,i,s,l){return(e=Uc(t,r,!0,e,0,o,0,s,l)).context=Hc(null),t=e.current,(o=Ro(r=ec(),a=nc(t))).callback=null!=n?n:null,Io(t,o,a),e.current.lanes=a,bn(e,a,r),rc(e,r),e}function Wc(e,n,t,r){var a=n.current,o=ec(),i=nc(a);return t=Hc(t),null===n.context?n.context=t:n.pendingContext=t,(n=Ro(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=Io(a,n,i))&&(tc(e,a,i,o),Lo(e,a,i)),i}function $c(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function qc(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Zc(e,n){qc(e,n),(e=e.alternate)&&qc(e,n)}wl=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||_a.current)vs=!0;else{if(0==(e.lanes&t)&&0==(128&n.flags))return vs=!1,function(e,n,t){switch(n.tag){case 3:Ns(n),po();break;case 5:ii(n);break;case 1:Ta(n.type)&&La(n);break;case 4:ai(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,a=n.memoizedProps.value;ka(bo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(ka(li,1&li.current),n.flags|=128,null):0!=(t&n.child.childLanes)?Ms(e,n,t):(ka(li,1&li.current),null!==(e=Ws(e,n,t))?e.sibling:null);ka(li,1&li.current);break;case 19:if(r=0!=(t&n.childLanes),0!=(128&e.flags)){if(r)return Hs(e,n,t);n.flags|=128}if(null!==(a=n.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),ka(li,li.current),r)break;return null;case 22:case 23:return n.lanes=0,Cs(e,n,t)}return Ws(e,n,t)}(e,n,t);vs=0!=(131072&e.flags)}else vs=!1,ao&&0!=(1048576&n.flags)&&Ja(n,qa,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;Gs(e,n),e=n.pendingProps;var a=Oa(n,Sa.current);Co(n,t),a=Bi(null,n,r,e,a,t);var i=Ci();return n.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,Ta(r)?(i=!0,La(n)):i=!1,n.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,To(n),a.updater=Ho,n.stateNode=a,a._reactInternals=n,qo(n,r,e,t),n=_s(null,n,r,!0,i,t)):(n.tag=0,ao&&i&&eo(n),xs(null,n,a,t),n=n.child),n;case 16:r=n.elementType;e:{switch(Gs(e,n),e=n.pendingProps,r=(a=r._init)(r._payload),n.type=r,a=n.tag=function(e){if("function"==typeof e)return Tc(e)?1:0;if(null!=e){if((e=e.$$typeof)===S)return 11;if(e===O)return 14}return 2}(r),e=go(r,e),a){case 0:n=js(null,n,r,e,t);break e;case 1:n=Ss(null,n,r,e,t);break e;case 11:n=Es(null,n,r,e,t);break e;case 14:n=ws(null,n,r,go(r.type,e),t);break e}throw Error(o(306,r,""))}return n;case 0:return r=n.type,a=n.pendingProps,js(e,n,r,a=n.elementType===r?a:go(r,a),t);case 1:return r=n.type,a=n.pendingProps,Ss(e,n,r,a=n.elementType===r?a:go(r,a),t);case 3:e:{if(Ns(n),null===e)throw Error(o(387));r=n.pendingProps,a=(i=n.memoizedState).element,Po(e,n),Do(n,r,null,t);var s=n.memoizedState;if(r=s.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},n.updateQueue.baseState=i,n.memoizedState=i,256&n.flags){n=Os(e,n,r,t,a=us(Error(o(423)),n));break e}if(r!==a){n=Os(e,n,r,t,a=us(Error(o(424)),n));break e}for(ro=ca(n.stateNode.containerInfo.firstChild),to=n,ao=!0,oo=null,t=Qo(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(po(),r===a){n=Ws(e,n,t);break e}xs(e,n,r,t)}n=n.child}return n;case 5:return ii(n),null===e&&co(n),r=n.type,a=n.pendingProps,i=null!==e?e.memoizedProps:null,s=a.children,ta(r,a)?s=null:null!==i&&ta(r,i)&&(n.flags|=32),ks(e,n),xs(e,n,s,t),n.child;case 6:return null===e&&co(n),null;case 13:return Ms(e,n,t);case 4:return ai(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Ko(n,null,r,t):xs(e,n,r,t),n.child;case 11:return r=n.type,a=n.pendingProps,Es(e,n,r,a=n.elementType===r?a:go(r,a),t);case 7:return xs(e,n,n.pendingProps,t),n.child;case 8:case 12:return xs(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,a=n.pendingProps,i=n.memoizedProps,s=a.value,ka(bo,r._currentValue),r._currentValue=s,null!==i)if(sr(i.value,s)){if(i.children===a.children&&!_a.current){n=Ws(e,n,t);break e}}else for(null!==(i=n.child)&&(i.return=n);null!==i;){var l=i.dependencies;if(null!==l){s=i.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Ro(-1,t&-t)).tag=2;var u=i.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}i.lanes|=t,null!==(c=i.alternate)&&(c.lanes|=t),Bo(i.return,t,n),l.lanes|=t;break}c=c.next}}else if(10===i.tag)s=i.type===n.type?null:i.child;else if(18===i.tag){if(null===(s=i.return))throw Error(o(341));s.lanes|=t,null!==(l=s.alternate)&&(l.lanes|=t),Bo(s,t,n),s=i.sibling}else s=i.child;if(null!==s)s.return=i;else for(s=i;null!==s;){if(s===n){s=null;break}if(null!==(i=s.sibling)){i.return=s.return,s=i;break}s=s.return}i=s}xs(e,n,a.children,t),n=n.child}return n;case 9:return a=n.type,r=n.pendingProps.children,Co(n,t),r=r(a=ko(a)),n.flags|=1,xs(e,n,r,t),n.child;case 14:return a=go(r=n.type,n.pendingProps),ws(e,n,r,a=go(r.type,a),t);case 15:return Bs(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,a=n.pendingProps,a=n.elementType===r?a:go(r,a),Gs(e,n),n.tag=1,Ta(r)?(e=!0,La(n)):e=!1,Co(n,t),Wo(n,r,a),qo(n,r,a,t),_s(null,n,r,!0,e,t);case 19:return Hs(e,n,t);case 22:return Cs(e,n,t)}throw Error(o(156,n.tag))};var Vc="function"==typeof reportError?reportError:function(e){console.error(e)};function Yc(e){this._internalRoot=e}function Xc(e){this._internalRoot=e}function Kc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Qc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jc(){}function eu(e,n,t,r,a){var o=t._reactRootContainer;if(o){var i=o;if("function"==typeof a){var s=a;a=function(){var e=$c(i);s.call(e)}}Wc(n,i,e,a)}else i=function(e,n,t,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=$c(i);o.call(e)}}var i=Gc(n,r,e,0,null,!1,0,"",Jc);return e._reactRootContainer=i,e[pa]=i.current,Hr(8===e.nodeType?e.parentNode:e),uc(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var s=r;r=function(){var e=$c(l);s.call(e)}}var l=Uc(e,0,!1,null,0,!1,0,"",Jc);return e._reactRootContainer=l,e[pa]=l.current,Hr(8===e.nodeType?e.parentNode:e),uc((function(){Wc(n,l,t,r)})),l}(t,n,e,a,r);return $c(i)}Xc.prototype.render=Yc.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(o(409));Wc(e,n,null,null)},Xc.prototype.unmount=Yc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;uc((function(){Wc(null,e,null,null)})),n[pa]=null}},Xc.prototype.unstable_scheduleHydration=function(e){if(e){var n=Cn();e={blockedOn:null,target:e,priority:n};for(var t=0;t<Rn.length&&0!==n&&n<Rn[t].priority;t++);Rn.splice(t,0,e),0===t&&Dn(e)}},En=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=An(n.pendingLanes);0!==t&&(yn(n,1|t),rc(n,Ke()),0==(6&Sl)&&(Hl=Ke()+500,Ha()))}break;case 13:uc((function(){var n=No(e,1);if(null!==n){var t=ec();tc(n,e,1,t)}})),Zc(e,1)}},wn=function(e){if(13===e.tag){var n=No(e,134217728);null!==n&&tc(n,e,134217728,ec()),Zc(e,134217728)}},Bn=function(e){if(13===e.tag){var n=nc(e),t=No(e,n);null!==t&&tc(t,e,n,ec()),Zc(e,n)}},Cn=function(){return vn},kn=function(e,n){var t=vn;try{return vn=e,n()}finally{vn=t}},Ee=function(e,n,t){switch(n){case"input":if(Q(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var a=xa(r);if(!a)throw Error(o(90));Z(r),Q(r,a)}}}break;case"textarea":oe(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},Se=cc,_e=uc;var nu={usingClientEntryPoint:!1,Events:[ya,va,xa,ke,je,cc]},tu={findFiberByHostInstance:ba,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ru={bundleType:tu.bundleType,version:tu.version,rendererPackageName:tu.rendererPackageName,rendererConfig:tu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:v.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=$e(e))?null:e.stateNode},findFiberByHostInstance:tu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var au=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!au.isDisabled&&au.supportsFiber)try{an=au.inject(ru),on=au}catch(ue){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nu,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kc(n))throw Error(o(200));return zc(e,n,null,t)},n.createRoot=function(e,n){if(!Kc(e))throw Error(o(299));var t=!1,r="",a=Vc;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(a=n.onRecoverableError)),n=Uc(e,1,!1,null,0,t,0,r,a),e[pa]=n.current,Hr(8===e.nodeType?e.parentNode:e),new Yc(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=$e(n))?null:e.stateNode},n.flushSync=function(e){return uc(e)},n.hydrate=function(e,n,t){if(!Qc(n))throw Error(o(200));return eu(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Kc(e))throw Error(o(405));var r=null!=t&&t.hydratedSources||null,a=!1,i="",s=Vc;if(null!=t&&(!0===t.unstable_strictMode&&(a=!0),void 0!==t.identifierPrefix&&(i=t.identifierPrefix),void 0!==t.onRecoverableError&&(s=t.onRecoverableError)),n=Gc(n,null,e,1,null!=t?t:null,a,0,i,s),e[pa]=n.current,Hr(e),r)for(e=0;e<r.length;e++)a=(a=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a);return new Xc(n)},n.render=function(e,n,t){if(!Qc(n))throw Error(o(200));return eu(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Qc(e))throw Error(o(40));return!!e._reactRootContainer&&(uc((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[pa]=null}))})),!0)},n.unstable_batchedUpdates=cc,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Qc(t))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return eu(e,n,t,!1,r)},n.version="18.2.0-next-9e3b772b8-20220608"},745:(e,n,t)=>{"use strict";var r=t(3935);n.createRoot=r.createRoot,n.hydrateRoot=r.hydrateRoot},3935:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(4448)},9921:(e,n)=>{"use strict";var t="function"==typeof Symbol&&Symbol.for,r=t?Symbol.for("react.element"):60103,a=t?Symbol.for("react.portal"):60106,o=t?Symbol.for("react.fragment"):60107,i=t?Symbol.for("react.strict_mode"):60108,s=t?Symbol.for("react.profiler"):60114,l=t?Symbol.for("react.provider"):60109,c=t?Symbol.for("react.context"):60110,u=t?Symbol.for("react.async_mode"):60111,d=t?Symbol.for("react.concurrent_mode"):60111,A=t?Symbol.for("react.forward_ref"):60112,f=t?Symbol.for("react.suspense"):60113,p=t?Symbol.for("react.suspense_list"):60120,m=t?Symbol.for("react.memo"):60115,h=t?Symbol.for("react.lazy"):60116,g=t?Symbol.for("react.block"):60121,b=t?Symbol.for("react.fundamental"):60117,y=t?Symbol.for("react.responder"):60118,v=t?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var n=e.$$typeof;switch(n){case r:switch(e=e.type){case u:case d:case o:case s:case i:case f:return e;default:switch(e=e&&e.$$typeof){case c:case A:case h:case m:case l:return e;default:return n}}case a:return n}}}function E(e){return x(e)===d}n.AsyncMode=u,n.ConcurrentMode=d,n.ContextConsumer=c,n.ContextProvider=l,n.Element=r,n.ForwardRef=A,n.Fragment=o,n.Lazy=h,n.Memo=m,n.Portal=a,n.Profiler=s,n.StrictMode=i,n.Suspense=f,n.isAsyncMode=function(e){return E(e)||x(e)===u},n.isConcurrentMode=E,n.isContextConsumer=function(e){return x(e)===c},n.isContextProvider=function(e){return x(e)===l},n.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},n.isForwardRef=function(e){return x(e)===A},n.isFragment=function(e){return x(e)===o},n.isLazy=function(e){return x(e)===h},n.isMemo=function(e){return x(e)===m},n.isPortal=function(e){return x(e)===a},n.isProfiler=function(e){return x(e)===s},n.isStrictMode=function(e){return x(e)===i},n.isSuspense=function(e){return x(e)===f},n.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===s||e===i||e===f||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===h||e.$$typeof===m||e.$$typeof===l||e.$$typeof===c||e.$$typeof===A||e.$$typeof===b||e.$$typeof===y||e.$$typeof===v||e.$$typeof===g)},n.typeOf=x},9864:(e,n,t)=>{"use strict";e.exports=t(9921)},8359:(e,n)=>{"use strict";Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},2973:(e,n,t)=>{"use strict";t(8359)},5251:(e,n,t)=>{"use strict";var r=t(7294),a=Symbol.for("react.element"),o=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,t){var r,o={},c=null,u=null;for(r in void 0!==t&&(c=""+t),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(u=n.ref),n)i.call(n,r)&&!l.hasOwnProperty(r)&&(o[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===o[r]&&(o[r]=n[r]);return{$$typeof:a,type:e,key:c,ref:u,props:o,_owner:s.current}}n.Fragment=o,n.jsx=c,n.jsxs=c},2408:(e,n)=>{"use strict";var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),A=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,h={};function g(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||p}function b(){}function y(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||p}g.prototype.isReactComponent={},g.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=g.prototype;var v=y.prototype=new b;v.constructor=y,m(v,g.prototype),v.isPureReactComponent=!0;var x=Array.isArray,E=Object.prototype.hasOwnProperty,w={current:null},B={key:!0,ref:!0,__self:!0,__source:!0};function C(e,n,r){var a,o={},i=null,s=null;if(null!=n)for(a in void 0!==n.ref&&(s=n.ref),void 0!==n.key&&(i=""+n.key),n)E.call(n,a)&&!B.hasOwnProperty(a)&&(o[a]=n[a]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(a in l=e.defaultProps)void 0===o[a]&&(o[a]=l[a]);return{$$typeof:t,type:e,key:i,ref:s,props:o,_owner:w.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var j=/\/+/g;function S(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function _(e,n,a,o,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case t:case r:l=!0}}if(l)return i=i(l=e),e=""===o?"."+S(l,0):o,x(i)?(a="",null!=e&&(a=e.replace(j,"$&/")+"/"),_(i,n,a,"",(function(e){return e}))):null!=i&&(k(i)&&(i=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(j,"$&/")+"/")+e)),n.push(i)),1;if(l=0,o=""===o?".":o+":",x(e))for(var c=0;c<e.length;c++){var u=o+S(s=e[c],c);l+=_(s,n,a,u,i)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=_(s=s.value,n,a,u=o+S(s,c++),i);else if("object"===s)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return l}function N(e,n,t){if(null==e)return e;var r=[],a=0;return _(e,r,"","",(function(e){return n.call(t,e,a++)})),r}function O(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var T={current:null},P={transition:null},R={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:P,ReactCurrentOwner:w};n.Children={map:N,forEach:function(e,n,t){N(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return N(e,(function(){n++})),n},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=g,n.Fragment=a,n.Profiler=i,n.PureComponent=y,n.StrictMode=o,n.Suspense=u,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),o=e.key,i=e.ref,s=e._owner;if(null!=n){if(void 0!==n.ref&&(i=n.ref,s=w.current),void 0!==n.key&&(o=""+n.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in n)E.call(n,c)&&!B.hasOwnProperty(c)&&(a[c]=void 0===n[c]&&void 0!==l?l[c]:n[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];a.children=l}return{$$typeof:t,type:e.type,key:o,ref:i,props:a,_owner:s}},n.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},n.createElement=C,n.createFactory=function(e){var n=C.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:c,render:e}},n.isValidElement=k,n.lazy=function(e){return{$$typeof:A,_payload:{_status:-1,_result:e},_init:O}},n.memo=function(e,n){return{$$typeof:d,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=P.transition;P.transition={};try{e()}finally{P.transition=n}},n.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},n.useCallback=function(e,n){return T.current.useCallback(e,n)},n.useContext=function(e){return T.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return T.current.useDeferredValue(e)},n.useEffect=function(e,n){return T.current.useEffect(e,n)},n.useId=function(){return T.current.useId()},n.useImperativeHandle=function(e,n,t){return T.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return T.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return T.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return T.current.useMemo(e,n)},n.useReducer=function(e,n,t){return T.current.useReducer(e,n,t)},n.useRef=function(e){return T.current.useRef(e)},n.useState=function(e){return T.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return T.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return T.current.useTransition()},n.version="18.2.0"},7294:(e,n,t)=>{"use strict";e.exports=t(2408)},5893:(e,n,t)=>{"use strict";e.exports=t(5251)},53:(e,n)=>{"use strict";function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,a=e[r];if(!(0<o(a,n)))break e;e[r]=n,e[t]=a,t=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var s=2*(r+1)-1,l=e[s],c=s+1,u=e[c];if(0>o(l,t))c<a&&0>o(u,l)?(e[r]=u,e[c]=t,r=c):(e[r]=l,e[s]=t,r=s);else{if(!(c<a&&0>o(u,t)))break e;e[r]=u,e[c]=t,r=c}}}return n}function o(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;n.unstable_now=function(){return i.now()}}else{var s=Date,l=s.now();n.unstable_now=function(){return s.now()-l}}var c=[],u=[],d=1,A=null,f=3,p=!1,m=!1,h=!1,g="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function v(e){for(var n=r(u);null!==n;){if(null===n.callback)a(u);else{if(!(n.startTime<=e))break;a(u),n.sortIndex=n.expirationTime,t(c,n)}n=r(u)}}function x(e){if(h=!1,v(e),!m)if(null!==r(c))m=!0,P(E);else{var n=r(u);null!==n&&R(x,n.startTime-e)}}function E(e,t){m=!1,h&&(h=!1,b(k),k=-1),p=!0;var o=f;try{for(v(t),A=r(c);null!==A&&(!(A.expirationTime>t)||e&&!_());){var i=A.callback;if("function"==typeof i){A.callback=null,f=A.priorityLevel;var s=i(A.expirationTime<=t);t=n.unstable_now(),"function"==typeof s?A.callback=s:A===r(c)&&a(c),v(t)}else a(c);A=r(c)}if(null!==A)var l=!0;else{var d=r(u);null!==d&&R(x,d.startTime-t),l=!1}return l}finally{A=null,f=o,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var w,B=!1,C=null,k=-1,j=5,S=-1;function _(){return!(n.unstable_now()-S<j)}function N(){if(null!==C){var e=n.unstable_now();S=e;var t=!0;try{t=C(!0,e)}finally{t?w():(B=!1,C=null)}}else B=!1}if("function"==typeof y)w=function(){y(N)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,T=O.port2;O.port1.onmessage=N,w=function(){T.postMessage(null)}}else w=function(){g(N,0)};function P(e){C=e,B||(B=!0,w())}function R(e,t){k=g((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){m||p||(m=!0,P(E))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):j=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return f},n.unstable_getFirstCallbackNode=function(){return r(c)},n.unstable_next=function(e){switch(f){case 1:case 2:case 3:var n=3;break;default:n=f}var t=f;f=n;try{return e()}finally{f=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=f;f=e;try{return n()}finally{f=t}},n.unstable_scheduleCallback=function(e,a,o){var i=n.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>i?(e.sortIndex=o,t(u,e),null===r(c)&&e===r(u)&&(h?(b(k),k=-1):h=!0,R(x,o-i))):(e.sortIndex=s,t(c,e),m||p||(m=!0,P(E))),e},n.unstable_shouldYield=_,n.unstable_wrapCallback=function(e){var n=f;return function(){var t=f;f=n;try{return e.apply(this,arguments)}finally{f=t}}}},3840:(e,n,t)=>{"use strict";e.exports=t(53)},6377:(e,n,t)=>{var r=t(4832),a=t(8652),o=t(801),i=t(2030),s=t(3618),l=t(9049),c=t(1971);c.alea=r,c.xor128=a,c.xorwow=o,c.xorshift7=i,c.xor4096=s,c.tychei=l,e.exports=c},4832:function(e,n,t){var r;!function(e,a,o){function i(e){var n,t=this,r=(n=4022871197,function(e){e=String(e);for(var t=0;t<e.length;t++){var r=.02519603282416938*(n+=e.charCodeAt(t));r-=n=r>>>0,n=(r*=n)>>>0,n+=4294967296*(r-=n)}return 2.3283064365386963e-10*(n>>>0)});t.next=function(){var e=2091639*t.s0+2.3283064365386963e-10*t.c;return t.s0=t.s1,t.s1=t.s2,t.s2=e-(t.c=0|e)},t.c=1,t.s0=r(" "),t.s1=r(" "),t.s2=r(" "),t.s0-=r(e),t.s0<0&&(t.s0+=1),t.s1-=r(e),t.s1<0&&(t.s1+=1),t.s2-=r(e),t.s2<0&&(t.s2+=1),r=null}function s(e,n){return n.c=e.c,n.s0=e.s0,n.s1=e.s1,n.s2=e.s2,n}function l(e,n){var t=new i(e),r=n&&n.state,a=t.next;return a.int32=function(){return 4294967296*t.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,r&&("object"==typeof r&&s(r,t),a.state=function(){return s(t,{})}),a}a&&a.exports?a.exports=l:t.amdD&&t.amdO?void 0===(r=function(){return l}.call(n,t,n,a))||(a.exports=r):this.alea=l}(0,e=t.nmd(e),t.amdD)},9049:function(e,n,t){var r;!function(e,a,o){function i(e){var n=this,t="";n.next=function(){var e=n.b,t=n.c,r=n.d,a=n.a;return e=e<<25^e>>>7^t,t=t-r|0,r=r<<24^r>>>8^a,a=a-e|0,n.b=e=e<<20^e>>>12^t,n.c=t=t-r|0,n.d=r<<16^t>>>16^a,n.a=a-e|0},n.a=0,n.b=0,n.c=-1640531527,n.d=1367130551,e===Math.floor(e)?(n.a=e/4294967296|0,n.b=0|e):t+=e;for(var r=0;r<t.length+20;r++)n.b^=0|t.charCodeAt(r),n.next()}function s(e,n){return n.a=e.a,n.b=e.b,n.c=e.c,n.d=e.d,n}function l(e,n){var t=new i(e),r=n&&n.state,a=function(){return(t.next()>>>0)/4294967296};return a.double=function(){do{var e=((t.next()>>>11)+(t.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=t.next,a.quick=a,r&&("object"==typeof r&&s(r,t),a.state=function(){return s(t,{})}),a}a&&a.exports?a.exports=l:t.amdD&&t.amdO?void 0===(r=function(){return l}.call(n,t,n,a))||(a.exports=r):this.tychei=l}(0,e=t.nmd(e),t.amdD)},8652:function(e,n,t){var r;!function(e,a,o){function i(e){var n=this,t="";n.x=0,n.y=0,n.z=0,n.w=0,n.next=function(){var e=n.x^n.x<<11;return n.x=n.y,n.y=n.z,n.z=n.w,n.w^=n.w>>>19^e^e>>>8},e===(0|e)?n.x=e:t+=e;for(var r=0;r<t.length+64;r++)n.x^=0|t.charCodeAt(r),n.next()}function s(e,n){return n.x=e.x,n.y=e.y,n.z=e.z,n.w=e.w,n}function l(e,n){var t=new i(e),r=n&&n.state,a=function(){return(t.next()>>>0)/4294967296};return a.double=function(){do{var e=((t.next()>>>11)+(t.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=t.next,a.quick=a,r&&("object"==typeof r&&s(r,t),a.state=function(){return s(t,{})}),a}a&&a.exports?a.exports=l:t.amdD&&t.amdO?void 0===(r=function(){return l}.call(n,t,n,a))||(a.exports=r):this.xor128=l}(0,e=t.nmd(e),t.amdD)},3618:function(e,n,t){var r;!function(e,a,o){function i(e){var n=this;n.next=function(){var e,t,r=n.w,a=n.X,o=n.i;return n.w=r=r+1640531527|0,t=a[o+34&127],e=a[o=o+1&127],t^=t<<13,e^=e<<17,t^=t>>>15,e^=e>>>12,t=a[o]=t^e,n.i=o,t+(r^r>>>16)|0},function(e,n){var t,r,a,o,i,s=[],l=128;for(n===(0|n)?(r=n,n=null):(n+="\0",r=0,l=Math.max(l,n.length)),a=0,o=-32;o<l;++o)n&&(r^=n.charCodeAt((o+32)%n.length)),0===o&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,o>=0&&(i=i+1640531527|0,a=0==(t=s[127&o]^=r+i)?a+1:0);for(a>=128&&(s[127&(n&&n.length||0)]=-1),a=127,o=512;o>0;--o)r=s[a+34&127],t=s[a=a+1&127],r^=r<<13,t^=t<<17,r^=r>>>15,t^=t>>>12,s[a]=r^t;e.w=i,e.X=s,e.i=a}(n,e)}function s(e,n){return n.i=e.i,n.w=e.w,n.X=e.X.slice(),n}function l(e,n){null==e&&(e=+new Date);var t=new i(e),r=n&&n.state,a=function(){return(t.next()>>>0)/4294967296};return a.double=function(){do{var e=((t.next()>>>11)+(t.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=t.next,a.quick=a,r&&(r.X&&s(r,t),a.state=function(){return s(t,{})}),a}a&&a.exports?a.exports=l:t.amdD&&t.amdO?void 0===(r=function(){return l}.call(n,t,n,a))||(a.exports=r):this.xor4096=l}(0,e=t.nmd(e),t.amdD)},2030:function(e,n,t){var r;!function(e,a,o){function i(e){var n=this;n.next=function(){var e,t,r=n.x,a=n.i;return e=r[a],t=(e^=e>>>7)^e<<24,t^=(e=r[a+1&7])^e>>>10,t^=(e=r[a+3&7])^e>>>3,t^=(e=r[a+4&7])^e<<7,e=r[a+7&7],t^=(e^=e<<13)^e<<9,r[a]=t,n.i=a+1&7,t},function(e,n){var t,r=[];if(n===(0|n))r[0]=n;else for(n=""+n,t=0;t<n.length;++t)r[7&t]=r[7&t]<<15^n.charCodeAt(t)+r[t+1&7]<<13;for(;r.length<8;)r.push(0);for(t=0;t<8&&0===r[t];++t);for(8==t?r[7]=-1:r[t],e.x=r,e.i=0,t=256;t>0;--t)e.next()}(n,e)}function s(e,n){return n.x=e.x.slice(),n.i=e.i,n}function l(e,n){null==e&&(e=+new Date);var t=new i(e),r=n&&n.state,a=function(){return(t.next()>>>0)/4294967296};return a.double=function(){do{var e=((t.next()>>>11)+(t.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=t.next,a.quick=a,r&&(r.x&&s(r,t),a.state=function(){return s(t,{})}),a}a&&a.exports?a.exports=l:t.amdD&&t.amdO?void 0===(r=function(){return l}.call(n,t,n,a))||(a.exports=r):this.xorshift7=l}(0,e=t.nmd(e),t.amdD)},801:function(e,n,t){var r;!function(e,a,o){function i(e){var n=this,t="";n.next=function(){var e=n.x^n.x>>>2;return n.x=n.y,n.y=n.z,n.z=n.w,n.w=n.v,(n.d=n.d+362437|0)+(n.v=n.v^n.v<<4^e^e<<1)|0},n.x=0,n.y=0,n.z=0,n.w=0,n.v=0,e===(0|e)?n.x=e:t+=e;for(var r=0;r<t.length+64;r++)n.x^=0|t.charCodeAt(r),r==t.length&&(n.d=n.x<<10^n.x>>>4),n.next()}function s(e,n){return n.x=e.x,n.y=e.y,n.z=e.z,n.w=e.w,n.v=e.v,n.d=e.d,n}function l(e,n){var t=new i(e),r=n&&n.state,a=function(){return(t.next()>>>0)/4294967296};return a.double=function(){do{var e=((t.next()>>>11)+(t.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=t.next,a.quick=a,r&&("object"==typeof r&&s(r,t),a.state=function(){return s(t,{})}),a}a&&a.exports?a.exports=l:t.amdD&&t.amdO?void 0===(r=function(){return l}.call(n,t,n,a))||(a.exports=r):this.xorwow=l}(0,e=t.nmd(e),t.amdD)},1971:function(e,n,t){var r;!function(a,o,i){var s,l=256,c=i.pow(l,6),u=i.pow(2,52),d=2*u,A=255;function f(e,n,t){var r=[],A=g(h((n=1==n?{entropy:!0}:n||{}).entropy?[e,b(o)]:null==e?function(){try{var e;return s&&(e=s.randomBytes)?e=e(l):(e=new Uint8Array(l),(a.crypto||a.msCrypto).getRandomValues(e)),b(e)}catch(e){var n=a.navigator,t=n&&n.plugins;return[+new Date,a,t,a.screen,b(o)]}}():e,3),r),f=new p(r),y=function(){for(var e=f.g(6),n=c,t=0;e<u;)e=(e+t)*l,n*=l,t=f.g(1);for(;e>=d;)e/=2,n/=2,t>>>=1;return(e+t)/n};return y.int32=function(){return 0|f.g(4)},y.quick=function(){return f.g(4)/4294967296},y.double=y,g(b(f.S),o),(n.pass||t||function(e,n,t,r){return r&&(r.S&&m(r,f),e.state=function(){return m(f,{})}),t?(i.random=e,n):e})(y,A,"global"in n?n.global:this==i,n.state)}function p(e){var n,t=e.length,r=this,a=0,o=r.i=r.j=0,i=r.S=[];for(t||(e=[t++]);a<l;)i[a]=a++;for(a=0;a<l;a++)i[a]=i[o=A&o+e[a%t]+(n=i[a])],i[o]=n;(r.g=function(e){for(var n,t=0,a=r.i,o=r.j,i=r.S;e--;)n=i[a=A&a+1],t=t*l+i[A&(i[a]=i[o=A&o+n])+(i[o]=n)];return r.i=a,r.j=o,t})(l)}function m(e,n){return n.i=e.i,n.j=e.j,n.S=e.S.slice(),n}function h(e,n){var t,r=[],a=typeof e;if(n&&"object"==a)for(t in e)try{r.push(h(e[t],n-1))}catch(e){}return r.length?r:"string"==a?e:e+"\0"}function g(e,n){for(var t,r=e+"",a=0;a<r.length;)n[A&a]=A&(t^=19*n[A&a])+r.charCodeAt(a++);return b(n)}function b(e){return String.fromCharCode.apply(0,e)}if(g(i.random(),o),e.exports){e.exports=f;try{s=t(5042)}catch(e){}}else void 0===(r=function(){return f}.call(n,t,n,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},3379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],u=o[c]||0,d="".concat(c," ").concat(u);o[c]=u+1;var A=t(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)n[A].references++,n[A].updater(f);else{var p=a(f,r);r.byIndex=s,n.splice(s,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=t(o[i]);n[s].references--}for(var l=r(e,a),c=0;c<o.length;c++){var u=t(o[c]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}o=l}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},9216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},3565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},7795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},4589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},8087:(e,n)=>{"use strict";n.Q=function(e,n){if("string"!=typeof e)throw new TypeError("argument str must be a string");for(var r={},a=n||{},i=e.split(";"),s=a.decode||t,l=0;l<i.length;l++){var c=i[l],u=c.indexOf("=");if(!(u<0)){var d=c.substring(0,u).trim();if(null==r[d]){var A=c.substring(u+1,c.length).trim();'"'===A[0]&&(A=A.slice(1,-1)),r[d]=o(A,s)}}}return r},n.q=function(e,n,t){var o=t||{},i=o.encode||r;if("function"!=typeof i)throw new TypeError("option encode is invalid");if(!a.test(e))throw new TypeError("argument name is invalid");var s=i(n);if(s&&!a.test(s))throw new TypeError("argument val is invalid");var l=e+"="+s;if(null!=o.maxAge){var c=o.maxAge-0;if(isNaN(c)||!isFinite(c))throw new TypeError("option maxAge is invalid");l+="; Max-Age="+Math.floor(c)}if(o.domain){if(!a.test(o.domain))throw new TypeError("option domain is invalid");l+="; Domain="+o.domain}if(o.path){if(!a.test(o.path))throw new TypeError("option path is invalid");l+="; Path="+o.path}if(o.expires){if("function"!=typeof o.expires.toUTCString)throw new TypeError("option expires is invalid");l+="; Expires="+o.expires.toUTCString()}if(o.httpOnly&&(l+="; HttpOnly"),o.secure&&(l+="; Secure"),o.sameSite)switch("string"==typeof o.sameSite?o.sameSite.toLowerCase():o.sameSite){case!0:l+="; SameSite=Strict";break;case"lax":l+="; SameSite=Lax";break;case"strict":l+="; SameSite=Strict";break;case"none":l+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}return l};var t=decodeURIComponent,r=encodeURIComponent,a=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function o(e,n){try{return n(e)}catch(n){return e}}},3250:(e,n,t)=>{"use strict";var r=t(7294),a="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n},o=r.useState,i=r.useEffect,s=r.useLayoutEffect,l=r.useDebugValue;function c(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!a(e,t)}catch(e){return!0}}var u="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,n){return n()}:function(e,n){var t=n(),r=o({inst:{value:t,getSnapshot:n}}),a=r[0].inst,u=r[1];return s((function(){a.value=t,a.getSnapshot=n,c(a)&&u({inst:a})}),[e,t,n]),i((function(){return c(a)&&u({inst:a}),e((function(){c(a)&&u({inst:a})}))}),[e]),l(t),t};n.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:u},139:(e,n,t)=>{"use strict";var r=t(7294),a=t(1688),o="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n},i=a.useSyncExternalStore,s=r.useRef,l=r.useEffect,c=r.useMemo,u=r.useDebugValue;n.useSyncExternalStoreWithSelector=function(e,n,t,r,a){var d=s(null);if(null===d.current){var A={hasValue:!1,value:null};d.current=A}else A=d.current;d=c((function(){function e(e){if(!l){if(l=!0,i=e,e=r(e),void 0!==a&&A.hasValue){var n=A.value;if(a(n,e))return s=n}return s=e}if(n=s,o(i,e))return n;var t=r(e);return void 0!==a&&a(n,t)?n:(i=e,s=t)}var i,s,l=!1,c=void 0===t?null:t;return[function(){return e(n())},null===c?void 0:function(){return e(c())}]}),[n,t,r,a]);var f=i(e,d[0],d[1]);return l((function(){A.hasValue=!0,A.value=f}),[f]),u(f),f}},1688:(e,n,t)=>{"use strict";e.exports=t(3250)},2798:(e,n,t)=>{"use strict";e.exports=t(139)},5042:()=>{}},r={};function a(e){var n=r[e];if(void 0!==n)return n.exports;var o=r[e]={id:e,loaded:!1,exports:{}};return t[e].call(o.exports,o,o.exports,a),o.loaded=!0,o.exports}a.amdD=function(){throw new Error("define cannot be used indirect")},a.amdO={},a.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return a.d(n,{a:n}),n},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var o=Object.create(null);a.r(o);var i={};e=e||[null,n({}),n([]),n(n)];for(var s=2&r&&t;"object"==typeof s&&!~e.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((e=>i[e]=()=>t[e]));return i.default=()=>t,a.d(o,i),o},a.d=(e,n)=>{for(var t in n)a.o(n,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var n=a.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),a.nc=void 0,(()=>{"use strict";var e,n=a(5893),t=a(745),r=a(3379),o=a.n(r),i=a(7795),s=a.n(i),l=a(569),c=a.n(l),u=a(3565),d=a.n(u),A=a(9216),f=a.n(A),p=a(4589),m=a.n(p),h=a(1383),g={};function b(){return b=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},b.apply(this,arguments)}g.styleTagTransform=m(),g.setAttributes=d(),g.insert=c().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=f(),o()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals,function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const y="popstate";function v(e,n){if(!1===e||null==e)throw new Error(n)}function x(e){return{usr:e.state,key:e.key}}function E(e,n,t,r){return void 0===t&&(t=null),b({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof n?B(n):n,{state:t,key:n&&n.key||r||Math.random().toString(36).substr(2,8)})}function w(e){let{pathname:n="/",search:t="",hash:r=""}=e;return t&&"?"!==t&&(n+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(n+="#"===r.charAt(0)?r:"#"+r),n}function B(e){let n={};if(e){let t=e.indexOf("#");t>=0&&(n.hash=e.substr(t),e=e.substr(0,t));let r=e.indexOf("?");r>=0&&(n.search=e.substr(r),e=e.substr(0,r)),e&&(n.pathname=e)}return n}function C(e){let n="undefined"!=typeof window&&void 0!==window.location&&"null"!==window.location.origin?window.location.origin:window.location.href,t="string"==typeof e?e:w(e);return v(n,"No window.location.(origin|href) available to create URL for href: "+t),new URL(t,n)}var k;function j(e,n,t){void 0===t&&(t="/");let r=L(("string"==typeof n?B(n):n).pathname||"/",t);if(null==r)return null;let a=S(e);!function(e){e.sort(((e,n)=>e.score!==n.score?n.score-e.score:function(e,n){let t=e.length===n.length&&e.slice(0,-1).every(((e,t)=>e===n[t]));return t?e[e.length-1]-n[n.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),n.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=P(a[e],I(r));return o}function S(e,n,t,r){void 0===n&&(n=[]),void 0===t&&(t=[]),void 0===r&&(r="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(v(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let s=z([r,i.relativePath]),l=t.concat(i);e.children&&e.children.length>0&&(v(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+s+'".'),S(e.children,n,l,s)),(null!=e.path||e.index)&&n.push({path:s,score:T(s,e.index),routesMeta:l})};return e.forEach(((e,n)=>{var t;if(""!==e.path&&null!=(t=e.path)&&t.includes("?"))for(let t of _(e.path))a(e,n,t);else a(e,n)})),n}function _(e){let n=e.split("/");if(0===n.length)return[];let[t,...r]=n,a=t.endsWith("?"),o=t.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=_(r.join("/")),s=[];return s.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&s.push(...i),s.map((n=>e.startsWith("/")&&""===n?"/":n))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(k||(k={}));const N=/^:\w+$/,O=e=>"*"===e;function T(e,n){let t=e.split("/"),r=t.length;return t.some(O)&&(r+=-2),n&&(r+=2),t.filter((e=>!O(e))).reduce(((e,n)=>e+(N.test(n)?3:""===n?1:10)),r)}function P(e,n){let{routesMeta:t}=e,r={},a="/",o=[];for(let e=0;e<t.length;++e){let i=t[e],s=e===t.length-1,l="/"===a?n:n.slice(a.length)||"/",c=R({path:i.relativePath,caseSensitive:i.caseSensitive,end:s},l);if(!c)return null;Object.assign(r,c.params);let u=i.route;o.push({params:r,pathname:z([a,c.pathname]),pathnameBase:H(z([a,c.pathnameBase])),route:u}),"/"!==c.pathnameBase&&(a=z([a,c.pathnameBase]))}return o}function R(e,n){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[t,r]=function(e,n,t){void 0===n&&(n=!1),void 0===t&&(t=!0),M("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,n)=>(r.push(n),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):t?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,n?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=n.match(t);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),s=a.slice(1);return{params:r.reduce(((e,n,t)=>{if("*"===n){let e=s[t]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[n]=function(e,n){try{return decodeURIComponent(e)}catch(t){return M(!1,'The value for the URL param "'+n+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}(s[t]||"",n),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function I(e){try{return decodeURI(e)}catch(n){return M(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}function L(e,n){if("/"===n)return e;if(!e.toLowerCase().startsWith(n.toLowerCase()))return null;let t=n.endsWith("/")?n.length-1:n.length,r=e.charAt(t);return r&&"/"!==r?null:e.slice(t)||"/"}function M(e,n){if(!e){"undefined"!=typeof console&&console.warn(n);try{throw new Error(n)}catch(e){}}}function D(e,n,t,r){return"Cannot include a '"+e+"' character in a manually specified `to."+n+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+t+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function F(e){return e.filter(((e,n)=>0===n||e.route.path&&e.route.path.length>0))}function U(e,n,t,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=B(e):(a=b({},e),v(!a.pathname||!a.pathname.includes("?"),D("?","pathname","search",a)),v(!a.pathname||!a.pathname.includes("#"),D("#","pathname","hash",a)),v(!a.search||!a.search.includes("#"),D("#","search","hash",a)));let o,i=""===e||""===a.pathname,s=i?"/":a.pathname;if(r||null==s)o=t;else{let e=n.length-1;if(s.startsWith("..")){let n=s.split("/");for(;".."===n[0];)n.shift(),e-=1;a.pathname=n.join("/")}o=e>=0?n[e]:"/"}let l=function(e,n){void 0===n&&(n="/");let{pathname:t,search:r="",hash:a=""}="string"==typeof e?B(e):e,o=t?t.startsWith("/")?t:function(e,n){let t=n.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?t.length>1&&t.pop():"."!==e&&t.push(e)})),t.length>1?t.join("/"):"/"}(t,n):n;return{pathname:o,search:G(r),hash:W(a)}}(a,o),c=s&&"/"!==s&&s.endsWith("/"),u=(i||"."===s)&&t.endsWith("/");return l.pathname.endsWith("/")||!c&&!u||(l.pathname+="/"),l}const z=e=>e.join("/").replace(/\/\/+/g,"/"),H=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),G=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",W=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";class $ extends Error{}class q{constructor(e,n,t,r){void 0===r&&(r=!1),this.status=e,this.statusText=n||"",this.internal=r,t instanceof Error?(this.data=t.toString(),this.error=t):this.data=t}}function Z(e){return e instanceof q}const V=["post","put","patch","delete"],Y=(new Set(V),["get",...V]);new Set(Y),new Set([301,302,303,307,308]),new Set([307,308]),"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement;var X=a(7294),K=a.t(X,2);function Q(){return Q=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},Q.apply(this,arguments)}"function"==typeof Object.is&&Object.is;const{useState:J,useEffect:ee,useLayoutEffect:ne,useDebugValue:te}=K;"undefined"==typeof window||void 0===window.document||window.document.createElement,K.useSyncExternalStore;const re=X.createContext(null),ae=X.createContext(null),oe=X.createContext(null),ie=X.createContext(null),se=X.createContext(null),le=X.createContext({outlet:null,matches:[]}),ce=X.createContext(null);function ue(){return null!=X.useContext(se)}function de(){return ue()||v(!1),X.useContext(se).location}function Ae(){ue()||v(!1);let{basename:e,navigator:n}=X.useContext(ie),{matches:t}=X.useContext(le),{pathname:r}=de(),a=JSON.stringify(F(t).map((e=>e.pathnameBase))),o=X.useRef(!1);X.useEffect((()=>{o.current=!0}));let i=X.useCallback((function(t,i){if(void 0===i&&(i={}),!o.current)return;if("number"==typeof t)return void n.go(t);let s=U(t,JSON.parse(a),r,"path"===i.relative);"/"!==e&&(s.pathname="/"===s.pathname?e:z([e,s.pathname])),(i.replace?n.replace:n.push)(s,i.state,i)}),[e,n,a,r]);return i}function fe(e,n){let{relative:t}=void 0===n?{}:n,{matches:r}=X.useContext(le),{pathname:a}=de(),o=JSON.stringify(F(r).map((e=>e.pathnameBase)));return X.useMemo((()=>U(e,JSON.parse(o),a,"path"===t)),[e,o,a,t])}function pe(){let e=function(){var e;let n=X.useContext(ce),t=function(e){let n=X.useContext(oe);return n||v(!1),n}(be.UseRouteError),r=function(e){let n=function(e){let n=X.useContext(le);return n||v(!1),n}(),t=n.matches[n.matches.length-1];return t.route.id||v(!1),t.route.id}(be.UseRouteError);return n||(null==(e=t.errors)?void 0:e[r])}(),n=Z(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),t=e instanceof Error?e.stack:null,r="rgba(200,200,200, 0.5)",a={padding:"0.5rem",backgroundColor:r},o={padding:"2px 4px",backgroundColor:r};return X.createElement(X.Fragment,null,X.createElement("h2",null,"Unhandled Thrown Error!"),X.createElement("h3",{style:{fontStyle:"italic"}},n),t?X.createElement("pre",{style:a},t):null,X.createElement("p",null,"💿 Hey developer 👋"),X.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",X.createElement("code",{style:o},"errorElement")," props on ",X.createElement("code",{style:o},"<Route>")))}class me extends X.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,n){return n.location!==e.location?{error:e.error,location:e.location}:{error:e.error||n.error,location:n.location}}componentDidCatch(e,n){console.error("React Router caught the following error during render",e,n)}render(){return this.state.error?X.createElement(le.Provider,{value:this.props.routeContext},X.createElement(ce.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function he(e){let{routeContext:n,match:t,children:r}=e,a=X.useContext(re);return a&&t.route.errorElement&&(a._deepestRenderedBoundaryId=t.route.id),X.createElement(le.Provider,{value:n},r)}var ge,be,ye;function ve(e){v(!1)}function xe(n){let{basename:t="/",children:r=null,location:a,navigationType:o=e.Pop,navigator:i,static:s=!1}=n;ue()&&v(!1);let l=t.replace(/^\/*/,"/"),c=X.useMemo((()=>({basename:l,navigator:i,static:s})),[l,i,s]);"string"==typeof a&&(a=B(a));let{pathname:u="/",search:d="",hash:A="",state:f=null,key:p="default"}=a,m=X.useMemo((()=>{let e=L(u,l);return null==e?null:{pathname:e,search:d,hash:A,state:f,key:p}}),[l,u,d,A,f,p]);return null==m?null:X.createElement(ie.Provider,{value:c},X.createElement(se.Provider,{children:r,value:{location:m,navigationType:o}}))}function Ee(n){let{children:t,location:r}=n,a=X.useContext(ae);return function(n,t){ue()||v(!1);let{navigator:r}=X.useContext(ie),a=X.useContext(oe),{matches:o}=X.useContext(le),i=o[o.length-1],s=i?i.params:{},l=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let c,u=de();if(t){var d;let e="string"==typeof t?B(t):t;"/"===l||(null==(d=e.pathname)?void 0:d.startsWith(l))||v(!1),c=e}else c=u;let A=c.pathname||"/",f=j(n,{pathname:"/"===l?A:A.slice(l.length)||"/"}),p=function(e,n,t){if(void 0===n&&(n=[]),null==e){if(null==t||!t.errors)return null;e=t.matches}let r=e,a=null==t?void 0:t.errors;if(null!=a){let e=r.findIndex((e=>e.route.id&&(null==a?void 0:a[e.route.id])));e>=0||v(!1),r=r.slice(0,Math.min(r.length,e+1))}return r.reduceRight(((e,o,i)=>{let s=o.route.id?null==a?void 0:a[o.route.id]:null,l=t?o.route.errorElement||X.createElement(pe,null):null,c=n.concat(r.slice(0,i+1)),u=()=>X.createElement(he,{match:o,routeContext:{outlet:e,matches:c}},s?l:void 0!==o.route.element?o.route.element:e);return t&&(o.route.errorElement||0===i)?X.createElement(me,{location:t.location,component:l,error:s,children:u(),routeContext:{outlet:null,matches:c}}):u()}),null)}(f&&f.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:z([l,r.encodeLocation?r.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?l:z([l,r.encodeLocation?r.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),o,a||void 0);return t&&p?X.createElement(se.Provider,{value:{location:Q({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:e.Pop}},p):p}(a&&!t?a.router.routes:Be(t),r)}!function(e){e.UseRevalidator="useRevalidator"}(ge||(ge={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(be||(be={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(ye||(ye={})),new Promise((()=>{}));class we extends X.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,n){console.error("<Await> caught the following error during render",e,n)}render(){let{children:e,errorElement:n,resolve:t}=this.props,r=null,a=ye.pending;if(t instanceof Promise)if(this.state.error){ye.error;let e=this.state.error;Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else t._tracked?void 0!==r._error?ye.error:void 0!==r._data?ye.success:ye.pending:(ye.pending,Object.defineProperty(t,"_tracked",{get:()=>!0}),t.then((e=>Object.defineProperty(t,"_data",{get:()=>e})),(e=>Object.defineProperty(t,"_error",{get:()=>e}))));else ye.success,Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>t});if(a===ye.error&&r._error instanceof AbortedDeferredError)throw neverSettledPromise;if(a===ye.error&&!n)throw r._error;if(a===ye.error)return React.createElement(AwaitContext.Provider,{value:r,children:n});if(a===ye.success)return React.createElement(AwaitContext.Provider,{value:r,children:e});throw r}}function Be(e,n){void 0===n&&(n=[]);let t=[];return X.Children.forEach(e,((e,r)=>{if(!X.isValidElement(e))return;if(e.type===X.Fragment)return void t.push.apply(t,Be(e.props.children,n));e.type!==ve&&v(!1),e.props.index&&e.props.children&&v(!1);let a=[...n,r],o={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(o.children=Be(e.props.children,a)),t.push(o)})),t}var Ce=a(2751),ke={};ke.styleTagTransform=m(),ke.setAttributes=d(),ke.insert=c().bind(null,"head"),ke.domAPI=s(),ke.insertStyleElement=f(),o()(Ce.Z,ke),Ce.Z&&Ce.Z.locals&&Ce.Z.locals,a.p;var je=a(5714),Se={};Se.styleTagTransform=m(),Se.setAttributes=d(),Se.insert=c().bind(null,"head"),Se.domAPI=s(),Se.insertStyleElement=f(),o()(je.Z,Se),je.Z&&je.Z.locals&&je.Z.locals;var _e=function(e,n){return _e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},_e(e,n)};function Ne(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}_e(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}var Oe=function(){return Oe=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},Oe.apply(this,arguments)};function Te(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)n.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(t[r[a]]=e[r[a]])}return t}function Pe(e,n,t){if(t||2===arguments.length)for(var r,a=0,o=n.length;a<o;a++)!r&&a in n||(r||(r=Array.prototype.slice.call(n,0,a)),r[a]=n[a]);return e.concat(r||Array.prototype.slice.call(n))}Object.create,Object.create,a(8679);var Re,Ie,Le,Me=X.createContext(null),De=(Me.Consumer,Me.Provider),Fe=Me;function Ue(e,n,t){if(void 0===t&&(t=Error),!e)throw new t(n)}function ze(e){return e.type===Ie.literal}function He(e){return e.type===Ie.argument}function Ge(e){return e.type===Ie.number}function We(e){return e.type===Ie.date}function $e(e){return e.type===Ie.time}function qe(e){return e.type===Ie.select}function Ze(e){return e.type===Ie.plural}function Ve(e){return e.type===Ie.pound}function Ye(e){return e.type===Ie.tag}function Xe(e){return!(!e||"object"!=typeof e||e.type!==Le.number)}function Ke(e){return!(!e||"object"!=typeof e||e.type!==Le.dateTime)}!function(e){e[e.EXPECT_ARGUMENT_CLOSING_BRACE=1]="EXPECT_ARGUMENT_CLOSING_BRACE",e[e.EMPTY_ARGUMENT=2]="EMPTY_ARGUMENT",e[e.MALFORMED_ARGUMENT=3]="MALFORMED_ARGUMENT",e[e.EXPECT_ARGUMENT_TYPE=4]="EXPECT_ARGUMENT_TYPE",e[e.INVALID_ARGUMENT_TYPE=5]="INVALID_ARGUMENT_TYPE",e[e.EXPECT_ARGUMENT_STYLE=6]="EXPECT_ARGUMENT_STYLE",e[e.INVALID_NUMBER_SKELETON=7]="INVALID_NUMBER_SKELETON",e[e.INVALID_DATE_TIME_SKELETON=8]="INVALID_DATE_TIME_SKELETON",e[e.EXPECT_NUMBER_SKELETON=9]="EXPECT_NUMBER_SKELETON",e[e.EXPECT_DATE_TIME_SKELETON=10]="EXPECT_DATE_TIME_SKELETON",e[e.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE=11]="UNCLOSED_QUOTE_IN_ARGUMENT_STYLE",e[e.EXPECT_SELECT_ARGUMENT_OPTIONS=12]="EXPECT_SELECT_ARGUMENT_OPTIONS",e[e.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE=13]="EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE",e[e.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE=14]="INVALID_PLURAL_ARGUMENT_OFFSET_VALUE",e[e.EXPECT_SELECT_ARGUMENT_SELECTOR=15]="EXPECT_SELECT_ARGUMENT_SELECTOR",e[e.EXPECT_PLURAL_ARGUMENT_SELECTOR=16]="EXPECT_PLURAL_ARGUMENT_SELECTOR",e[e.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT=17]="EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT",e[e.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT=18]="EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT",e[e.INVALID_PLURAL_ARGUMENT_SELECTOR=19]="INVALID_PLURAL_ARGUMENT_SELECTOR",e[e.DUPLICATE_PLURAL_ARGUMENT_SELECTOR=20]="DUPLICATE_PLURAL_ARGUMENT_SELECTOR",e[e.DUPLICATE_SELECT_ARGUMENT_SELECTOR=21]="DUPLICATE_SELECT_ARGUMENT_SELECTOR",e[e.MISSING_OTHER_CLAUSE=22]="MISSING_OTHER_CLAUSE",e[e.INVALID_TAG=23]="INVALID_TAG",e[e.INVALID_TAG_NAME=25]="INVALID_TAG_NAME",e[e.UNMATCHED_CLOSING_TAG=26]="UNMATCHED_CLOSING_TAG",e[e.UNCLOSED_TAG=27]="UNCLOSED_TAG"}(Re||(Re={})),function(e){e[e.literal=0]="literal",e[e.argument=1]="argument",e[e.number=2]="number",e[e.date=3]="date",e[e.time=4]="time",e[e.select=5]="select",e[e.plural=6]="plural",e[e.pound=7]="pound",e[e.tag=8]="tag"}(Ie||(Ie={})),function(e){e[e.number=0]="number",e[e.dateTime=1]="dateTime"}(Le||(Le={}));var Qe=/[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,Je=/(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;function en(e){var n={};return e.replace(Je,(function(e){var t=e.length;switch(e[0]){case"G":n.era=4===t?"long":5===t?"narrow":"short";break;case"y":n.year=2===t?"2-digit":"numeric";break;case"Y":case"u":case"U":case"r":throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");case"q":case"Q":throw new RangeError("`q/Q` (quarter) patterns are not supported");case"M":case"L":n.month=["numeric","2-digit","short","long","narrow"][t-1];break;case"w":case"W":throw new RangeError("`w/W` (week) patterns are not supported");case"d":n.day=["numeric","2-digit"][t-1];break;case"D":case"F":case"g":throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");case"E":n.weekday=4===t?"short":5===t?"narrow":"short";break;case"e":if(t<4)throw new RangeError("`e..eee` (weekday) patterns are not supported");n.weekday=["short","long","narrow","short"][t-4];break;case"c":if(t<4)throw new RangeError("`c..ccc` (weekday) patterns are not supported");n.weekday=["short","long","narrow","short"][t-4];break;case"a":n.hour12=!0;break;case"b":case"B":throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");case"h":n.hourCycle="h12",n.hour=["numeric","2-digit"][t-1];break;case"H":n.hourCycle="h23",n.hour=["numeric","2-digit"][t-1];break;case"K":n.hourCycle="h11",n.hour=["numeric","2-digit"][t-1];break;case"k":n.hourCycle="h24",n.hour=["numeric","2-digit"][t-1];break;case"j":case"J":case"C":throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");case"m":n.minute=["numeric","2-digit"][t-1];break;case"s":n.second=["numeric","2-digit"][t-1];break;case"S":case"A":throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");case"z":n.timeZoneName=t<4?"short":"long";break;case"Z":case"O":case"v":case"V":case"X":case"x":throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead")}return""})),n}var nn=/[\t-\r \x85\u200E\u200F\u2028\u2029]/i,tn=/^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g,rn=/^(@+)?(\+|#+)?[rs]?$/g,an=/(\*)(0+)|(#+)(0+)|(0+)/g,on=/^(0+)$/;function sn(e){var n={};return"r"===e[e.length-1]?n.roundingPriority="morePrecision":"s"===e[e.length-1]&&(n.roundingPriority="lessPrecision"),e.replace(rn,(function(e,t,r){return"string"!=typeof r?(n.minimumSignificantDigits=t.length,n.maximumSignificantDigits=t.length):"+"===r?n.minimumSignificantDigits=t.length:"#"===t[0]?n.maximumSignificantDigits=t.length:(n.minimumSignificantDigits=t.length,n.maximumSignificantDigits=t.length+("string"==typeof r?r.length:0)),""})),n}function ln(e){switch(e){case"sign-auto":return{signDisplay:"auto"};case"sign-accounting":case"()":return{currencySign:"accounting"};case"sign-always":case"+!":return{signDisplay:"always"};case"sign-accounting-always":case"()!":return{signDisplay:"always",currencySign:"accounting"};case"sign-except-zero":case"+?":return{signDisplay:"exceptZero"};case"sign-accounting-except-zero":case"()?":return{signDisplay:"exceptZero",currencySign:"accounting"};case"sign-never":case"+_":return{signDisplay:"never"}}}function cn(e){var n;if("E"===e[0]&&"E"===e[1]?(n={notation:"engineering"},e=e.slice(2)):"E"===e[0]&&(n={notation:"scientific"},e=e.slice(1)),n){var t=e.slice(0,2);if("+!"===t?(n.signDisplay="always",e=e.slice(2)):"+?"===t&&(n.signDisplay="exceptZero",e=e.slice(2)),!on.test(e))throw new Error("Malformed concise eng/scientific notation");n.minimumIntegerDigits=e.length}return n}function un(e){return ln(e)||{}}function dn(e){for(var n={},t=0,r=e;t<r.length;t++){var a=r[t];switch(a.stem){case"percent":case"%":n.style="percent";continue;case"%x100":n.style="percent",n.scale=100;continue;case"currency":n.style="currency",n.currency=a.options[0];continue;case"group-off":case",_":n.useGrouping=!1;continue;case"precision-integer":case".":n.maximumFractionDigits=0;continue;case"measure-unit":case"unit":n.style="unit",n.unit=a.options[0].replace(/^(.*?)-/,"");continue;case"compact-short":case"K":n.notation="compact",n.compactDisplay="short";continue;case"compact-long":case"KK":n.notation="compact",n.compactDisplay="long";continue;case"scientific":n=Oe(Oe(Oe({},n),{notation:"scientific"}),a.options.reduce((function(e,n){return Oe(Oe({},e),un(n))}),{}));continue;case"engineering":n=Oe(Oe(Oe({},n),{notation:"engineering"}),a.options.reduce((function(e,n){return Oe(Oe({},e),un(n))}),{}));continue;case"notation-simple":n.notation="standard";continue;case"unit-width-narrow":n.currencyDisplay="narrowSymbol",n.unitDisplay="narrow";continue;case"unit-width-short":n.currencyDisplay="code",n.unitDisplay="short";continue;case"unit-width-full-name":n.currencyDisplay="name",n.unitDisplay="long";continue;case"unit-width-iso-code":n.currencyDisplay="symbol";continue;case"scale":n.scale=parseFloat(a.options[0]);continue;case"integer-width":if(a.options.length>1)throw new RangeError("integer-width stems only accept a single optional option");a.options[0].replace(an,(function(e,t,r,a,o,i){if(t)n.minimumIntegerDigits=r.length;else{if(a&&o)throw new Error("We currently do not support maximum integer digits");if(i)throw new Error("We currently do not support exact integer digits")}return""}));continue}if(on.test(a.stem))n.minimumIntegerDigits=a.stem.length;else if(tn.test(a.stem)){if(a.options.length>1)throw new RangeError("Fraction-precision stems only accept a single optional option");a.stem.replace(tn,(function(e,t,r,a,o,i){return"*"===r?n.minimumFractionDigits=t.length:a&&"#"===a[0]?n.maximumFractionDigits=a.length:o&&i?(n.minimumFractionDigits=o.length,n.maximumFractionDigits=o.length+i.length):(n.minimumFractionDigits=t.length,n.maximumFractionDigits=t.length),""}));var o=a.options[0];"w"===o?n=Oe(Oe({},n),{trailingZeroDisplay:"stripIfInteger"}):o&&(n=Oe(Oe({},n),sn(o)))}else if(rn.test(a.stem))n=Oe(Oe({},n),sn(a.stem));else{var i=ln(a.stem);i&&(n=Oe(Oe({},n),i));var s=cn(a.stem);s&&(n=Oe(Oe({},n),s))}}return n}var An,fn={AX:["H"],BQ:["H"],CP:["H"],CZ:["H"],DK:["H"],FI:["H"],ID:["H"],IS:["H"],ML:["H"],NE:["H"],RU:["H"],SE:["H"],SJ:["H"],SK:["H"],AS:["h","H"],BT:["h","H"],DJ:["h","H"],ER:["h","H"],GH:["h","H"],IN:["h","H"],LS:["h","H"],PG:["h","H"],PW:["h","H"],SO:["h","H"],TO:["h","H"],VU:["h","H"],WS:["h","H"],"001":["H","h"],AL:["h","H","hB"],TD:["h","H","hB"],"ca-ES":["H","h","hB"],CF:["H","h","hB"],CM:["H","h","hB"],"fr-CA":["H","h","hB"],"gl-ES":["H","h","hB"],"it-CH":["H","h","hB"],"it-IT":["H","h","hB"],LU:["H","h","hB"],NP:["H","h","hB"],PF:["H","h","hB"],SC:["H","h","hB"],SM:["H","h","hB"],SN:["H","h","hB"],TF:["H","h","hB"],VA:["H","h","hB"],CY:["h","H","hb","hB"],GR:["h","H","hb","hB"],CO:["h","H","hB","hb"],DO:["h","H","hB","hb"],KP:["h","H","hB","hb"],KR:["h","H","hB","hb"],NA:["h","H","hB","hb"],PA:["h","H","hB","hb"],PR:["h","H","hB","hb"],VE:["h","H","hB","hb"],AC:["H","h","hb","hB"],AI:["H","h","hb","hB"],BW:["H","h","hb","hB"],BZ:["H","h","hb","hB"],CC:["H","h","hb","hB"],CK:["H","h","hb","hB"],CX:["H","h","hb","hB"],DG:["H","h","hb","hB"],FK:["H","h","hb","hB"],GB:["H","h","hb","hB"],GG:["H","h","hb","hB"],GI:["H","h","hb","hB"],IE:["H","h","hb","hB"],IM:["H","h","hb","hB"],IO:["H","h","hb","hB"],JE:["H","h","hb","hB"],LT:["H","h","hb","hB"],MK:["H","h","hb","hB"],MN:["H","h","hb","hB"],MS:["H","h","hb","hB"],NF:["H","h","hb","hB"],NG:["H","h","hb","hB"],NR:["H","h","hb","hB"],NU:["H","h","hb","hB"],PN:["H","h","hb","hB"],SH:["H","h","hb","hB"],SX:["H","h","hb","hB"],TA:["H","h","hb","hB"],ZA:["H","h","hb","hB"],"af-ZA":["H","h","hB","hb"],AR:["H","h","hB","hb"],CL:["H","h","hB","hb"],CR:["H","h","hB","hb"],CU:["H","h","hB","hb"],EA:["H","h","hB","hb"],"es-BO":["H","h","hB","hb"],"es-BR":["H","h","hB","hb"],"es-EC":["H","h","hB","hb"],"es-ES":["H","h","hB","hb"],"es-GQ":["H","h","hB","hb"],"es-PE":["H","h","hB","hb"],GT:["H","h","hB","hb"],HN:["H","h","hB","hb"],IC:["H","h","hB","hb"],KG:["H","h","hB","hb"],KM:["H","h","hB","hb"],LK:["H","h","hB","hb"],MA:["H","h","hB","hb"],MX:["H","h","hB","hb"],NI:["H","h","hB","hb"],PY:["H","h","hB","hb"],SV:["H","h","hB","hb"],UY:["H","h","hB","hb"],JP:["H","h","K"],AD:["H","hB"],AM:["H","hB"],AO:["H","hB"],AT:["H","hB"],AW:["H","hB"],BE:["H","hB"],BF:["H","hB"],BJ:["H","hB"],BL:["H","hB"],BR:["H","hB"],CG:["H","hB"],CI:["H","hB"],CV:["H","hB"],DE:["H","hB"],EE:["H","hB"],FR:["H","hB"],GA:["H","hB"],GF:["H","hB"],GN:["H","hB"],GP:["H","hB"],GW:["H","hB"],HR:["H","hB"],IL:["H","hB"],IT:["H","hB"],KZ:["H","hB"],MC:["H","hB"],MD:["H","hB"],MF:["H","hB"],MQ:["H","hB"],MZ:["H","hB"],NC:["H","hB"],NL:["H","hB"],PM:["H","hB"],PT:["H","hB"],RE:["H","hB"],RO:["H","hB"],SI:["H","hB"],SR:["H","hB"],ST:["H","hB"],TG:["H","hB"],TR:["H","hB"],WF:["H","hB"],YT:["H","hB"],BD:["h","hB","H"],PK:["h","hB","H"],AZ:["H","hB","h"],BA:["H","hB","h"],BG:["H","hB","h"],CH:["H","hB","h"],GE:["H","hB","h"],LI:["H","hB","h"],ME:["H","hB","h"],RS:["H","hB","h"],UA:["H","hB","h"],UZ:["H","hB","h"],XK:["H","hB","h"],AG:["h","hb","H","hB"],AU:["h","hb","H","hB"],BB:["h","hb","H","hB"],BM:["h","hb","H","hB"],BS:["h","hb","H","hB"],CA:["h","hb","H","hB"],DM:["h","hb","H","hB"],"en-001":["h","hb","H","hB"],FJ:["h","hb","H","hB"],FM:["h","hb","H","hB"],GD:["h","hb","H","hB"],GM:["h","hb","H","hB"],GU:["h","hb","H","hB"],GY:["h","hb","H","hB"],JM:["h","hb","H","hB"],KI:["h","hb","H","hB"],KN:["h","hb","H","hB"],KY:["h","hb","H","hB"],LC:["h","hb","H","hB"],LR:["h","hb","H","hB"],MH:["h","hb","H","hB"],MP:["h","hb","H","hB"],MW:["h","hb","H","hB"],NZ:["h","hb","H","hB"],SB:["h","hb","H","hB"],SG:["h","hb","H","hB"],SL:["h","hb","H","hB"],SS:["h","hb","H","hB"],SZ:["h","hb","H","hB"],TC:["h","hb","H","hB"],TT:["h","hb","H","hB"],UM:["h","hb","H","hB"],US:["h","hb","H","hB"],VC:["h","hb","H","hB"],VG:["h","hb","H","hB"],VI:["h","hb","H","hB"],ZM:["h","hb","H","hB"],BO:["H","hB","h","hb"],EC:["H","hB","h","hb"],ES:["H","hB","h","hb"],GQ:["H","hB","h","hb"],PE:["H","hB","h","hb"],AE:["h","hB","hb","H"],"ar-001":["h","hB","hb","H"],BH:["h","hB","hb","H"],DZ:["h","hB","hb","H"],EG:["h","hB","hb","H"],EH:["h","hB","hb","H"],HK:["h","hB","hb","H"],IQ:["h","hB","hb","H"],JO:["h","hB","hb","H"],KW:["h","hB","hb","H"],LB:["h","hB","hb","H"],LY:["h","hB","hb","H"],MO:["h","hB","hb","H"],MR:["h","hB","hb","H"],OM:["h","hB","hb","H"],PH:["h","hB","hb","H"],PS:["h","hB","hb","H"],QA:["h","hB","hb","H"],SA:["h","hB","hb","H"],SD:["h","hB","hb","H"],SY:["h","hB","hb","H"],TN:["h","hB","hb","H"],YE:["h","hB","hb","H"],AF:["H","hb","hB","h"],LA:["H","hb","hB","h"],CN:["H","hB","hb","h"],LV:["H","hB","hb","h"],TL:["H","hB","hb","h"],"zu-ZA":["H","hB","hb","h"],CD:["hB","H"],IR:["hB","H"],"hi-IN":["hB","h","H"],"kn-IN":["hB","h","H"],"ml-IN":["hB","h","H"],"te-IN":["hB","h","H"],KH:["hB","h","H","hb"],"ta-IN":["hB","h","hb","H"],BN:["hb","hB","h","H"],MY:["hb","hB","h","H"],ET:["hB","hb","h","H"],"gu-IN":["hB","hb","h","H"],"mr-IN":["hB","hb","h","H"],"pa-IN":["hB","hb","h","H"],TW:["hB","hb","h","H"],KE:["hB","hb","H","h"],MM:["hB","hb","H","h"],TZ:["hB","hb","H","h"],UG:["hB","hb","H","h"]};function pn(e){var n=e.hourCycle;if(void 0===n&&e.hourCycles&&e.hourCycles.length&&(n=e.hourCycles[0]),n)switch(n){case"h24":return"k";case"h23":return"H";case"h12":return"h";case"h11":return"K";default:throw new Error("Invalid hourCycle")}var t,r=e.language;return"root"!==r&&(t=e.maximize().region),(fn[t||""]||fn[r||""]||fn["".concat(r,"-001")]||fn["001"])[0]}var mn=new RegExp("^".concat(Qe.source,"*")),hn=new RegExp("".concat(Qe.source,"*$"));function gn(e,n){return{start:e,end:n}}var bn=!!String.prototype.startsWith,yn=!!String.fromCodePoint,vn=!!Object.fromEntries,xn=!!String.prototype.codePointAt,En=!!String.prototype.trimStart,wn=!!String.prototype.trimEnd,Bn=Number.isSafeInteger?Number.isSafeInteger:function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e&&Math.abs(e)<=9007199254740991},Cn=!0;try{Cn="a"===(null===(An=Pn("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu").exec("a"))||void 0===An?void 0:An[0])}catch(e){Cn=!1}var kn,jn=bn?function(e,n,t){return e.startsWith(n,t)}:function(e,n,t){return e.slice(t,t+n.length)===n},Sn=yn?String.fromCodePoint:function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];for(var t,r="",a=e.length,o=0;a>o;){if((t=e[o++])>1114111)throw RangeError(t+" is not a valid code point");r+=t<65536?String.fromCharCode(t):String.fromCharCode(55296+((t-=65536)>>10),t%1024+56320)}return r},_n=vn?Object.fromEntries:function(e){for(var n={},t=0,r=e;t<r.length;t++){var a=r[t],o=a[0],i=a[1];n[o]=i}return n},Nn=xn?function(e,n){return e.codePointAt(n)}:function(e,n){var t=e.length;if(!(n<0||n>=t)){var r,a=e.charCodeAt(n);return a<55296||a>56319||n+1===t||(r=e.charCodeAt(n+1))<56320||r>57343?a:r-56320+(a-55296<<10)+65536}},On=En?function(e){return e.trimStart()}:function(e){return e.replace(mn,"")},Tn=wn?function(e){return e.trimEnd()}:function(e){return e.replace(hn,"")};function Pn(e,n){return new RegExp(e,n)}if(Cn){var Rn=Pn("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu");kn=function(e,n){var t;return Rn.lastIndex=n,null!==(t=Rn.exec(e)[1])&&void 0!==t?t:""}}else kn=function(e,n){for(var t=[];;){var r=Nn(e,n);if(void 0===r||Mn(r)||Dn(r))break;t.push(r),n+=r>=65536?2:1}return Sn.apply(void 0,t)};var In=function(){function e(e,n){void 0===n&&(n={}),this.message=e,this.position={offset:0,line:1,column:1},this.ignoreTag=!!n.ignoreTag,this.locale=n.locale,this.requiresOtherClause=!!n.requiresOtherClause,this.shouldParseSkeletons=!!n.shouldParseSkeletons}return e.prototype.parse=function(){if(0!==this.offset())throw Error("parser can only be used once");return this.parseMessage(0,"",!1)},e.prototype.parseMessage=function(e,n,t){for(var r=[];!this.isEOF();){var a=this.char();if(123===a){if((o=this.parseArgument(e,t)).err)return o;r.push(o.val)}else{if(125===a&&e>0)break;if(35!==a||"plural"!==n&&"selectordinal"!==n){if(60===a&&!this.ignoreTag&&47===this.peek()){if(t)break;return this.error(Re.UNMATCHED_CLOSING_TAG,gn(this.clonePosition(),this.clonePosition()))}if(60===a&&!this.ignoreTag&&Ln(this.peek()||0)){if((o=this.parseTag(e,n)).err)return o;r.push(o.val)}else{var o;if((o=this.parseLiteral(e,n)).err)return o;r.push(o.val)}}else{var i=this.clonePosition();this.bump(),r.push({type:Ie.pound,location:gn(i,this.clonePosition())})}}}return{val:r,err:null}},e.prototype.parseTag=function(e,n){var t=this.clonePosition();this.bump();var r=this.parseTagName();if(this.bumpSpace(),this.bumpIf("/>"))return{val:{type:Ie.literal,value:"<".concat(r,"/>"),location:gn(t,this.clonePosition())},err:null};if(this.bumpIf(">")){var a=this.parseMessage(e+1,n,!0);if(a.err)return a;var o=a.val,i=this.clonePosition();if(this.bumpIf("</")){if(this.isEOF()||!Ln(this.char()))return this.error(Re.INVALID_TAG,gn(i,this.clonePosition()));var s=this.clonePosition();return r!==this.parseTagName()?this.error(Re.UNMATCHED_CLOSING_TAG,gn(s,this.clonePosition())):(this.bumpSpace(),this.bumpIf(">")?{val:{type:Ie.tag,value:r,children:o,location:gn(t,this.clonePosition())},err:null}:this.error(Re.INVALID_TAG,gn(i,this.clonePosition())))}return this.error(Re.UNCLOSED_TAG,gn(t,this.clonePosition()))}return this.error(Re.INVALID_TAG,gn(t,this.clonePosition()))},e.prototype.parseTagName=function(){var e,n=this.offset();for(this.bump();!this.isEOF()&&(45===(e=this.char())||46===e||e>=48&&e<=57||95===e||e>=97&&e<=122||e>=65&&e<=90||183==e||e>=192&&e<=214||e>=216&&e<=246||e>=248&&e<=893||e>=895&&e<=8191||e>=8204&&e<=8205||e>=8255&&e<=8256||e>=8304&&e<=8591||e>=11264&&e<=12271||e>=12289&&e<=55295||e>=63744&&e<=64975||e>=65008&&e<=65533||e>=65536&&e<=983039);)this.bump();return this.message.slice(n,this.offset())},e.prototype.parseLiteral=function(e,n){for(var t=this.clonePosition(),r="";;){var a=this.tryParseQuote(n);if(a)r+=a;else{var o=this.tryParseUnquoted(e,n);if(o)r+=o;else{var i=this.tryParseLeftAngleBracket();if(!i)break;r+=i}}}var s=gn(t,this.clonePosition());return{val:{type:Ie.literal,value:r,location:s},err:null}},e.prototype.tryParseLeftAngleBracket=function(){return this.isEOF()||60!==this.char()||!this.ignoreTag&&(Ln(e=this.peek()||0)||47===e)?null:(this.bump(),"<");var e},e.prototype.tryParseQuote=function(e){if(this.isEOF()||39!==this.char())return null;switch(this.peek()){case 39:return this.bump(),this.bump(),"'";case 123:case 60:case 62:case 125:break;case 35:if("plural"===e||"selectordinal"===e)break;return null;default:return null}this.bump();var n=[this.char()];for(this.bump();!this.isEOF();){var t=this.char();if(39===t){if(39!==this.peek()){this.bump();break}n.push(39),this.bump()}else n.push(t);this.bump()}return Sn.apply(void 0,n)},e.prototype.tryParseUnquoted=function(e,n){if(this.isEOF())return null;var t=this.char();return 60===t||123===t||35===t&&("plural"===n||"selectordinal"===n)||125===t&&e>0?null:(this.bump(),Sn(t))},e.prototype.parseArgument=function(e,n){var t=this.clonePosition();if(this.bump(),this.bumpSpace(),this.isEOF())return this.error(Re.EXPECT_ARGUMENT_CLOSING_BRACE,gn(t,this.clonePosition()));if(125===this.char())return this.bump(),this.error(Re.EMPTY_ARGUMENT,gn(t,this.clonePosition()));var r=this.parseIdentifierIfPossible().value;if(!r)return this.error(Re.MALFORMED_ARGUMENT,gn(t,this.clonePosition()));if(this.bumpSpace(),this.isEOF())return this.error(Re.EXPECT_ARGUMENT_CLOSING_BRACE,gn(t,this.clonePosition()));switch(this.char()){case 125:return this.bump(),{val:{type:Ie.argument,value:r,location:gn(t,this.clonePosition())},err:null};case 44:return this.bump(),this.bumpSpace(),this.isEOF()?this.error(Re.EXPECT_ARGUMENT_CLOSING_BRACE,gn(t,this.clonePosition())):this.parseArgumentOptions(e,n,r,t);default:return this.error(Re.MALFORMED_ARGUMENT,gn(t,this.clonePosition()))}},e.prototype.parseIdentifierIfPossible=function(){var e=this.clonePosition(),n=this.offset(),t=kn(this.message,n),r=n+t.length;return this.bumpTo(r),{value:t,location:gn(e,this.clonePosition())}},e.prototype.parseArgumentOptions=function(e,n,t,r){var a,o=this.clonePosition(),i=this.parseIdentifierIfPossible().value,s=this.clonePosition();switch(i){case"":return this.error(Re.EXPECT_ARGUMENT_TYPE,gn(o,s));case"number":case"date":case"time":this.bumpSpace();var l=null;if(this.bumpIf(",")){this.bumpSpace();var c=this.clonePosition();if((g=this.parseSimpleArgStyleIfPossible()).err)return g;if(0===(f=Tn(g.val)).length)return this.error(Re.EXPECT_ARGUMENT_STYLE,gn(this.clonePosition(),this.clonePosition()));l={style:f,styleLocation:gn(c,this.clonePosition())}}if((b=this.tryParseArgumentClose(r)).err)return b;var u=gn(r,this.clonePosition());if(l&&jn(null==l?void 0:l.style,"::",0)){var d=On(l.style.slice(2));if("number"===i)return(g=this.parseNumberSkeletonFromString(d,l.styleLocation)).err?g:{val:{type:Ie.number,value:t,location:u,style:g.val},err:null};if(0===d.length)return this.error(Re.EXPECT_DATE_TIME_SKELETON,u);var A=d;this.locale&&(A=function(e,n){for(var t="",r=0;r<e.length;r++){var a=e.charAt(r);if("j"===a){for(var o=0;r+1<e.length&&e.charAt(r+1)===a;)o++,r++;var i=1+(1&o),s=o<2?1:3+(o>>1),l=pn(n);for("H"!=l&&"k"!=l||(s=0);s-- >0;)t+="a";for(;i-- >0;)t=l+t}else t+="J"===a?"H":a}return t}(d,this.locale));var f={type:Le.dateTime,pattern:A,location:l.styleLocation,parsedOptions:this.shouldParseSkeletons?en(A):{}};return{val:{type:"date"===i?Ie.date:Ie.time,value:t,location:u,style:f},err:null}}return{val:{type:"number"===i?Ie.number:"date"===i?Ie.date:Ie.time,value:t,location:u,style:null!==(a=null==l?void 0:l.style)&&void 0!==a?a:null},err:null};case"plural":case"selectordinal":case"select":var p=this.clonePosition();if(this.bumpSpace(),!this.bumpIf(","))return this.error(Re.EXPECT_SELECT_ARGUMENT_OPTIONS,gn(p,Oe({},p)));this.bumpSpace();var m=this.parseIdentifierIfPossible(),h=0;if("select"!==i&&"offset"===m.value){if(!this.bumpIf(":"))return this.error(Re.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,gn(this.clonePosition(),this.clonePosition()));var g;if(this.bumpSpace(),(g=this.tryParseDecimalInteger(Re.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,Re.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE)).err)return g;this.bumpSpace(),m=this.parseIdentifierIfPossible(),h=g.val}var b,y=this.tryParsePluralOrSelectOptions(e,i,n,m);if(y.err)return y;if((b=this.tryParseArgumentClose(r)).err)return b;var v=gn(r,this.clonePosition());return"select"===i?{val:{type:Ie.select,value:t,options:_n(y.val),location:v},err:null}:{val:{type:Ie.plural,value:t,options:_n(y.val),offset:h,pluralType:"plural"===i?"cardinal":"ordinal",location:v},err:null};default:return this.error(Re.INVALID_ARGUMENT_TYPE,gn(o,s))}},e.prototype.tryParseArgumentClose=function(e){return this.isEOF()||125!==this.char()?this.error(Re.EXPECT_ARGUMENT_CLOSING_BRACE,gn(e,this.clonePosition())):(this.bump(),{val:!0,err:null})},e.prototype.parseSimpleArgStyleIfPossible=function(){for(var e=0,n=this.clonePosition();!this.isEOF();)switch(this.char()){case 39:this.bump();var t=this.clonePosition();if(!this.bumpUntil("'"))return this.error(Re.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE,gn(t,this.clonePosition()));this.bump();break;case 123:e+=1,this.bump();break;case 125:if(!(e>0))return{val:this.message.slice(n.offset,this.offset()),err:null};e-=1;break;default:this.bump()}return{val:this.message.slice(n.offset,this.offset()),err:null}},e.prototype.parseNumberSkeletonFromString=function(e,n){var t=[];try{t=function(e){if(0===e.length)throw new Error("Number skeleton cannot be empty");for(var n=[],t=0,r=e.split(nn).filter((function(e){return e.length>0}));t<r.length;t++){var a=r[t].split("/");if(0===a.length)throw new Error("Invalid number skeleton");for(var o=a[0],i=a.slice(1),s=0,l=i;s<l.length;s++)if(0===l[s].length)throw new Error("Invalid number skeleton");n.push({stem:o,options:i})}return n}(e)}catch(e){return this.error(Re.INVALID_NUMBER_SKELETON,n)}return{val:{type:Le.number,tokens:t,location:n,parsedOptions:this.shouldParseSkeletons?dn(t):{}},err:null}},e.prototype.tryParsePluralOrSelectOptions=function(e,n,t,r){for(var a,o=!1,i=[],s=new Set,l=r.value,c=r.location;;){if(0===l.length){var u=this.clonePosition();if("select"===n||!this.bumpIf("="))break;var d=this.tryParseDecimalInteger(Re.EXPECT_PLURAL_ARGUMENT_SELECTOR,Re.INVALID_PLURAL_ARGUMENT_SELECTOR);if(d.err)return d;c=gn(u,this.clonePosition()),l=this.message.slice(u.offset,this.offset())}if(s.has(l))return this.error("select"===n?Re.DUPLICATE_SELECT_ARGUMENT_SELECTOR:Re.DUPLICATE_PLURAL_ARGUMENT_SELECTOR,c);"other"===l&&(o=!0),this.bumpSpace();var A=this.clonePosition();if(!this.bumpIf("{"))return this.error("select"===n?Re.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT:Re.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT,gn(this.clonePosition(),this.clonePosition()));var f=this.parseMessage(e+1,n,t);if(f.err)return f;var p=this.tryParseArgumentClose(A);if(p.err)return p;i.push([l,{value:f.val,location:gn(A,this.clonePosition())}]),s.add(l),this.bumpSpace(),l=(a=this.parseIdentifierIfPossible()).value,c=a.location}return 0===i.length?this.error("select"===n?Re.EXPECT_SELECT_ARGUMENT_SELECTOR:Re.EXPECT_PLURAL_ARGUMENT_SELECTOR,gn(this.clonePosition(),this.clonePosition())):this.requiresOtherClause&&!o?this.error(Re.MISSING_OTHER_CLAUSE,gn(this.clonePosition(),this.clonePosition())):{val:i,err:null}},e.prototype.tryParseDecimalInteger=function(e,n){var t=1,r=this.clonePosition();this.bumpIf("+")||this.bumpIf("-")&&(t=-1);for(var a=!1,o=0;!this.isEOF();){var i=this.char();if(!(i>=48&&i<=57))break;a=!0,o=10*o+(i-48),this.bump()}var s=gn(r,this.clonePosition());return a?Bn(o*=t)?{val:o,err:null}:this.error(n,s):this.error(e,s)},e.prototype.offset=function(){return this.position.offset},e.prototype.isEOF=function(){return this.offset()===this.message.length},e.prototype.clonePosition=function(){return{offset:this.position.offset,line:this.position.line,column:this.position.column}},e.prototype.char=function(){var e=this.position.offset;if(e>=this.message.length)throw Error("out of bound");var n=Nn(this.message,e);if(void 0===n)throw Error("Offset ".concat(e," is at invalid UTF-16 code unit boundary"));return n},e.prototype.error=function(e,n){return{val:null,err:{kind:e,message:this.message,location:n}}},e.prototype.bump=function(){if(!this.isEOF()){var e=this.char();10===e?(this.position.line+=1,this.position.column=1,this.position.offset+=1):(this.position.column+=1,this.position.offset+=e<65536?1:2)}},e.prototype.bumpIf=function(e){if(jn(this.message,e,this.offset())){for(var n=0;n<e.length;n++)this.bump();return!0}return!1},e.prototype.bumpUntil=function(e){var n=this.offset(),t=this.message.indexOf(e,n);return t>=0?(this.bumpTo(t),!0):(this.bumpTo(this.message.length),!1)},e.prototype.bumpTo=function(e){if(this.offset()>e)throw Error("targetOffset ".concat(e," must be greater than or equal to the current offset ").concat(this.offset()));for(e=Math.min(e,this.message.length);;){var n=this.offset();if(n===e)break;if(n>e)throw Error("targetOffset ".concat(e," is at invalid UTF-16 code unit boundary"));if(this.bump(),this.isEOF())break}},e.prototype.bumpSpace=function(){for(;!this.isEOF()&&Mn(this.char());)this.bump()},e.prototype.peek=function(){if(this.isEOF())return null;var e=this.char(),n=this.offset(),t=this.message.charCodeAt(n+(e>=65536?2:1));return null!=t?t:null},e}();function Ln(e){return e>=97&&e<=122||e>=65&&e<=90}function Mn(e){return e>=9&&e<=13||32===e||133===e||e>=8206&&e<=8207||8232===e||8233===e}function Dn(e){return e>=33&&e<=35||36===e||e>=37&&e<=39||40===e||41===e||42===e||43===e||44===e||45===e||e>=46&&e<=47||e>=58&&e<=59||e>=60&&e<=62||e>=63&&e<=64||91===e||92===e||93===e||94===e||96===e||123===e||124===e||125===e||126===e||161===e||e>=162&&e<=165||166===e||167===e||169===e||171===e||172===e||174===e||176===e||177===e||182===e||187===e||191===e||215===e||247===e||e>=8208&&e<=8213||e>=8214&&e<=8215||8216===e||8217===e||8218===e||e>=8219&&e<=8220||8221===e||8222===e||8223===e||e>=8224&&e<=8231||e>=8240&&e<=8248||8249===e||8250===e||e>=8251&&e<=8254||e>=8257&&e<=8259||8260===e||8261===e||8262===e||e>=8263&&e<=8273||8274===e||8275===e||e>=8277&&e<=8286||e>=8592&&e<=8596||e>=8597&&e<=8601||e>=8602&&e<=8603||e>=8604&&e<=8607||8608===e||e>=8609&&e<=8610||8611===e||e>=8612&&e<=8613||8614===e||e>=8615&&e<=8621||8622===e||e>=8623&&e<=8653||e>=8654&&e<=8655||e>=8656&&e<=8657||8658===e||8659===e||8660===e||e>=8661&&e<=8691||e>=8692&&e<=8959||e>=8960&&e<=8967||8968===e||8969===e||8970===e||8971===e||e>=8972&&e<=8991||e>=8992&&e<=8993||e>=8994&&e<=9e3||9001===e||9002===e||e>=9003&&e<=9083||9084===e||e>=9085&&e<=9114||e>=9115&&e<=9139||e>=9140&&e<=9179||e>=9180&&e<=9185||e>=9186&&e<=9254||e>=9255&&e<=9279||e>=9280&&e<=9290||e>=9291&&e<=9311||e>=9472&&e<=9654||9655===e||e>=9656&&e<=9664||9665===e||e>=9666&&e<=9719||e>=9720&&e<=9727||e>=9728&&e<=9838||9839===e||e>=9840&&e<=10087||10088===e||10089===e||10090===e||10091===e||10092===e||10093===e||10094===e||10095===e||10096===e||10097===e||10098===e||10099===e||10100===e||10101===e||e>=10132&&e<=10175||e>=10176&&e<=10180||10181===e||10182===e||e>=10183&&e<=10213||10214===e||10215===e||10216===e||10217===e||10218===e||10219===e||10220===e||10221===e||10222===e||10223===e||e>=10224&&e<=10239||e>=10240&&e<=10495||e>=10496&&e<=10626||10627===e||10628===e||10629===e||10630===e||10631===e||10632===e||10633===e||10634===e||10635===e||10636===e||10637===e||10638===e||10639===e||10640===e||10641===e||10642===e||10643===e||10644===e||10645===e||10646===e||10647===e||10648===e||e>=10649&&e<=10711||10712===e||10713===e||10714===e||10715===e||e>=10716&&e<=10747||10748===e||10749===e||e>=10750&&e<=11007||e>=11008&&e<=11055||e>=11056&&e<=11076||e>=11077&&e<=11078||e>=11079&&e<=11084||e>=11085&&e<=11123||e>=11124&&e<=11125||e>=11126&&e<=11157||11158===e||e>=11159&&e<=11263||e>=11776&&e<=11777||11778===e||11779===e||11780===e||11781===e||e>=11782&&e<=11784||11785===e||11786===e||11787===e||11788===e||11789===e||e>=11790&&e<=11798||11799===e||e>=11800&&e<=11801||11802===e||11803===e||11804===e||11805===e||e>=11806&&e<=11807||11808===e||11809===e||11810===e||11811===e||11812===e||11813===e||11814===e||11815===e||11816===e||11817===e||e>=11818&&e<=11822||11823===e||e>=11824&&e<=11833||e>=11834&&e<=11835||e>=11836&&e<=11839||11840===e||11841===e||11842===e||e>=11843&&e<=11855||e>=11856&&e<=11857||11858===e||e>=11859&&e<=11903||e>=12289&&e<=12291||12296===e||12297===e||12298===e||12299===e||12300===e||12301===e||12302===e||12303===e||12304===e||12305===e||e>=12306&&e<=12307||12308===e||12309===e||12310===e||12311===e||12312===e||12313===e||12314===e||12315===e||12316===e||12317===e||e>=12318&&e<=12319||12320===e||12336===e||64830===e||64831===e||e>=65093&&e<=65094}function Fn(e){e.forEach((function(e){if(delete e.location,qe(e)||Ze(e))for(var n in e.options)delete e.options[n].location,Fn(e.options[n].value);else Ge(e)&&Xe(e.style)||(We(e)||$e(e))&&Ke(e.style)?delete e.style.location:Ye(e)&&Fn(e.children)}))}function Un(e,n){void 0===n&&(n={}),n=Oe({shouldParseSkeletons:!0,requiresOtherClause:!0},n);var t=new In(e,n).parse();if(t.err){var r=SyntaxError(Re[t.err.kind]);throw r.location=t.err.location,r.originalMessage=t.err.message,r}return(null==n?void 0:n.captureLocation)||Fn(t.val),t.val}function zn(e,n){var t=n&&n.cache?n.cache:Yn,r=n&&n.serializer?n.serializer:qn;return(n&&n.strategy?n.strategy:$n)(e,{cache:t,serializer:r})}function Hn(e,n,t,r){var a,o=null==(a=r)||"number"==typeof a||"boolean"==typeof a?r:t(r),i=n.get(o);return void 0===i&&(i=e.call(this,r),n.set(o,i)),i}function Gn(e,n,t){var r=Array.prototype.slice.call(arguments,3),a=t(r),o=n.get(a);return void 0===o&&(o=e.apply(this,r),n.set(a,o)),o}function Wn(e,n,t,r,a){return t.bind(n,e,r,a)}function $n(e,n){return Wn(e,this,1===e.length?Hn:Gn,n.cache.create(),n.serializer)}var qn=function(){return JSON.stringify(arguments)};function Zn(){this.cache=Object.create(null)}Zn.prototype.get=function(e){return this.cache[e]},Zn.prototype.set=function(e,n){this.cache[e]=n};var Vn,Yn={create:function(){return new Zn}},Xn={variadic:function(e,n){return Wn(e,this,Gn,n.cache.create(),n.serializer)},monadic:function(e,n){return Wn(e,this,Hn,n.cache.create(),n.serializer)}};!function(e){e.MISSING_VALUE="MISSING_VALUE",e.INVALID_VALUE="INVALID_VALUE",e.MISSING_INTL_API="MISSING_INTL_API"}(Vn||(Vn={}));var Kn,Qn=function(e){function n(n,t,r){var a=e.call(this,n)||this;return a.code=t,a.originalMessage=r,a}return Ne(n,e),n.prototype.toString=function(){return"[formatjs Error: ".concat(this.code,"] ").concat(this.message)},n}(Error),Jn=function(e){function n(n,t,r,a){return e.call(this,'Invalid values for "'.concat(n,'": "').concat(t,'". Options are "').concat(Object.keys(r).join('", "'),'"'),Vn.INVALID_VALUE,a)||this}return Ne(n,e),n}(Qn),et=function(e){function n(n,t,r){return e.call(this,'Value for "'.concat(n,'" must be of type ').concat(t),Vn.INVALID_VALUE,r)||this}return Ne(n,e),n}(Qn),nt=function(e){function n(n,t){return e.call(this,'The intl string context variable "'.concat(n,'" was not provided to the string "').concat(t,'"'),Vn.MISSING_VALUE,t)||this}return Ne(n,e),n}(Qn);function tt(e){return"function"==typeof e}function rt(e,n,t,r,a,o,i){if(1===e.length&&ze(e[0]))return[{type:Kn.literal,value:e[0].value}];for(var s=[],l=0,c=e;l<c.length;l++){var u=c[l];if(ze(u))s.push({type:Kn.literal,value:u.value});else if(Ve(u))"number"==typeof o&&s.push({type:Kn.literal,value:t.getNumberFormat(n).format(o)});else{var d=u.value;if(!a||!(d in a))throw new nt(d,i);var A=a[d];if(He(u))A&&"string"!=typeof A&&"number"!=typeof A||(A="string"==typeof A||"number"==typeof A?String(A):""),s.push({type:"string"==typeof A?Kn.literal:Kn.object,value:A});else if(We(u)){var f="string"==typeof u.style?r.date[u.style]:Ke(u.style)?u.style.parsedOptions:void 0;s.push({type:Kn.literal,value:t.getDateTimeFormat(n,f).format(A)})}else if($e(u))f="string"==typeof u.style?r.time[u.style]:Ke(u.style)?u.style.parsedOptions:r.time.medium,s.push({type:Kn.literal,value:t.getDateTimeFormat(n,f).format(A)});else if(Ge(u))(f="string"==typeof u.style?r.number[u.style]:Xe(u.style)?u.style.parsedOptions:void 0)&&f.scale&&(A*=f.scale||1),s.push({type:Kn.literal,value:t.getNumberFormat(n,f).format(A)});else{if(Ye(u)){var p=u.children,m=u.value,h=a[m];if(!tt(h))throw new et(m,"function",i);var g=h(rt(p,n,t,r,a,o).map((function(e){return e.value})));Array.isArray(g)||(g=[g]),s.push.apply(s,g.map((function(e){return{type:"string"==typeof e?Kn.literal:Kn.object,value:e}})))}if(qe(u)){if(!(b=u.options[A]||u.options.other))throw new Jn(u.value,A,Object.keys(u.options),i);s.push.apply(s,rt(b.value,n,t,r,a))}else if(Ze(u)){var b;if(!(b=u.options["=".concat(A)])){if(!Intl.PluralRules)throw new Qn('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n',Vn.MISSING_INTL_API,i);var y=t.getPluralRules(n,{type:u.pluralType}).select(A-(u.offset||0));b=u.options[y]||u.options.other}if(!b)throw new Jn(u.value,A,Object.keys(u.options),i);s.push.apply(s,rt(b.value,n,t,r,a,A-(u.offset||0)))}}}}return(v=s).length<2?v:v.reduce((function(e,n){var t=e[e.length-1];return t&&t.type===Kn.literal&&n.type===Kn.literal?t.value+=n.value:e.push(n),e}),[]);var v}function at(e){return{create:function(){return{get:function(n){return e[n]},set:function(n,t){e[n]=t}}}}}!function(e){e[e.literal=0]="literal",e[e.object=1]="object"}(Kn||(Kn={}));var ot,it=function(){function e(n,t,r,a){void 0===t&&(t=e.defaultLocale);var o,i,s,l=this;if(this.formatterCache={number:{},dateTime:{},pluralRules:{}},this.format=function(e){var n=l.formatToParts(e);if(1===n.length)return n[0].value;var t=n.reduce((function(e,n){return e.length&&n.type===Kn.literal&&"string"==typeof e[e.length-1]?e[e.length-1]+=n.value:e.push(n.value),e}),[]);return t.length<=1?t[0]||"":t},this.formatToParts=function(e){return rt(l.ast,l.locales,l.formatters,l.formats,e,void 0,l.message)},this.resolvedOptions=function(){var e;return{locale:(null===(e=l.resolvedLocale)||void 0===e?void 0:e.toString())||Intl.NumberFormat.supportedLocalesOf(l.locales)[0]}},this.getAst=function(){return l.ast},this.locales=t,this.resolvedLocale=e.resolveLocale(t),"string"==typeof n){if(this.message=n,!e.__parse)throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");var c=a||{},u=(c.formatters,Te(c,["formatters"]));this.ast=e.__parse(n,Oe(Oe({},u),{locale:this.resolvedLocale}))}else this.ast=n;if(!Array.isArray(this.ast))throw new TypeError("A message must be provided as a String or AST.");this.formats=(i=e.formats,(s=r)?Object.keys(i).reduce((function(e,n){var t,r;return e[n]=(t=i[n],(r=s[n])?Oe(Oe(Oe({},t||{}),r||{}),Object.keys(t).reduce((function(e,n){return e[n]=Oe(Oe({},t[n]),r[n]||{}),e}),{})):t),e}),Oe({},i)):i),this.formatters=a&&a.formatters||(void 0===(o=this.formatterCache)&&(o={number:{},dateTime:{},pluralRules:{}}),{getNumberFormat:zn((function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return new((e=Intl.NumberFormat).bind.apply(e,Pe([void 0],n,!1)))}),{cache:at(o.number),strategy:Xn.variadic}),getDateTimeFormat:zn((function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return new((e=Intl.DateTimeFormat).bind.apply(e,Pe([void 0],n,!1)))}),{cache:at(o.dateTime),strategy:Xn.variadic}),getPluralRules:zn((function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return new((e=Intl.PluralRules).bind.apply(e,Pe([void 0],n,!1)))}),{cache:at(o.pluralRules),strategy:Xn.variadic})})}return Object.defineProperty(e,"defaultLocale",{get:function(){return e.memoizedDefaultLocale||(e.memoizedDefaultLocale=(new Intl.NumberFormat).resolvedOptions().locale),e.memoizedDefaultLocale},enumerable:!1,configurable:!0}),e.memoizedDefaultLocale=null,e.resolveLocale=function(e){if(void 0!==Intl.Locale){var n=Intl.NumberFormat.supportedLocalesOf(e);return n.length>0?new Intl.Locale(n[0]):new Intl.Locale("string"==typeof e?e:e[0])}},e.__parse=Un,e.formats={number:{integer:{maximumFractionDigits:0},currency:{style:"currency"},percent:{style:"percent"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},e}();!function(e){e.FORMAT_ERROR="FORMAT_ERROR",e.UNSUPPORTED_FORMATTER="UNSUPPORTED_FORMATTER",e.INVALID_CONFIG="INVALID_CONFIG",e.MISSING_DATA="MISSING_DATA",e.MISSING_TRANSLATION="MISSING_TRANSLATION"}(ot||(ot={}));var st=function(e){function n(t,r,a){var o=this,i=a?a instanceof Error?a:new Error(String(a)):void 0;return(o=e.call(this,"[@formatjs/intl Error ".concat(t,"] ").concat(r,"\n").concat(i?"\n".concat(i.message,"\n").concat(i.stack):""))||this).code=t,"function"==typeof Error.captureStackTrace&&Error.captureStackTrace(o,n),o}return Ne(n,e),n}(Error),lt=function(e){function n(n,t){return e.call(this,ot.UNSUPPORTED_FORMATTER,n,t)||this}return Ne(n,e),n}(st),ct=function(e){function n(n,t){return e.call(this,ot.INVALID_CONFIG,n,t)||this}return Ne(n,e),n}(st),ut=function(e){function n(n,t){return e.call(this,ot.MISSING_DATA,n,t)||this}return Ne(n,e),n}(st),dt=function(e){function n(n,t,r){return e.call(this,ot.FORMAT_ERROR,"".concat(n,"\nLocale: ").concat(t,"\n"),r)||this}return Ne(n,e),n}(st),At=function(e){function n(n,t,r,a){var o=e.call(this,"".concat(n,"\nMessageID: ").concat(null==r?void 0:r.id,"\nDefault Message: ").concat(null==r?void 0:r.defaultMessage,"\nDescription: ").concat(null==r?void 0:r.description,"\n"),t,a)||this;return o.descriptor=r,o}return Ne(n,e),n}(dt),ft=function(e){function n(n,t){var r=e.call(this,ot.MISSING_TRANSLATION,'Missing message: "'.concat(n.id,'" for locale "').concat(t,'", using ').concat(n.defaultMessage?"default message (".concat("string"==typeof n.defaultMessage?n.defaultMessage:n.defaultMessage.map((function(e){var n;return null!==(n=e.value)&&void 0!==n?n:JSON.stringify(e)})).join(),")"):"id"," as fallback."))||this;return r.descriptor=n,r}return Ne(n,e),n}(st);function pt(e,n,t){return void 0===t&&(t={}),n.reduce((function(n,r){return r in e?n[r]=e[r]:r in t&&(n[r]=t[r]),n}),{})}var mt={formats:{},messages:{},timeZone:void 0,defaultLocale:"en",defaultFormats:{},fallbackOnEmptyString:!0,onError:function(e){},onWarn:function(e){}};function ht(e){return{create:function(){return{get:function(n){return e[n]},set:function(n,t){e[n]=t}}}}}function gt(e,n,t,r){var a,o=e&&e[n];if(o&&(a=o[t]),a)return a;r(new lt("No ".concat(n," format named: ").concat(t)))}function bt(e){Ue(e,"[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry.")}var yt=Oe(Oe({},mt),{textComponent:X.Fragment});function vt(e,n){if(e===n)return!0;if(!e||!n)return!1;var t=Object.keys(e),r=Object.keys(n),a=t.length;if(r.length!==a)return!1;for(var o=0;o<a;o++){var i=t[o];if(e[i]!==n[i]||!Object.prototype.hasOwnProperty.call(n,i))return!1}return!0}function xt(e){var n=function(){var e=X.useContext(Fe);return bt(e),e}(),t=n.formatMessage,r=n.textComponent,a=void 0===r?X.Fragment:r,o=e.id,i=e.description,s=e.defaultMessage,l=e.values,c=e.children,u=e.tagName,d=void 0===u?a:u,A=t({id:o,description:i,defaultMessage:s},l,{ignoreTag:e.ignoreTag});return"function"==typeof c?c(Array.isArray(A)?A:[A]):d?X.createElement(d,null,X.Children.toArray(A)):X.createElement(X.Fragment,null,A)}xt.displayName="FormattedMessage";var Et=X.memo(xt,(function(e,n){var t=e.values,r=Te(e,["values"]),a=n.values,o=Te(n,["values"]);return vt(a,t)&&vt(r,o)}));Et.displayName="MemoizedFormattedMessage";const wt=Et,Bt=e=>{const n=[[e,e,e,e,e,e,e],[e,e,e,e,e,e,e],[e,e,e,e,e,e,e],[e,e,e,e,e,e,e],[e,e,e,e,e,e,e]],t=86307444,r=new Date(e.setDate(1)).getDay();let a=new Date(e.setDate(1)-t*r);for(let e=0;e<n.length;e++)for(let r=0;r<n[0].length;r++)n[e][r]=new Date(a),a=new Date(+a+t);return n};var Ct=a(5336),kt={};kt.styleTagTransform=m(),kt.setAttributes=d(),kt.insert=c().bind(null,"head"),kt.domAPI=s(),kt.insertStyleElement=f(),o()(Ct.Z,kt),Ct.Z&&Ct.Z.locals&&Ct.Z.locals;const jt=["sun","mon","tue","wed","thu","fri","sat"],St=["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"],_t=({activeDays:e})=>{const[t,r]=(0,X.useState)(Bt(new Date)),[a,o]=(0,X.useState)(new Date),[i,s]=(0,X.useState)(a.getFullYear()),[l,c]=(0,X.useState)(a.getMonth()),u=(e,n)=>{o("prev"===e?new Date("year"===n?a.setFullYear(i-1):a.setMonth(l-1)):new Date("year"===n?a.setFullYear(a.getFullYear()+1):a.setMonth(a.getMonth()+1))),c(a.getMonth()),s(a.getFullYear()),r(Bt(a))};return(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("div",Object.assign({className:"calendar"},{children:(0,n.jsx)("div",Object.assign({className:"table-calendar"},{children:(0,n.jsxs)("table",Object.assign({className:"table"},{children:[(0,n.jsxs)("thead",Object.assign({className:"month"},{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",Object.assign({className:"change-period",onClick:()=>u("prev","year")},{children:"<<"})),(0,n.jsx)("th",Object.assign({className:"upper-first",colSpan:5},{children:i})),(0,n.jsx)("th",Object.assign({className:"change-period",onClick:()=>u("next","month")},{children:">>"}))]}),(0,n.jsxs)("tr",Object.assign({className:"month"},{children:[(0,n.jsx)("th",Object.assign({className:"change-period",onClick:()=>u("prev","month")},{children:"<"})),(0,n.jsx)("th",Object.assign({className:"upper-first",colSpan:5},{children:(0,n.jsx)(wt,{id:St[l]})})),(0,n.jsx)("th",Object.assign({className:"change-period",onClick:()=>u("next","month")},{children:">"}))]}))]})),(0,n.jsxs)("tbody",{children:[(0,n.jsx)("tr",Object.assign({className:"days-of-week-row"},{children:jt.map((e=>(0,n.jsx)("td",Object.assign({className:"day-of-week upper-first"},{children:(0,n.jsx)(wt,{id:e})}),e)))})),t.map(((t,r)=>(0,n.jsx)("tr",Object.assign({className:"days-row"},{children:t.map((t=>(0,n.jsx)("td",Object.assign({className:"every-day  "+((null==e?void 0:e.map((e=>new Date(e).getDate())).includes(t.getDate()))&&(null==e?void 0:e.map((e=>new Date(e).getMonth())).includes(t.getMonth()))&&e.map((e=>new Date(e).getFullYear())).includes(t.getFullYear())?"active-date":t<a?"not-active":"")},{children:t.getDate()}),t.toString())))}),r)))]})]}))}))}))})},Nt="api",Ot="users",Tt="results",Pt="categories",Rt="https://rs-clone-server-production-9c01.up.railway.app";function It(e,n){return function(){return e.apply(n,arguments)}}const{toString:Lt}=Object.prototype,{getPrototypeOf:Mt}=Object,Dt=(Ft=Object.create(null),e=>{const n=Lt.call(e);return Ft[n]||(Ft[n]=n.slice(8,-1).toLowerCase())});var Ft;const Ut=e=>(e=e.toLowerCase(),n=>Dt(n)===e),zt=e=>n=>typeof n===e,{isArray:Ht}=Array,Gt=zt("undefined"),Wt=Ut("ArrayBuffer"),$t=zt("string"),qt=zt("function"),Zt=zt("number"),Vt=e=>null!==e&&"object"==typeof e,Yt=e=>{if("object"!==Dt(e))return!1;const n=Mt(e);return!(null!==n&&n!==Object.prototype&&null!==Object.getPrototypeOf(n)||Symbol.toStringTag in e||Symbol.iterator in e)},Xt=Ut("Date"),Kt=Ut("File"),Qt=Ut("Blob"),Jt=Ut("FileList"),er=Ut("URLSearchParams");function nr(e,n,{allOwnKeys:t=!1}={}){if(null==e)return;let r,a;if("object"!=typeof e&&(e=[e]),Ht(e))for(r=0,a=e.length;r<a;r++)n.call(null,e[r],r,e);else{const a=t?Object.getOwnPropertyNames(e):Object.keys(e),o=a.length;let i;for(r=0;r<o;r++)i=a[r],n.call(null,e[i],i,e)}}function tr(e,n){n=n.toLowerCase();const t=Object.keys(e);let r,a=t.length;for(;a-- >0;)if(r=t[a],n===r.toLowerCase())return r;return null}const rr="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,ar=e=>!Gt(e)&&e!==rr,or=(ir="undefined"!=typeof Uint8Array&&Mt(Uint8Array),e=>ir&&e instanceof ir);var ir;const sr=Ut("HTMLFormElement"),lr=(({hasOwnProperty:e})=>(n,t)=>e.call(n,t))(Object.prototype),cr=Ut("RegExp"),ur=(e,n)=>{const t=Object.getOwnPropertyDescriptors(e),r={};nr(t,((t,a)=>{!1!==n(t,a,e)&&(r[a]=t)})),Object.defineProperties(e,r)},dr="abcdefghijklmnopqrstuvwxyz",Ar="0123456789",fr={DIGIT:Ar,ALPHA:dr,ALPHA_DIGIT:dr+dr.toUpperCase()+Ar},pr={isArray:Ht,isArrayBuffer:Wt,isBuffer:function(e){return null!==e&&!Gt(e)&&null!==e.constructor&&!Gt(e.constructor)&&qt(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{const n="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||Lt.call(e)===n||qt(e.toString)&&e.toString()===n)},isArrayBufferView:function(e){let n;return n="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&Wt(e.buffer),n},isString:$t,isNumber:Zt,isBoolean:e=>!0===e||!1===e,isObject:Vt,isPlainObject:Yt,isUndefined:Gt,isDate:Xt,isFile:Kt,isBlob:Qt,isRegExp:cr,isFunction:qt,isStream:e=>Vt(e)&&qt(e.pipe),isURLSearchParams:er,isTypedArray:or,isFileList:Jt,forEach:nr,merge:function e(){const{caseless:n}=ar(this)&&this||{},t={},r=(r,a)=>{const o=n&&tr(t,a)||a;Yt(t[o])&&Yt(r)?t[o]=e(t[o],r):Yt(r)?t[o]=e({},r):Ht(r)?t[o]=r.slice():t[o]=r};for(let e=0,n=arguments.length;e<n;e++)arguments[e]&&nr(arguments[e],r);return t},extend:(e,n,t,{allOwnKeys:r}={})=>(nr(n,((n,r)=>{t&&qt(n)?e[r]=It(n,t):e[r]=n}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,n,t,r)=>{e.prototype=Object.create(n.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:n.prototype}),t&&Object.assign(e.prototype,t)},toFlatObject:(e,n,t,r)=>{let a,o,i;const s={};if(n=n||{},null==e)return n;do{for(a=Object.getOwnPropertyNames(e),o=a.length;o-- >0;)i=a[o],r&&!r(i,e,n)||s[i]||(n[i]=e[i],s[i]=!0);e=!1!==t&&Mt(e)}while(e&&(!t||t(e,n))&&e!==Object.prototype);return n},kindOf:Dt,kindOfTest:Ut,endsWith:(e,n,t)=>{e=String(e),(void 0===t||t>e.length)&&(t=e.length),t-=n.length;const r=e.indexOf(n,t);return-1!==r&&r===t},toArray:e=>{if(!e)return null;if(Ht(e))return e;let n=e.length;if(!Zt(n))return null;const t=new Array(n);for(;n-- >0;)t[n]=e[n];return t},forEachEntry:(e,n)=>{const t=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=t.next())&&!r.done;){const t=r.value;n.call(e,t[0],t[1])}},matchAll:(e,n)=>{let t;const r=[];for(;null!==(t=e.exec(n));)r.push(t);return r},isHTMLForm:sr,hasOwnProperty:lr,hasOwnProp:lr,reduceDescriptors:ur,freezeMethods:e=>{ur(e,((n,t)=>{if(qt(e)&&-1!==["arguments","caller","callee"].indexOf(t))return!1;const r=e[t];qt(r)&&(n.enumerable=!1,"writable"in n?n.writable=!1:n.set||(n.set=()=>{throw Error("Can not rewrite read-only method '"+t+"'")}))}))},toObjectSet:(e,n)=>{const t={},r=e=>{e.forEach((e=>{t[e]=!0}))};return Ht(e)?r(e):r(String(e).split(n)),t},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,n,t){return n.toUpperCase()+t})),noop:()=>{},toFiniteNumber:(e,n)=>(e=+e,Number.isFinite(e)?e:n),findKey:tr,global:rr,isContextDefined:ar,ALPHABET:fr,generateString:(e=16,n=fr.ALPHA_DIGIT)=>{let t="";const{length:r}=n;for(;e--;)t+=n[Math.random()*r|0];return t},isSpecCompliantForm:function(e){return!!(e&&qt(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const n=new Array(10),t=(e,r)=>{if(Vt(e)){if(n.indexOf(e)>=0)return;if(!("toJSON"in e)){n[r]=e;const a=Ht(e)?[]:{};return nr(e,((e,n)=>{const o=t(e,r+1);!Gt(o)&&(a[n]=o)})),n[r]=void 0,a}}return e};return t(e,0)}};function mr(e,n,t,r,a){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",n&&(this.code=n),t&&(this.config=t),r&&(this.request=r),a&&(this.response=a)}pr.inherits(mr,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:pr.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const hr=mr.prototype,gr={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{gr[e]={value:e}})),Object.defineProperties(mr,gr),Object.defineProperty(hr,"isAxiosError",{value:!0}),mr.from=(e,n,t,r,a,o)=>{const i=Object.create(hr);return pr.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),mr.call(i,e.message,n,t,r,a),i.cause=e,i.name=e.name,o&&Object.assign(i,o),i};const br=mr;function yr(e){return pr.isPlainObject(e)||pr.isArray(e)}function vr(e){return pr.endsWith(e,"[]")?e.slice(0,-2):e}function xr(e,n,t){return e?e.concat(n).map((function(e,n){return e=vr(e),!t&&n?"["+e+"]":e})).join(t?".":""):n}const Er=pr.toFlatObject(pr,{},null,(function(e){return/^is[A-Z]/.test(e)})),wr=function(e,n,t){if(!pr.isObject(e))throw new TypeError("target must be an object");n=n||new FormData;const r=(t=pr.toFlatObject(t,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,n){return!pr.isUndefined(n[e])}))).metaTokens,a=t.visitor||c,o=t.dots,i=t.indexes,s=(t.Blob||"undefined"!=typeof Blob&&Blob)&&pr.isSpecCompliantForm(n);if(!pr.isFunction(a))throw new TypeError("visitor must be a function");function l(e){if(null===e)return"";if(pr.isDate(e))return e.toISOString();if(!s&&pr.isBlob(e))throw new br("Blob is not supported. Use a Buffer instead.");return pr.isArrayBuffer(e)||pr.isTypedArray(e)?s&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function c(e,t,a){let s=e;if(e&&!a&&"object"==typeof e)if(pr.endsWith(t,"{}"))t=r?t:t.slice(0,-2),e=JSON.stringify(e);else if(pr.isArray(e)&&function(e){return pr.isArray(e)&&!e.some(yr)}(e)||(pr.isFileList(e)||pr.endsWith(t,"[]"))&&(s=pr.toArray(e)))return t=vr(t),s.forEach((function(e,r){!pr.isUndefined(e)&&null!==e&&n.append(!0===i?xr([t],r,o):null===i?t:t+"[]",l(e))})),!1;return!!yr(e)||(n.append(xr(a,t,o),l(e)),!1)}const u=[],d=Object.assign(Er,{defaultVisitor:c,convertValue:l,isVisitable:yr});if(!pr.isObject(e))throw new TypeError("data must be an object");return function e(t,r){if(!pr.isUndefined(t)){if(-1!==u.indexOf(t))throw Error("Circular reference detected in "+r.join("."));u.push(t),pr.forEach(t,(function(t,o){!0===(!(pr.isUndefined(t)||null===t)&&a.call(n,t,pr.isString(o)?o.trim():o,r,d))&&e(t,r?r.concat(o):[o])})),u.pop()}}(e),n};function Br(e){const n={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return n[e]}))}function Cr(e,n){this._pairs=[],e&&wr(e,this,n)}const kr=Cr.prototype;kr.append=function(e,n){this._pairs.push([e,n])},kr.toString=function(e){const n=e?function(n){return e.call(this,n,Br)}:Br;return this._pairs.map((function(e){return n(e[0])+"="+n(e[1])}),"").join("&")};const jr=Cr;function Sr(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function _r(e,n,t){if(!n)return e;const r=t&&t.encode||Sr,a=t&&t.serialize;let o;if(o=a?a(n,t):pr.isURLSearchParams(n)?n.toString():new jr(n,t).toString(r),o){const n=e.indexOf("#");-1!==n&&(e=e.slice(0,n)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}const Nr=class{constructor(){this.handlers=[]}use(e,n,t){return this.handlers.push({fulfilled:e,rejected:n,synchronous:!!t&&t.synchronous,runWhen:t?t.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){pr.forEach(this.handlers,(function(n){null!==n&&e(n)}))}},Or={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Tr={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:jr,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},isStandardBrowserEnv:(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),isStandardBrowserWebWorkerEnv:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,protocols:["http","https","file","blob","url","data"]},Pr=function(e){function n(e,t,r,a){let o=e[a++];const i=Number.isFinite(+o),s=a>=e.length;return o=!o&&pr.isArray(r)?r.length:o,s?(pr.hasOwnProp(r,o)?r[o]=[r[o],t]:r[o]=t,!i):(r[o]&&pr.isObject(r[o])||(r[o]=[]),n(e,t,r[o],a)&&pr.isArray(r[o])&&(r[o]=function(e){const n={},t=Object.keys(e);let r;const a=t.length;let o;for(r=0;r<a;r++)o=t[r],n[o]=e[o];return n}(r[o])),!i)}if(pr.isFormData(e)&&pr.isFunction(e.entries)){const t={};return pr.forEachEntry(e,((e,r)=>{n(function(e){return pr.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,t,0)})),t}return null},Rr={"Content-Type":void 0},Ir={transitional:Or,adapter:["xhr","http"],transformRequest:[function(e,n){const t=n.getContentType()||"",r=t.indexOf("application/json")>-1,a=pr.isObject(e);if(a&&pr.isHTMLForm(e)&&(e=new FormData(e)),pr.isFormData(e))return r&&r?JSON.stringify(Pr(e)):e;if(pr.isArrayBuffer(e)||pr.isBuffer(e)||pr.isStream(e)||pr.isFile(e)||pr.isBlob(e))return e;if(pr.isArrayBufferView(e))return e.buffer;if(pr.isURLSearchParams(e))return n.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let o;if(a){if(t.indexOf("application/x-www-form-urlencoded")>-1)return function(e,n){return wr(e,new Tr.classes.URLSearchParams,Object.assign({visitor:function(e,n,t,r){return Tr.isNode&&pr.isBuffer(e)?(this.append(n,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},n))}(e,this.formSerializer).toString();if((o=pr.isFileList(e))||t.indexOf("multipart/form-data")>-1){const n=this.env&&this.env.FormData;return wr(o?{"files[]":e}:e,n&&new n,this.formSerializer)}}return a||r?(n.setContentType("application/json",!1),function(e,n,t){if(pr.isString(e))try{return(0,JSON.parse)(e),pr.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const n=this.transitional||Ir.transitional,t=n&&n.forcedJSONParsing,r="json"===this.responseType;if(e&&pr.isString(e)&&(t&&!this.responseType||r)){const t=!(n&&n.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(t){if("SyntaxError"===e.name)throw br.from(e,br.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Tr.classes.FormData,Blob:Tr.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};pr.forEach(["delete","get","head"],(function(e){Ir.headers[e]={}})),pr.forEach(["post","put","patch"],(function(e){Ir.headers[e]=pr.merge(Rr)}));const Lr=Ir,Mr=pr.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Dr=Symbol("internals");function Fr(e){return e&&String(e).trim().toLowerCase()}function Ur(e){return!1===e||null==e?e:pr.isArray(e)?e.map(Ur):String(e)}function zr(e,n,t,r,a){return pr.isFunction(r)?r.call(this,n,t):(a&&(n=t),pr.isString(n)?pr.isString(r)?-1!==n.indexOf(r):pr.isRegExp(r)?r.test(n):void 0:void 0)}class Hr{constructor(e){e&&this.set(e)}set(e,n,t){const r=this;function a(e,n,t){const a=Fr(n);if(!a)throw new Error("header name must be a non-empty string");const o=pr.findKey(r,a);(!o||void 0===r[o]||!0===t||void 0===t&&!1!==r[o])&&(r[o||n]=Ur(e))}const o=(e,n)=>pr.forEach(e,((e,t)=>a(e,t,n)));return pr.isPlainObject(e)||e instanceof this.constructor?o(e,n):pr.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z]+$/.test(e.trim())?o((e=>{const n={};let t,r,a;return e&&e.split("\n").forEach((function(e){a=e.indexOf(":"),t=e.substring(0,a).trim().toLowerCase(),r=e.substring(a+1).trim(),!t||n[t]&&Mr[t]||("set-cookie"===t?n[t]?n[t].push(r):n[t]=[r]:n[t]=n[t]?n[t]+", "+r:r)})),n})(e),n):null!=e&&a(n,e,t),this}get(e,n){if(e=Fr(e)){const t=pr.findKey(this,e);if(t){const e=this[t];if(!n)return e;if(!0===n)return function(e){const n=Object.create(null),t=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=t.exec(e);)n[r[1]]=r[2];return n}(e);if(pr.isFunction(n))return n.call(this,e,t);if(pr.isRegExp(n))return n.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,n){if(e=Fr(e)){const t=pr.findKey(this,e);return!(!t||void 0===this[t]||n&&!zr(0,this[t],t,n))}return!1}delete(e,n){const t=this;let r=!1;function a(e){if(e=Fr(e)){const a=pr.findKey(t,e);!a||n&&!zr(0,t[a],a,n)||(delete t[a],r=!0)}}return pr.isArray(e)?e.forEach(a):a(e),r}clear(e){const n=Object.keys(this);let t=n.length,r=!1;for(;t--;){const a=n[t];e&&!zr(0,this[a],a,e,!0)||(delete this[a],r=!0)}return r}normalize(e){const n=this,t={};return pr.forEach(this,((r,a)=>{const o=pr.findKey(t,a);if(o)return n[o]=Ur(r),void delete n[a];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,n,t)=>n.toUpperCase()+t))}(a):String(a).trim();i!==a&&delete n[a],n[i]=Ur(r),t[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const n=Object.create(null);return pr.forEach(this,((t,r)=>{null!=t&&!1!==t&&(n[r]=e&&pr.isArray(t)?t.join(", "):t)})),n}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,n])=>e+": "+n)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...n){const t=new this(e);return n.forEach((e=>t.set(e))),t}static accessor(e){const n=(this[Dr]=this[Dr]={accessors:{}}).accessors,t=this.prototype;function r(e){const r=Fr(e);n[r]||(function(e,n){const t=pr.toCamelCase(" "+n);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+t,{value:function(e,t,a){return this[r].call(this,n,e,t,a)},configurable:!0})}))}(t,e),n[r]=!0)}return pr.isArray(e)?e.forEach(r):r(e),this}}Hr.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),pr.freezeMethods(Hr.prototype),pr.freezeMethods(Hr);const Gr=Hr;function Wr(e,n){const t=this||Lr,r=n||t,a=Gr.from(r.headers);let o=r.data;return pr.forEach(e,(function(e){o=e.call(t,o,a.normalize(),n?n.status:void 0)})),a.normalize(),o}function $r(e){return!(!e||!e.__CANCEL__)}function qr(e,n,t){br.call(this,null==e?"canceled":e,br.ERR_CANCELED,n,t),this.name="CanceledError"}pr.inherits(qr,br,{__CANCEL__:!0});const Zr=qr,Vr=Tr.isStandardBrowserEnv?{write:function(e,n,t,r,a,o){const i=[];i.push(e+"="+encodeURIComponent(n)),pr.isNumber(t)&&i.push("expires="+new Date(t).toGMTString()),pr.isString(r)&&i.push("path="+r),pr.isString(a)&&i.push("domain="+a),!0===o&&i.push("secure"),document.cookie=i.join("; ")},read:function(e){const n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function Yr(e,n){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(n)?function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}(e,n):n}const Xr=Tr.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");let t;function r(t){let r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=r(window.location.href),function(e){const n=pr.isString(e)?r(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0};function Kr(e,n){let t=0;const r=function(e,n){e=e||10;const t=new Array(e),r=new Array(e);let a,o=0,i=0;return n=void 0!==n?n:1e3,function(s){const l=Date.now(),c=r[i];a||(a=l),t[o]=s,r[o]=l;let u=i,d=0;for(;u!==o;)d+=t[u++],u%=e;if(o=(o+1)%e,o===i&&(i=(i+1)%e),l-a<n)return;const A=c&&l-c;return A?Math.round(1e3*d/A):void 0}}(50,250);return a=>{const o=a.loaded,i=a.lengthComputable?a.total:void 0,s=o-t,l=r(s);t=o;const c={loaded:o,total:i,progress:i?o/i:void 0,bytes:s,rate:l||void 0,estimated:l&&i&&o<=i?(i-o)/l:void 0,event:a};c[n?"download":"upload"]=!0,e(c)}}const Qr={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(n,t){let r=e.data;const a=Gr.from(e.headers).normalize(),o=e.responseType;let i;function s(){e.cancelToken&&e.cancelToken.unsubscribe(i),e.signal&&e.signal.removeEventListener("abort",i)}pr.isFormData(r)&&(Tr.isStandardBrowserEnv||Tr.isStandardBrowserWebWorkerEnv)&&a.setContentType(!1);let l=new XMLHttpRequest;if(e.auth){const n=e.auth.username||"",t=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";a.set("Authorization","Basic "+btoa(n+":"+t))}const c=Yr(e.baseURL,e.url);function u(){if(!l)return;const r=Gr.from("getAllResponseHeaders"in l&&l.getAllResponseHeaders());!function(e,n,t){const r=t.config.validateStatus;t.status&&r&&!r(t.status)?n(new br("Request failed with status code "+t.status,[br.ERR_BAD_REQUEST,br.ERR_BAD_RESPONSE][Math.floor(t.status/100)-4],t.config,t.request,t)):e(t)}((function(e){n(e),s()}),(function(e){t(e),s()}),{data:o&&"text"!==o&&"json"!==o?l.response:l.responseText,status:l.status,statusText:l.statusText,headers:r,config:e,request:l}),l=null}if(l.open(e.method.toUpperCase(),_r(c,e.params,e.paramsSerializer),!0),l.timeout=e.timeout,"onloadend"in l?l.onloadend=u:l.onreadystatechange=function(){l&&4===l.readyState&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf("file:"))&&setTimeout(u)},l.onabort=function(){l&&(t(new br("Request aborted",br.ECONNABORTED,e,l)),l=null)},l.onerror=function(){t(new br("Network Error",br.ERR_NETWORK,e,l)),l=null},l.ontimeout=function(){let n=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||Or;e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),t(new br(n,r.clarifyTimeoutError?br.ETIMEDOUT:br.ECONNABORTED,e,l)),l=null},Tr.isStandardBrowserEnv){const n=(e.withCredentials||Xr(c))&&e.xsrfCookieName&&Vr.read(e.xsrfCookieName);n&&a.set(e.xsrfHeaderName,n)}void 0===r&&a.setContentType(null),"setRequestHeader"in l&&pr.forEach(a.toJSON(),(function(e,n){l.setRequestHeader(n,e)})),pr.isUndefined(e.withCredentials)||(l.withCredentials=!!e.withCredentials),o&&"json"!==o&&(l.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&l.addEventListener("progress",Kr(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&l.upload&&l.upload.addEventListener("progress",Kr(e.onUploadProgress)),(e.cancelToken||e.signal)&&(i=n=>{l&&(t(!n||n.type?new Zr(null,e,l):n),l.abort(),l=null)},e.cancelToken&&e.cancelToken.subscribe(i),e.signal&&(e.signal.aborted?i():e.signal.addEventListener("abort",i)));const d=function(e){const n=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return n&&n[1]||""}(c);d&&-1===Tr.protocols.indexOf(d)?t(new br("Unsupported protocol "+d+":",br.ERR_BAD_REQUEST,e)):l.send(r||null)}))}};pr.forEach(Qr,((e,n)=>{if(e){try{Object.defineProperty(e,"name",{value:n})}catch(e){}Object.defineProperty(e,"adapterName",{value:n})}}));function Jr(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Zr(null,e)}function ea(e){return Jr(e),e.headers=Gr.from(e.headers),e.data=Wr.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),(e=>{e=pr.isArray(e)?e:[e];const{length:n}=e;let t,r;for(let a=0;a<n&&(t=e[a],!(r=pr.isString(t)?Qr[t.toLowerCase()]:t));a++);if(!r){if(!1===r)throw new br(`Adapter ${t} is not supported by the environment`,"ERR_NOT_SUPPORT");throw new Error(pr.hasOwnProp(Qr,t)?`Adapter '${t}' is not available in the build`:`Unknown adapter '${t}'`)}if(!pr.isFunction(r))throw new TypeError("adapter is not a function");return r})(e.adapter||Lr.adapter)(e).then((function(n){return Jr(e),n.data=Wr.call(e,e.transformResponse,n),n.headers=Gr.from(n.headers),n}),(function(n){return $r(n)||(Jr(e),n&&n.response&&(n.response.data=Wr.call(e,e.transformResponse,n.response),n.response.headers=Gr.from(n.response.headers))),Promise.reject(n)}))}const na=e=>e instanceof Gr?e.toJSON():e;function ta(e,n){n=n||{};const t={};function r(e,n,t){return pr.isPlainObject(e)&&pr.isPlainObject(n)?pr.merge.call({caseless:t},e,n):pr.isPlainObject(n)?pr.merge({},n):pr.isArray(n)?n.slice():n}function a(e,n,t){return pr.isUndefined(n)?pr.isUndefined(e)?void 0:r(void 0,e,t):r(e,n,t)}function o(e,n){if(!pr.isUndefined(n))return r(void 0,n)}function i(e,n){return pr.isUndefined(n)?pr.isUndefined(e)?void 0:r(void 0,e):r(void 0,n)}function s(t,a,o){return o in n?r(t,a):o in e?r(void 0,t):void 0}const l={url:o,method:o,data:o,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:s,headers:(e,n)=>a(na(e),na(n),!0)};return pr.forEach(Object.keys(e).concat(Object.keys(n)),(function(r){const o=l[r]||a,i=o(e[r],n[r],r);pr.isUndefined(i)&&o!==s||(t[r]=i)})),t}const ra={};["object","boolean","number","function","string","symbol"].forEach(((e,n)=>{ra[e]=function(t){return typeof t===e||"a"+(n<1?"n ":" ")+e}}));const aa={};ra.transitional=function(e,n,t){function r(e,n){return"[Axios v1.3.4] Transitional option '"+e+"'"+n+(t?". "+t:"")}return(t,a,o)=>{if(!1===e)throw new br(r(a," has been removed"+(n?" in "+n:"")),br.ERR_DEPRECATED);return n&&!aa[a]&&(aa[a]=!0,console.warn(r(a," has been deprecated since v"+n+" and will be removed in the near future"))),!e||e(t,a,o)}};const oa={assertOptions:function(e,n,t){if("object"!=typeof e)throw new br("options must be an object",br.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let a=r.length;for(;a-- >0;){const o=r[a],i=n[o];if(i){const n=e[o],t=void 0===n||i(n,o,e);if(!0!==t)throw new br("option "+o+" must be "+t,br.ERR_BAD_OPTION_VALUE)}else if(!0!==t)throw new br("Unknown option "+o,br.ERR_BAD_OPTION)}},validators:ra},ia=oa.validators;class sa{constructor(e){this.defaults=e,this.interceptors={request:new Nr,response:new Nr}}request(e,n){"string"==typeof e?(n=n||{}).url=e:n=e||{},n=ta(this.defaults,n);const{transitional:t,paramsSerializer:r,headers:a}=n;let o;void 0!==t&&oa.assertOptions(t,{silentJSONParsing:ia.transitional(ia.boolean),forcedJSONParsing:ia.transitional(ia.boolean),clarifyTimeoutError:ia.transitional(ia.boolean)},!1),void 0!==r&&oa.assertOptions(r,{encode:ia.function,serialize:ia.function},!0),n.method=(n.method||this.defaults.method||"get").toLowerCase(),o=a&&pr.merge(a.common,a[n.method]),o&&pr.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete a[e]})),n.headers=Gr.concat(o,a);const i=[];let s=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(n)||(s=s&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const l=[];let c;this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)}));let u,d=0;if(!s){const e=[ea.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,l),u=e.length,c=Promise.resolve(n);d<u;)c=c.then(e[d++],e[d++]);return c}u=i.length;let A=n;for(d=0;d<u;){const e=i[d++],n=i[d++];try{A=e(A)}catch(e){n.call(this,e);break}}try{c=ea.call(this,A)}catch(e){return Promise.reject(e)}for(d=0,u=l.length;d<u;)c=c.then(l[d++],l[d++]);return c}getUri(e){return _r(Yr((e=ta(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}pr.forEach(["delete","get","head","options"],(function(e){sa.prototype[e]=function(n,t){return this.request(ta(t||{},{method:e,url:n,data:(t||{}).data}))}})),pr.forEach(["post","put","patch"],(function(e){function n(n){return function(t,r,a){return this.request(ta(a||{},{method:e,headers:n?{"Content-Type":"multipart/form-data"}:{},url:t,data:r}))}}sa.prototype[e]=n(),sa.prototype[e+"Form"]=n(!0)}));const la=sa;class ca{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let n;this.promise=new Promise((function(e){n=e}));const t=this;this.promise.then((e=>{if(!t._listeners)return;let n=t._listeners.length;for(;n-- >0;)t._listeners[n](e);t._listeners=null})),this.promise.then=e=>{let n;const r=new Promise((e=>{t.subscribe(e),n=e})).then(e);return r.cancel=function(){t.unsubscribe(n)},r},e((function(e,r,a){t.reason||(t.reason=new Zr(e,r,a),n(t.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const n=this._listeners.indexOf(e);-1!==n&&this._listeners.splice(n,1)}static source(){let e;return{token:new ca((function(n){e=n})),cancel:e}}}const ua=ca,da={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(da).forEach((([e,n])=>{da[n]=e}));const Aa=da,fa=function e(n){const t=new la(n),r=It(la.prototype.request,t);return pr.extend(r,la.prototype,t,{allOwnKeys:!0}),pr.extend(r,t,null,{allOwnKeys:!0}),r.create=function(t){return e(ta(n,t))},r}(Lr);fa.Axios=la,fa.CanceledError=Zr,fa.CancelToken=ua,fa.isCancel=$r,fa.VERSION="1.3.4",fa.toFormData=wr,fa.AxiosError=br,fa.Cancel=fa.CanceledError,fa.all=function(e){return Promise.all(e)},fa.spread=function(e){return function(n){return e.apply(null,n)}},fa.isAxiosError=function(e){return pr.isObject(e)&&!0===e.isAxiosError},fa.mergeConfig=ta,fa.AxiosHeaders=Gr,fa.formToJSON=e=>Pr(pr.isHTMLForm(e)?new FormData(e):e),fa.HttpStatusCode=Aa,fa.default=fa;const pa=fa,ma=pa.create({baseURL:Rt}),ha=pa.create({baseURL:Rt});ha.interceptors.request.use((e=>(e.headers.authorization=`Bearer ${localStorage.getItem("token")}`,e)));var ga=function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}l((r=r.apply(e,n||[])).next())}))};const ba=()=>ga(void 0,void 0,void 0,(function*(){try{return(yield ha.get(`${Nt}/${Ot}/${Tt}`,{withCredentials:!0})).data}catch(e){console.log(e)}})),ya="SHOW_MODAL",va="HIDE_MODAL",xa="SHOW_SIGNUP",Ea="HIDE_SIGNUP",wa="CHANGE_LANGUAGE",Ba="UPDATE_USER",Ca="UPDATE_TOKEN",ka="LOGGINUSER",ja="LOGGIN",Sa="LOGOUT",_a="ADD_RESULT",Na="UPDATE_ALL_RESULTS",Oa="ADD_CATEGORY",Ta="DELETE_CATEGORY",Pa="UPDATE_CATEGORIES";var Ra=a(1688),Ia=a(2798),La=a(3935);let Ma=function(e){e()};const Da=()=>Ma,Fa=(0,X.createContext)(null);function Ua(){return(0,X.useContext)(Fa)}let za=()=>{throw new Error("uSES not initialized!")};const Ha=(e,n)=>e===n;function Ga(e=Fa){const n=e===Fa?Ua:()=>(0,X.useContext)(e);return function(e,t=Ha){const{store:r,subscription:a,getServerState:o}=n(),i=za(a.addNestedSub,r.getState,o||r.getState,e,t);return(0,X.useDebugValue)(i),i}}const Wa=Ga();a(2973);const $a={notify(){},get:()=>[]};const qa="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?X.useLayoutEffect:X.useEffect;let Za=null;function Va(e=Fa){const n=e===Fa?Ua:()=>(0,X.useContext)(e);return function(){const{store:e}=n();return e}}const Ya=Va();function Xa(e=Fa){const n=e===Fa?Ya:Va(e);return function(){return n().dispatch}}const Ka=Xa();var Qa,Ja;Qa=Ia.useSyncExternalStoreWithSelector,za=Qa,(e=>{Za=e})(Ra.useSyncExternalStore),Ja=La.unstable_batchedUpdates,Ma=Ja;const eo=Wa,no=()=>Ka(),to=e=>{const n=[];for(let t of e){const e=new Date(t.createdAt).toDateString();n.includes(e)||n.push(e)}return n};function ro(){return ro=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},ro.apply(this,arguments)}function ao(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((n,t)=>{let r=e[t];return n.concat(Array.isArray(r)?r.map((e=>[t,e])):[[t,r]])}),[]))}const oo=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],io=X.forwardRef((function(e,n){let{onClick:t,relative:r,reloadDocument:a,replace:o,state:i,target:s,to:l,preventScrollReset:c}=e,u=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,oo),d=function(e,n){let{relative:t}=void 0===n?{}:n;ue()||v(!1);let{basename:r,navigator:a}=X.useContext(ie),{hash:o,pathname:i,search:s}=fe(e,{relative:t}),l=i;return"/"!==r&&(l="/"===i?r:z([r,i])),a.createHref({pathname:l,search:s,hash:o})}(l,{relative:r}),A=function(e,n){let{target:t,replace:r,state:a,preventScrollReset:o,relative:i}=void 0===n?{}:n,s=Ae(),l=de(),c=fe(e,{relative:i});return X.useCallback((n=>{if(function(e,n){return!(0!==e.button||n&&"_self"!==n||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(n,t)){n.preventDefault();let t=void 0!==r?r:w(l)===w(c);s(e,{replace:t,state:a,preventScrollReset:o,relative:i})}}),[l,s,c,r,a,t,e,o,i])}(l,{replace:o,state:i,target:s,preventScrollReset:c,relative:r});return X.createElement("a",ro({},u,{href:d,onClick:a?t:function(e){t&&t(e),e.defaultPrevented||A(e)},ref:n,target:s}))}));var so,lo;function co(e){let n=X.useRef(ao(e)),t=de(),r=X.useMemo((()=>function(e,n){let t=ao(e);for(let e of n.keys())t.has(e)||n.getAll(e).forEach((n=>{t.append(e,n)}));return t}(t.search,n.current)),[t.search]),a=Ae(),o=X.useCallback(((e,n)=>{const t=ao("function"==typeof e?e(r):e);a("?"+t,n)}),[a,r]);return[r,o]}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(so||(so={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(lo||(lo={}));var uo=function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}l((r=r.apply(e,n||[])).next())}))};const Ao=()=>uo(void 0,void 0,void 0,(function*(){try{return(yield ha.get(`${Nt}/${Ot}/${Pt}`,{withCredentials:!0})).data}catch(e){console.log(e)}})),fo=(e,n)=>{const t=Math.ceil(e),r=Math.floor(n);return Math.floor(Math.random()*(r-t+1)+t)},po=[{color:"text-red-500",meaning:"red",border:"border-red-500"},{color:"text-blue-500",meaning:"blue",border:"border-blue-500"},{color:"text-yellow-500",meaning:"yellow",border:"border-yellow-500"},{color:"text-black",meaning:"black",border:"border-black"}],mo=({seconds:e,statusGame:t,setStatusGame:r,setSeconds:a})=>(setTimeout((()=>{e>0&&"Started"===t&&a(e-1),e<=1&&"Started"===t&&r("Finished")}),1e3),(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("p",{children:(0,n.jsx)(wt,{id:"time_left",values:{n:e}})})})),ho=(a.p,a.p,({statusGame:e,setStatusGame:t})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("button",Object.assign({className:"mr-3 flex h-[50px] w-[150px] items-center justify-around self-center rounded-lg border-8 border-blue-300  bg-gray-200 align-middle",onClick:()=>t("Started"===e?"Paused":"Started")},{children:["Paused"!==e?(0,n.jsx)(wt,{id:"pause"}):(0,n.jsx)(wt,{id:"play"}),(0,n.jsx)("img",{className:"h-[34px] w-[34px] bg-blue-300",src:"Paused"===e?"play.png":"pause.jpeg"})]}))}));var go=a(89),bo={};bo.styleTagTransform=m(),bo.setAttributes=d(),bo.insert=c().bind(null,"head"),bo.domAPI=s(),bo.insertStyleElement=f(),o()(go.Z,bo),go.Z&&go.Z.locals&&go.Z.locals;const yo=({statusGame:e,setStatusGame:t,startGame:r,startName:a="start"})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("button",Object.assign({className:"Finished"===e?"mt-2 rounded-full border px-4 text-xl hover:bg-red-200":"mr-3 flex h-[40px] w-[150px] items-center justify-around self-center rounded-lg  bg-gray-300 align-middle duration-300 hover:bg-red-200",onClick:()=>{"Started"!==e?(r(),t("Started")):t("Finished")}},{children:"Started"===e?(0,n.jsx)(wt,{id:"stop"}):(0,n.jsx)(wt,{id:a})}))}),vo=({val:e,callback:t,disabled:r})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("button",Object.assign({className:"mr-3 h-[50px] w-[80px] rounded-lg border bg-blue-400 duration-300 hover:bg-red-200",onClick:t,disabled:r},{children:(0,n.jsx)(wt,{id:e})}))});const xo=({score:e,rightAnswers:t,totalAnswers:r,speed:a,statusGame:o,setStatusGame:i,startGame:s,gameID:l,gameName:c,resultsName:u})=>{const d=no(),A=()=>{return n=void 0,t=void 0,a=function*(){if(0!==e&&"Finished"===o){const t=yield(n={gameId:l,value:e},ga(void 0,void 0,void 0,(function*(){try{return(yield ha.post(`${Nt}/${Ot}/${Tt}`,n,{withCredentials:!0})).data}catch(e){console.log(e)}})));t&&(console.log("res",t),d({payload:[{gameId:t.gameId,value:t.value,createdAt:t.createdAt,userId:t.userId,id:t.id}],type:_a}));let r=0;const a=localStorage.getItem(c);return a&&(r=e>Number(a)?e:Number(a)),localStorage.setItem(c,String(r)),t}var n},new((r=void 0)||(r=Promise))((function(e,o){function i(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(n){var t;n.done?e(n.value):(t=n.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,s)}l((a=a.apply(n,t||[])).next())}));var n,t,r,a};return(0,X.useEffect)((()=>{"Finished"===o&&A()}),[o]),(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"finish-game click-area time-container h-full w-full",style:{background:"rgb(59 130 246 / 0.5)"}},{children:[(0,n.jsx)("p",Object.assign({className:"upper-case"},{children:(0,n.jsx)(wt,{id:c})})),(0,n.jsx)("p",{children:(0,n.jsx)(wt,{id:`${u||"score"}`,values:{n:e}})}),0!==t&&(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("p",{children:(0,n.jsx)(wt,{id:"correct_answers",values:{n:t,m:r}})}),(0,n.jsx)("p",{children:(0,n.jsx)(wt,{id:"accuracy",values:{n:(100*t/r).toFixed(0)}})})]}),(0,n.jsx)("p",{children:0!==a&&(0,n.jsx)(wt,{id:"average_speed",values:{n:(a/r).toFixed(0)}})}),(0,n.jsx)(yo,{startGame:s,setStatusGame:i,statusGame:o})]}))})},Eo=({setStatusGame:e,startGame:t})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("button",Object.assign({className:"mr-3 h-[50px] w-[150px] self-center rounded-lg border-8 border-blue-300 bg-gray-200",onClick:()=>{e("Started"),t()}},{children:(0,n.jsx)(wt,{id:"start_again"})}))});var wo=a(2167),Bo={};Bo.styleTagTransform=m(),Bo.setAttributes=d(),Bo.insert=c().bind(null,"head"),Bo.domAPI=s(),Bo.insertStyleElement=f(),o()(wo.Z,Bo),wo.Z&&wo.Z.locals&&wo.Z.locals;const Co=({setStatusGame:e,statusGame:t,startGame:r})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"pause-wrap"},{children:[(0,n.jsx)(ho,{statusGame:t,setStatusGame:e}),(0,n.jsx)(Eo,{setStatusGame:e,startGame:r})]}))}),ko="en",jo="rus";var So=a(7754),_o={};_o.styleTagTransform=m(),_o.setAttributes=d(),_o.insert=c().bind(null,"head"),_o.domAPI=s(),_o.insertStyleElement=f(),o()(So.Z,_o),So.Z&&So.Z.locals&&So.Z.locals;const No=({gameName:e,statusGame:t,setStatusGame:r,startGame:a,gameDescription:o,setHowToPlay:i,gameImgRus:s,gameImgEn:l})=>{const[c,u]=(0,X.useState)(l),d=eo((e=>e.userInfo));return(0,X.useEffect)((()=>{u(d.lang===ko?l:s)}),[d.lang]),(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"prestart-container"},{children:[(0,n.jsx)("div",Object.assign({className:"name-of-the-game"},{children:(0,n.jsx)(wt,{id:e})})),c&&(0,n.jsx)("img",{className:"prestart-image",src:`${c}`}),(0,n.jsx)("div",Object.assign({className:"game-description"},{children:(0,n.jsx)(wt,{id:o})})),(0,n.jsxs)("div",Object.assign({className:"buttons-prestart"},{children:[i&&(0,n.jsx)("button",Object.assign({className:"how-to-play-button duration-300 hover:bg-red-200",onClick:()=>{i(!0)}},{children:(0,n.jsx)(wt,{id:"how_to_play"})})),(0,n.jsx)(yo,{startGame:a,setStatusGame:r,statusGame:t})]}))]}))})},Oo=({howToPlay:e,setHowToPlay:t,setStatusGame:r})=>{const[a,o]=(0,X.useState)(2),[i,s]=(0,X.useState)(0),[l,c]=(0,X.useState)(0),[u,d]=(0,X.useState)("right-now"),[A,f]=(0,X.useState)("wrong-now"),[p]=(0,X.useState)(""),[m,h]=(0,X.useState)(!0),[g,b]=(0,X.useState)(!1),[y,v]=(0,X.useState)(""),[x,E]=(0,X.useState)(0);console.log(e);const w=()=>{E(x+1),console.log("count",x),x>3?(f(""),d(""),b(!0),h(!0),v("right-now")):x%2==0?(c(1),s(1),d("right-now"),b(!1),h(!0),f("wrong-now"),o(2)):(c(3),s(2),o(0),f("right-now"),d("wrong-now"),b(!0),h(!1))};return(0,n.jsxs)(n.Fragment,{children:[" ",(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"flex h-full flex-col justify-around"},{children:[(0,n.jsxs)("div",Object.assign({className:"how-to-play flex h-2/3 flex-col"},{children:[(0,n.jsx)("p",Object.assign({className:"mb-5 text-center text-xl text-gray-700"},{children:(0,n.jsx)(wt,{id:"how_to_play"})})),(0,n.jsx)("p",Object.assign({className:"mb-5 text-center text-xl text-blue-900"},{children:(0,n.jsx)(wt,{id:"how_color"})})),(0,n.jsxs)("div",Object.assign({className:"inside-wrap flex h-full flex-col justify-center"},{children:[(0,n.jsxs)("div",Object.assign({className:"mb-10 flex justify-center"},{children:[(0,n.jsx)("div",Object.assign({className:`left-part mr-5 flex h-[100px] w-[45%] justify-center border-4 ${po[a].border} align-middle `},{children:(0,n.jsx)("p",Object.assign({className:`flex  items-center justify-center text-center text-5xl uppercase ${po[a].color}`},{children:(0,n.jsx)(wt,{id:po[l].meaning})}))})),(0,n.jsx)("div",Object.assign({className:`left-part  flex h-[100px] w-[45%] justify-center border-4 ${po[i].border} align-middle `},{children:(0,n.jsx)("p",Object.assign({className:`flex items-center justify-center text-center text-5xl uppercase ${po[i].color}`},{children:"----"}))}))]})),(0,n.jsxs)("div",Object.assign({className:"buttons flex w-[100%] justify-center"},{children:[(0,n.jsx)("button",Object.assign({className:`${A} no-answ-demo mr-3 h-[50px] w-[80px] rounded-lg border ${p} bg-blue-400`,onClick:w,disabled:m},{children:(0,n.jsx)(wt,{id:"no"})})),(0,n.jsx)("button",Object.assign({className:`${u} yes-answ-demo h-[50px] w-[80px] rounded-lg border ${p} bg-blue-400`,onClick:w,disabled:g},{children:(0,n.jsx)(wt,{id:"yes"})}))]}))]}))]})),(0,n.jsx)("button",Object.assign({onClick:()=>{t(!1),r("Started")},className:` ${y} mr-3 h-[50px] w-[150px] self-center rounded-lg border bg-red-400`},{children:(0,n.jsx)(wt,{id:"start_game"})}))]}))})]})};var To=a(269),Po={};Po.styleTagTransform=m(),Po.setAttributes=d(),Po.insert=c().bind(null,"head"),Po.domAPI=s(),Po.insertStyleElement=f(),o()(To.Z,Po),To.Z&&To.Z.locals&&To.Z.locals;const Ro=({callback:e,text:t})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("button",Object.assign({className:"number-game__start h-[40px] w-[150px] rounded-lg  bg-blue-300 duration-300 hover:bg-red-200",onClick:e},{children:(0,n.jsx)(wt,{id:t})}))});var Io=a(8260),Lo={};Lo.styleTagTransform=m(),Lo.setAttributes=d(),Lo.insert=c().bind(null,"head"),Lo.domAPI=s(),Lo.insertStyleElement=f(),o()(Io.Z,Lo),Io.Z&&Io.Z.locals&&Io.Z.locals;const Mo=e=>{let n="";for(let t=0;t<e;t+=1)n+=String(Math.trunc(9*Math.random()));return String(n)};var Do,Fo=a(4573),Uo={};Uo.styleTagTransform=m(),Uo.setAttributes=d(),Uo.insert=c().bind(null,"head"),Uo.domAPI=s(),Uo.insertStyleElement=f(),o()(Fo.Z,Uo),Fo.Z&&Fo.Z.locals&&Fo.Z.locals,a.p,a.p,function(e){e[e.StartGame=1]="StartGame",e[e.WaitClick=2]="WaitClick",e[e.Click=3]="Click",e[e.ClickResult=4]="ClickResult",e[e.TotalResult=5]="TotalResult",e[e.MissClick=6]="MissClick"}(Do||(Do={}));var zo=a(2925),Ho={};function Go(){let e=Math.trunc(9*Math.random());return 9===e&&(e=8),e}Ho.styleTagTransform=m(),Ho.setAttributes=d(),Ho.insert=c().bind(null,"head"),Ho.domAPI=s(),Ho.insertStyleElement=f(),o()(zo.Z,Ho),zo.Z&&zo.Z.locals&&zo.Z.locals,a.p,a.p,a.p,a.p,a.p;const Wo=[{src:"triangle-red.jpeg",name:"triangle"},{src:"yellow.png",name:"rhombus"},{src:"rectangle-blue.png",name:"rectangle"},{src:"circle-yellow.jpeg",name:"circle"}];var $o=a(6109),qo={};qo.styleTagTransform=m(),qo.setAttributes=d(),qo.insert=c().bind(null,"head"),qo.domAPI=s(),qo.insertStyleElement=f(),o()($o.Z,qo),$o.Z&&$o.Z.locals&&$o.Z.locals;const Zo=({card:e})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("div",Object.assign({className:"speed-match-card bg h-[200px]  w-[200px] border-4 border-sky-700"},{children:(0,n.jsx)("img",{className:"h-auto w-[200px] bg-white",src:`${e.src}`,alt:`${e.name}`})}),e.name)});a.p;var Vo=a(8324),Yo=a.n(Vo),Xo=a(4133),Ko={};Ko.styleTagTransform=m(),Ko.setAttributes=d(),Ko.insert=c().bind(null,"head"),Ko.domAPI=s(),Ko.insertStyleElement=f(),o()(Xo.Z,Ko),Xo.Z&&Xo.Z.locals&&Xo.Z.locals,a.p,a.p,a.p,a.p,a.p,a.p,a.p,a.p,a.p;const Qo=[{src:"circle.png",matched:!1},{src:"diamond.png",matched:!1},{src:"parallelogram.png",matched:!1},{src:"pentagon.png",matched:!1},{src:"rectangle.png",matched:!1},{src:"square.png",matched:!1},{src:"trapezoid.png",matched:!1},{src:"triangle.png",matched:!1}];var Jo=a(5573),ei={};function ni({card:e,handleSelect:t,flip:r,disabled:a}){return(0,n.jsx)("div",Object.assign({className:"card"},{children:(0,n.jsxs)("div",Object.assign({className:r?"flipped":"shake"},{children:[(0,n.jsx)("img",{src:e.src,alt:"front-card",className:"front-card w-20 first-line:h-20"}),(0,n.jsx)("img",{src:"question.png",alt:"back-card",className:"back-card w-20 first-line:h-20",onClick:()=>{a||t(e)}})]}))}))}ei.styleTagTransform=m(),ei.setAttributes=d(),ei.insert=c().bind(null,"head"),ei.domAPI=s(),ei.insertStyleElement=f(),o()(Jo.Z,ei),Jo.Z&&Jo.Z.locals&&Jo.Z.locals;var ti=a(6284),ri={};ri.styleTagTransform=m(),ri.setAttributes=d(),ri.insert=c().bind(null,"head"),ri.domAPI=s(),ri.insertStyleElement=f(),o()(ti.Z,ri),ti.Z&&ti.Z.locals&&ti.Z.locals;const ai=()=>[...Qo,...Qo].sort((()=>Math.random()-.5)).map((e=>Object.assign(Object.assign({},e),{id:Math.random()})));a.p,a.p,a.p,a.p,a.p,a.p,a.p,a.p,a.p,a.p,a.p,a.p,a.p,a.p,a.p;const oi=[{id:1,name:(0,n.jsx)(wt,{id:"reaction_time"}),path:"reaction-time",category:"speed",categoryName:(0,n.jsx)(wt,{id:"speed"}),gameDescription:"reaction_time_description",srcEn:"reaction-time-en.png",game:function({gameId:e}){const t=(0,X.useRef)(null),[r,a]=(0,X.useState)(null),[o,i]=(0,X.useState)(Do.StartGame),[s,l]=(0,X.useState)([]),[c,u]=(0,X.useState)("Wait"),d=(e,n)=>{let t=Math.floor(Math.random()*Math.floor(n))+e;return t*=1e3,t},A=()=>{u("Started"),i(Do.WaitClick),t.current=setTimeout((()=>{i(Do.Click),a(new Date)}),d(1,5))};return(0,n.jsxs)("div",Object.assign({className:"container"},{children:[o===Do.StartGame&&(0,n.jsxs)("div",Object.assign({className:"click-area time-container",style:{background:"rgb(59 130 246 / 0.5)"},onClick:()=>A()},{children:[(0,n.jsxs)("h1",Object.assign({className:"flex items-center"},{children:[(0,n.jsx)("img",{src:"lightning.png",alt:"121",width:100,className:"mb-5"})," ",(0,n.jsx)(wt,{id:"reaction_time_test"})]})),(0,n.jsx)("h2",{children:(0,n.jsx)(wt,{id:"reaction_time_description"})}),(0,n.jsx)("h3",{children:(0,n.jsx)(wt,{id:"click_for_start"})})]})),o===Do.WaitClick&&(0,n.jsx)("div",Object.assign({className:"click-area time-container",style:{background:"red"},onClick:()=>(clearTimeout(t.current),void i(Do.MissClick))},{children:(0,n.jsx)("p",Object.assign({className:"click-text"},{children:(0,n.jsx)(wt,{id:"wait_for_green"})}))})),o===Do.MissClick&&(0,n.jsx)("div",Object.assign({className:"click-area time-container",style:{background:"rgb(59 130 246 / 0.5)"},onClick:()=>A()},{children:(0,n.jsxs)("div",Object.assign({className:"flex flex-col items-center"},{children:[(0,n.jsx)("p",Object.assign({className:"click-text"},{children:(0,n.jsx)(wt,{id:"too_soon"})})),(0,n.jsx)("p",Object.assign({className:"click-text"},{children:(0,n.jsx)(wt,{id:"click_to_try_again"})}))]}))})),o===Do.Click&&(0,n.jsx)("div",Object.assign({className:"click-area",style:{background:"rgb(75, 219, 106)"},onClick:()=>{const e=new Date,n=r.getTime(),t=e.getTime();l((e=>[...e,t-n])),i(Do.ClickResult)}},{children:(0,n.jsx)("p",Object.assign({className:"click-text"},{children:"Click!"}))})),o===Do.ClickResult&&(0,n.jsx)("div",Object.assign({className:"click-area",style:{background:"blue"},onClick:()=>{5===s.length?(u("Finished"),i(Do.TotalResult),localStorage.setItem("bestReactionScore",JSON.stringify(s.reduce(((e,n)=>e<n?e:n))))):(t.current=setTimeout((()=>{i(Do.Click),a(new Date)}),d(1,5)),i(Do.WaitClick))}},{children:(0,n.jsxs)("div",Object.assign({className:"time-container"},{children:[(0,n.jsx)("img",{src:"clock.png",alt:"121",className:"mb-5"}),(0,n.jsx)("p",{children:(0,n.jsx)(wt,{id:"your_reaction_time",values:{n:s[s.length-1]}})}),(0,n.jsx)("p",{}),(0,n.jsx)("p",Object.assign({className:"small-text"},{children:(0,n.jsx)(wt,{id:"click_to_keep_going"})}))]}))})),o===Do.TotalResult&&(0,n.jsx)("div",Object.assign({className:"click-area time-container",style:{background:"rgb(59 130 246 / 0.5)"}},{children:(0,n.jsx)(xo,{score:s.reduce(((e,n)=>e<n?e:n)),speed:0,startGame:()=>{u("Started"),l([]),i(Do.StartGame),console.log(e)},statusGame:c,setStatusGame:u,rightAnswers:0,totalAnswers:0,gameID:e,gameName:"reaction_time_test",resultsName:"your_best_reaction_time"})}))]}))}},{id:2,name:(0,n.jsx)(wt,{id:"sequence_memory"}),path:"sequence-memory",category:"memory",categoryName:(0,n.jsx)(wt,{id:"memory"}),srcEn:"sequence-memory-en.png",srcRus:"sequence-memory-en.png",game:function({gameId:e,srcEn:t,srcRus:r}){const[a,o]=(0,X.useState)([]),[i,s]=(0,X.useState)({num:0,id:0}),[l,c]=(0,X.useState)("Wait"),[u,d]=(0,X.useState)(1),A=[(0,X.useRef)(null),(0,X.useRef)(null),(0,X.useRef)(null),(0,X.useRef)(null),(0,X.useRef)(null),(0,X.useRef)(null),(0,X.useRef)(null),(0,X.useRef)(null),(0,X.useRef)(null)],f=(0,X.useRef)(null);function p(e){e&&(e.classList.add("active"),setTimeout((()=>{e.classList.remove("active")}),350))}function m(e){f.current&&(f.current.classList.add("disabled"),e.forEach(((e,n)=>{setTimeout((()=>{p(A[e].current)}),750*n)})),setTimeout((()=>{f.current&&f.current.classList.remove("disabled")}),750*(e.length-1)))}function h(){c("Started"),d(1),o((e=>{const n=Go();return e.push(n),s({num:n,id:0}),setTimeout((()=>{m(e)}),500),e}))}function g(){c("Finished"),s({num:0,id:0}),o([])}function b(e){return()=>{if(p(A[e].current),i.num===e){if(i.id===a.length-1)return d((e=>e+1)),void o((e=>{const n=Go();return e.push(n),s({num:e[0],id:0}),setTimeout((()=>{m(e)}),1e3),e}));s({num:a[i.id+1],id:i.id+1})}else g()}}return(0,n.jsxs)(n.Fragment,{children:["Finished"!==l&&"Wait"!==l&&(0,n.jsxs)("div",Object.assign({className:"sequence-memory__warp"},{children:[(0,n.jsxs)("div",Object.assign({className:"sequence-memory__header"},{children:[(0,n.jsx)("div",Object.assign({className:"sequence-memory__title first-letter:uppercase"},{children:"Sequence memory"})),(0,n.jsx)("div",Object.assign({className:"sequence-memory__description"},{children:(0,n.jsx)(wt,{id:"sequence_memory_description"})}))]})),"Started"===l&&(0,n.jsxs)("div",Object.assign({className:"sequence-memory__container"},{children:[("Started"===l||"Finished"===l)&&(0,n.jsxs)("div",Object.assign({className:"sequence-memory__score"},{children:[(0,n.jsx)(wt,{id:"level"})," ",u]})),(0,n.jsx)("div",Object.assign({ref:f,className:"sequence-memory__field"},{children:[0,1,2,3,4,5,6,7,8].map((e=>(0,n.jsx)("button",{ref:A[e],onClick:b(e),className:"sequence-memory__field-btn"},e)))}))]})),"Started"!==l&&(0,n.jsx)(Ro,{text:"start",callback:h}),"Started"===l&&(0,n.jsx)(Ro,{text:"stop",callback:g})]})),"Wait"===l&&(0,n.jsx)(No,{startGame:h,setStatusGame:c,gameName:"sequence_memory",statusGame:l,gameDescription:"sequence_memory_description",gameImgRus:r,gameImgEn:t}),"Finished"===l&&(0,n.jsx)(xo,{score:u,rightAnswers:0,totalAnswers:0,speed:0,statusGame:l,setStatusGame:c,startGame:h,gameName:"sequence_memory",gameID:e})]})}},{id:3,name:(0,n.jsx)(wt,{id:"aim_trainer"}),path:"Aim-trainer",category:"speed",srcEn:"work-in-progress.png",srcRus:"work-in-progress.png",categoryName:(0,n.jsx)(wt,{id:"speed"}),game:({gameName:e})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"prestart-container"},{children:[(0,n.jsx)("div",Object.assign({className:"name-of-the-game"},{children:e})),(0,n.jsx)("img",{src:"work-in-progress-2.png",className:"mb-6 w-56"}),(0,n.jsx)("div",Object.assign({className:"game-description"},{children:(0,n.jsx)(wt,{id:"game_in_development"})}))]}))})},{id:4,name:(0,n.jsx)(wt,{id:"chimp_test"}),path:"Chimp-test",category:"problem_solving",srcEn:"work-in-progress.png",srcRus:"work-in-progress.png",categoryName:(0,n.jsx)(wt,{id:"problem_solving"}),game:({gameName:e})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"prestart-container"},{children:[(0,n.jsx)("div",Object.assign({className:"name-of-the-game"},{children:e})),(0,n.jsx)("img",{src:"work-in-progress-2.png",className:"mb-6 w-56"}),(0,n.jsx)("div",Object.assign({className:"game-description"},{children:(0,n.jsx)(wt,{id:"game_in_development"})}))]}))})},{id:5,name:(0,n.jsx)(wt,{id:"number_memory"}),path:"number-memory",category:"memory",categoryName:(0,n.jsx)(wt,{id:"memory"}),game:function({gameId:e,srcEn:t,srcRus:r}){const{lang:a}=eo((e=>e.userInfo)),{loggedIn:o}=eo((e=>e.loggedInInfo)),[i,s]=(0,X.useState)(1),[l,c]=(0,X.useState)(""),[u,d]=(0,X.useState)(0),[A,f]=(0,X.useState)(!1),[p,m]=(0,X.useState)("Wait"),[h,g]=(0,X.useState)(1),[b,y]=(0,X.useState)(""),[v,x]=(0,X.useState)(),[E,w]=(0,X.useState)(),B=()=>{g(1),m("Started"),s(1),c(Mo(i)),d(5),f(!0),E&&clearTimeout(E),w(setTimeout((()=>{d((e=>e-1))}),1e3))},C=()=>{b===l?(g((e=>e+1)),s((e=>e+1)),c(Mo(i+1)),d(5),f(!0),y("")):m("Finished")};return(0,X.useEffect)((()=>{o&&ga(void 0,void 0,void 0,(function*(){try{return(yield ha.get(`${Nt}/${Ot}/${Tt}/best?gameId=5&sort=DESC`,{withCredentials:!0})).data}catch(e){console.log(e)}})).then((e=>{e&&x(e.value)})).catch((()=>{const e=localStorage.getItem("number_memory");e&&x(Number(e))}));const e=localStorage.getItem("number_memory");e&&x(Number(e))}),[]),(0,X.useEffect)((()=>{u>0&&A&&(E&&clearTimeout(E),w(setTimeout((()=>{d((e=>e-1))}),1e3))),0===u&&A&&(f(!1),clearTimeout(E),w(void 0))}),[u]),(0,n.jsxs)(n.Fragment,{children:["Finished"!==p&&"Wait"!==p&&(0,n.jsxs)("div",Object.assign({className:"number-game__wrap"},{children:[(0,n.jsxs)("div",{children:[(0,n.jsxs)("div",Object.assign({className:"number-game__header"},{children:[(0,n.jsx)("div",Object.assign({className:"number-game__title first-letter:uppercase"},{children:(0,n.jsx)(wt,{id:"number_memory"})})),(0,n.jsx)("div",Object.assign({className:"number-game__description"},{children:(0,n.jsx)(wt,{id:"remember_number"})})),void 0!==v&&0!==v&&(0,n.jsx)("div",Object.assign({className:"number-game__best-result"},{children:(0,n.jsx)(wt,{id:"your_best_result",values:{n:v}})}))]})),(0,n.jsx)("div",Object.assign({className:"number-game__container"},{children:(0,n.jsxs)("div",Object.assign({className:"number-game__container-inner"},{children:["Started"===p&&(0,n.jsxs)("div",Object.assign({className:"number-game__score"},{children:[(0,n.jsx)(wt,{id:"level"})," ",h]})),"Started"===p&&(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"number-game__inner"},{children:[A&&(0,n.jsxs)("div",Object.assign({className:"number-game__remember"},{children:[(0,n.jsx)("div",Object.assign({className:"number-game__number"},{children:l})),(0,n.jsx)("div",Object.assign({className:"number-game__timer"},{children:u}))]})),!A&&(0,n.jsxs)("div",Object.assign({className:"number-game__input"},{children:[(0,n.jsx)("input",{value:b,onChange:e=>{y(e.target.value)},type:"text",onKeyUp:e=>{"Enter"===e.key&&C()},placeholder:"en"===a?"Number":"Число"}),(0,n.jsx)("button",Object.assign({onClick:C},{children:(0,n.jsx)(wt,{id:"submit"})}))]}))]}))})]}))}))]}),"Started"!==p&&(0,n.jsx)(Ro,{text:"start",callback:B}),"Started"===p&&(0,n.jsx)(Ro,{text:"stop",callback:()=>{m("Finished"),f(!1),s(1),E&&(clearTimeout(E),w(void 0))}})]})),"Wait"===p&&(0,n.jsx)(No,{startGame:B,setStatusGame:m,gameName:"number_memory",statusGame:p,gameDescription:"number_memory_description",gameImgRus:r,gameImgEn:t}),"Finished"===p&&(0,n.jsx)(xo,{score:h,rightAnswers:0,totalAnswers:0,speed:0,statusGame:p,setStatusGame:m,startGame:B,gameName:"number_memory",gameID:e})]})},srcEn:"number-memory-en.png",srcRus:"number-memory-ru.png"},{id:6,name:(0,n.jsx)(wt,{id:"verbal_memory"}),path:"Verbal-memory",category:"memory",srcEn:"work-in-progress.png",srcRus:"work-in-progress.png",categoryName:(0,n.jsx)(wt,{id:"memory"}),game:({gameName:e})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"prestart-container"},{children:[(0,n.jsx)("div",Object.assign({className:"name-of-the-game"},{children:e})),(0,n.jsx)("img",{src:"work-in-progress-2.png",className:"mb-6 w-56"}),(0,n.jsx)("div",Object.assign({className:"game-description"},{children:(0,n.jsx)(wt,{id:"game_in_development"})}))]}))})},{id:7,name:(0,n.jsx)(wt,{id:"visual_memory"}),path:"Visual-memory",category:"memory",srcEn:"work-in-progress.png",srcRus:"work-in-progress.png",categoryName:(0,n.jsx)(wt,{id:"memory"}),game:({gameName:e})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"prestart-container"},{children:[(0,n.jsx)("div",Object.assign({className:"name-of-the-game"},{children:e})),(0,n.jsx)("img",{src:"work-in-progress-2.png",className:"mb-6 w-56"}),(0,n.jsx)("div",Object.assign({className:"game-description"},{children:(0,n.jsx)(wt,{id:"game_in_development"})}))]}))})},{id:8,name:(0,n.jsx)(wt,{id:"typing"}),path:"typing",category:"speed",categoryName:(0,n.jsx)(wt,{id:"speed"}),game:function({gameId:e,srcEn:t,srcRus:r}){const[a,o]=(0,X.useState)([]),[i,s]=(0,X.useState)(""),[l,c]=(0,X.useState)(0),[u,d]=(0,X.useState)(-1),[A,f]=(0,X.useState)(""),[p,m]=(0,X.useState)(0),[h,g]=(0,X.useState)(0),[b,y]=(0,X.useState)(60),[v,x]=(0,X.useState)("Wait"),E=(0,X.useRef)(null);function w(){return Yo()(100)}(0,X.useEffect)((()=>{"Started"===v&&E.current.focus()}),[v]);const B=()=>{if("Finished"===v&&(o(w()),c(0),m(0),g(0)),"Started"!==v){x("Started");let e=setInterval((()=>{y((n=>0===n?(clearInterval(e),x("Finished"),localStorage.setItem("bestTypingScore",JSON.stringify(p)),localStorage.setItem("bestTypingAccuracyScore",JSON.stringify(Math.round(p/(p+h)*100))),s(""),60):n-1))}),1e3)}};function C(e,n,t){return e===l&&n===u&&A&&"Finished"!==v?t===A?"background-sucsess":"background-failed":e===l&&u>=a[l].length?"background-failed":""}return(0,X.useEffect)((()=>{o(w())}),[]),(0,n.jsxs)("div",Object.assign({className:"container-game"},{children:["Wait"===v&&(0,n.jsx)(No,{startGame:B,setStatusGame:x,gameName:"typing_speed_test",statusGame:v,gameDescription:"typing_speed_description",gameImgRus:r,gameImgEn:t}),"Wait"!==v&&"Finished"!==v&&(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",Object.assign({className:"game-name"},{children:(0,n.jsx)(wt,{id:"typing_speed_test"})})),(0,n.jsxs)("h2",Object.assign({className:"time-left"},{children:[(0,n.jsx)(wt,{id:"time_left_typing"}),(0,n.jsx)("span",Object.assign({className:"important-text"},{children:b}))]}))]}),"Started"===v&&(0,n.jsx)("div",Object.assign({className:"section"},{children:(0,n.jsx)("div",Object.assign({className:"text"},{children:(0,n.jsx)("div",Object.assign({className:"text-content"},{children:(0,n.jsx)("div",Object.assign({className:"content"},{children:a.map(((e,t)=>(0,n.jsxs)(X.Fragment,{children:[(0,n.jsx)("span",{children:e.split("").map(((e,r)=>(0,n.jsx)("span",Object.assign({className:C(t,r,e)},{children:e}),r)))}),(0,n.jsx)("span",{children:" "})]},t)))}))}))}))})),"Wait"!==v&&"Finished"!==v&&(0,n.jsx)("div",Object.assign({className:"section"},{children:(0,n.jsx)("input",{ref:E,disabled:"Started"!==v,className:"input-section",onKeyDown:({keyCode:e,key:n})=>{32==e?(a[l]===i.trim()?m(p+1):g(h+1),s(""),c(l+1),d(-1)):8===e?(d(u-1),f("")):(d(u+1),f(n))},value:i,onChange:e=>s(e.target.value)})})),"Finished"===v&&(0,n.jsx)(n.Fragment,{children:(0,n.jsx)(xo,{score:p,rightAnswers:p,totalAnswers:p+h,speed:0,statusGame:v,setStatusGame:x,startGame:B,gameName:"typing_speed",gameID:e,resultsName:"words_per_minute"})})]}))},srcEn:"typing-speed-en.png",srcRus:"typing-speed-ru.png"},{id:9,name:(0,n.jsx)(wt,{id:"pixel_logic"}),path:"Pixel-logic",category:"problem_solving",srcEn:"work-in-progress.png",srcRus:"work-in-progress.png",categoryName:(0,n.jsx)(wt,{id:"problem_solving"}),game:({gameName:e})=>(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"prestart-container"},{children:[(0,n.jsx)("div",Object.assign({className:"name-of-the-game"},{children:e})),(0,n.jsx)("img",{src:"work-in-progress-2.png",className:"mb-6 w-56"}),(0,n.jsx)("div",Object.assign({className:"game-description"},{children:(0,n.jsx)(wt,{id:"game_in_development"})}))]}))})},{id:10,name:(0,n.jsx)(wt,{id:"color_match"}),path:"color-match",category:"flexibility",categoryName:(0,n.jsx)(wt,{id:"flexibility"}),gameDescription:"This game improve your flexibility.",srcRus:"color-match-ru.png",srcEn:"color-match-en.png",game:({gameId:e,srcEn:t,srcRus:r})=>{const[a,o]=(0,X.useState)(0),[i,s]=(0,X.useState)(0),[l,c]=(0,X.useState)(0),[u,d]=(0,X.useState)(0),[A,f]=(0,X.useState)(0),[p,m]=(0,X.useState)("Wait"),[h,g]=(0,X.useState)(20),[b,y]=(0,X.useState)(!1),[,v]=(0,X.useState)(""),[x,E]=(0,X.useState)(0),[w,B]=(0,X.useState)(0),[C,k]=(0,X.useState)(1),j=()=>{o(fo(0,po.length-1)),s(fo(0,po.length-1)),c(fo(0,po.length-1)),d(fo(0,po.length-1))},S=()=>{f(0),E(0),B(0),g(20),k(1),m("Started"),j()},_=()=>{v("bg-green-500"),setTimeout((()=>v("")),100),f(A+50*C),E(x+1),B(w+1),k(10===C?10:C+1)},N=()=>{v("bg-red-500"),setTimeout((()=>v("")),100),B(w+1),k(1)};return(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"color-match__container game-wrap mr-auto ml-auto flex h-full flex-col align-middle"},{children:["Wait"===p&&!b&&(0,n.jsx)(No,{startGame:S,setStatusGame:m,gameName:"color_match",statusGame:p,gameDescription:"color_match_description",setHowToPlay:y,gameImgRus:r,gameImgEn:t}),"Finished"===p&&(0,n.jsx)(xo,{score:A,rightAnswers:x,totalAnswers:w,speed:0,statusGame:p,setStatusGame:m,startGame:S,gameName:"color_match",gameID:e}),b&&(0,n.jsx)(Oo,{howToPlay:b,setHowToPlay:y,setStatusGame:m}),!b&&"Finished"!==p&&"Wait"!==p&&(0,n.jsxs)(n.Fragment,{children:["Paused"===p&&(0,n.jsx)(Co,{statusGame:p,setStatusGame:m,startGame:S}),"Paused"!==p&&(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("div",Object.assign({className:"head-game width-[100%] flex self-end"},{children:[(0,n.jsx)(yo,{statusGame:p,setStatusGame:m,startGame:S}),(0,n.jsx)(ho,{statusGame:p,setStatusGame:m}),(0,n.jsx)("div",Object.assign({className:"m-5"},{children:(0,n.jsx)(mo,{seconds:h,statusGame:p,setStatusGame:m,setSeconds:g})})),(0,n.jsx)("p",Object.assign({className:"m-5"},{children:(0,n.jsx)(wt,{id:"score",values:{n:A}})})),(0,n.jsx)("p",Object.assign({className:"border-blue flex h-[50px] w-[50px] items-center justify-center rounded-full border-4 border-blue-300"},{children:`x${C}`}))]})),(0,n.jsxs)("div",Object.assign({className:"inside-wrap flex h-full flex-col justify-center"},{children:[(0,n.jsxs)("div",Object.assign({className:"mb-10 flex justify-center"},{children:[(0,n.jsx)("div",Object.assign({className:`left-part mr-5 flex h-[100px] w-[45%] justify-center border-4 ${po[a].border} align-middle `},{children:(0,n.jsx)("p",Object.assign({className:`flex  items-center justify-center text-center text-5xl uppercase ${po[a].color}`},{children:(0,n.jsx)(wt,{id:po[i].meaning})}))})),(0,n.jsx)("div",Object.assign({className:`left-part  flex h-[100px] w-[45%] justify-center border-4  ${po[l].border} align-middle `},{children:(0,n.jsx)("p",Object.assign({className:`flex items-center justify-center text-center text-5xl uppercase ${po[l].color}`},{children:(0,n.jsx)(wt,{id:po[u].meaning})}))}))]})),(0,n.jsxs)("div",Object.assign({className:"buttons flex w-[100%] justify-center"},{children:[(0,n.jsx)(vo,{callback:()=>{i!==l?_():N(),j()},disabled:"Started"!==p,val:"no"}),(0,n.jsx)(vo,{callback:()=>{i===l?_():N(),j()},disabled:"Started"!==p,val:"yes"})]}))]}))]})]})]}))})}},{id:11,name:(0,n.jsx)(wt,{id:"memory_game"}),path:"memory-game",category:"memory",categoryName:(0,n.jsx)(wt,{id:"memory"}),srcEn:"memory-game-en.png",srcRus:"memory-game-ru.png",game:function({gameId:e,srcEn:t,srcRus:r}){const[a,o]=(0,X.useState)(ai()),[i,s]=(0,X.useState)(0),[l,c]=(0,X.useState)(null),[u,d]=(0,X.useState)(null),[A,f]=(0,X.useState)(!1),[p,m]=(0,X.useState)("Wait");let h=a.map((e=>e.matched)).filter((e=>!1===e));const[g,b]=(0,X.useState)(parseInt(localStorage.getItem("bestScore")||"0")||Number.MAX_SAFE_INTEGER);(0,X.useEffect)((()=>{0===h.length&&((()=>{const e=i>g?g:i;0===e?(b(i),localStorage.setItem("bestScore",""+i)):(b(e),localStorage.setItem("bestScore",""+e)),setTimeout((()=>{m("Finished")}),2e3)})(),console.log("you win"))}),[a]);const y=()=>{m("Started"),c(null),d(null),o(ai()),s(0)},v=e=>{e.id!==(null==l?void 0:l.id)&&(l?d(e):c(e))},x=()=>{c(null),d(null),s((e=>e+1)),f(!1)};return(0,X.useEffect)((()=>{l&&u&&(f(!0),l.src===u.src?(o((e=>e.map((e=>e.src===l.src?Object.assign(Object.assign({},e),{matched:!0}):e)))),x()):setTimeout((()=>x()),1e3))}),[l,u]),(0,n.jsxs)(n.Fragment,{children:["Finished"===p&&(0,n.jsx)(xo,{score:i,rightAnswers:0,totalAnswers:0,speed:0,startGame:y,statusGame:p,setStatusGame:m,gameName:"memory_game",gameID:e}),"Wait"===p&&(0,n.jsx)(No,{startGame:y,setStatusGame:m,gameName:"memory_game",statusGame:p,gameDescription:"memory_game_description",gameImgRus:r,gameImgEn:t}),"Finished"!==p&&"Wait"!==p&&(0,n.jsxs)("div",Object.assign({className:"game-wrapper flex flex-col items-center"},{children:[(0,n.jsx)("h1",{children:(0,n.jsx)(wt,{id:"memory_game"})}),(0,n.jsx)("button",Object.assign({className:"mt-2 w-28 rounded-full border p-1 hover:bg-red-200",onClick:y},{children:(0,n.jsx)(wt,{id:"new_game"})})),(0,n.jsx)("div",Object.assign({className:"grid-cards mb-4"},{children:a.map((e=>(0,n.jsx)(ni,{card:e,handleSelect:v,flip:e===l||e===u||e.matched,disabled:A},e.id)))})),(0,n.jsx)("p",{children:(0,n.jsx)(wt,{id:"moves",values:{n:i}})}),(0,n.jsx)("p",{children:(0,n.jsx)(wt,{id:"best_score",values:{s:g}})})]}))]})}},{id:12,name:(0,n.jsx)(wt,{id:"speed_match"}),path:"speed-match",category:"speed",categoryName:(0,n.jsx)(wt,{id:"speed"}),srcEn:"speed-match-en.png",srcRus:"speed-match-ru.png",game:({gameId:e,srcEn:t,srcRus:r})=>{const[a,o]=(0,X.useState)(Wo[0]),[i,s]=(0,X.useState)(),[l,c]=(0,X.useState)(Wo[fo(0,Wo.length-1)]),[u,d]=(0,X.useState)(0),[A,f]=(0,X.useState)(20),[p,m]=(0,X.useState)("Wait"),[h,g]=(0,X.useState)(""),[b,y]=(0,X.useState)(0),[v,x]=(0,X.useState)(0),[E,w]=(0,X.useState)(1),[B,C]=(0,X.useState)(""),[k,j]=(0,X.useState)(0),[S,_]=(0,X.useState)(new Date),N=()=>{d(0),w(1),j(0),f(20),m("Started"),_(new Date)},O=()=>{return e=void 0,n=void 0,r=function*(){g("changing-front"),C("changing-back"),setTimeout((()=>{g(""),C(""),s(a),o(l),c(Wo[fo(0,Wo.length-1)])}),250)},new((t=void 0)||(t=Promise))((function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}l((r=r.apply(e,n||[])).next())}));var e,n,t,r},T=()=>{d(u+50*E),y(b+1),x(v+1),w(10===E?10:E+1)},P=()=>{x(v+1),w(1)};return(0,n.jsxs)(n.Fragment,{children:["Finished"===p&&(0,n.jsx)(xo,{score:u,rightAnswers:b,totalAnswers:v,speed:k,startGame:N,statusGame:p,setStatusGame:m,gameName:"speed_match",gameID:e}),"Wait"===p&&(0,n.jsx)(No,{startGame:N,setStatusGame:m,gameName:"speed_match",statusGame:p,gameDescription:"speed_match_description",gameImgRus:r,gameImgEn:t}),"Finished"!==p&&"Wait"!==p&&(0,n.jsxs)("div",Object.assign({className:"speed-match__container"},{children:["Paused"===p&&(0,n.jsx)(Co,{statusGame:p,setStatusGame:m,startGame:N}),"Paused"!==p&&(0,n.jsxs)("div",Object.assign({className:"mt-12 flex w-full flex-col items-center"},{children:[(0,n.jsxs)("div",Object.assign({className:"mb-[5%] flex w-full items-center justify-around"},{children:[(0,n.jsx)(yo,{startGame:N,statusGame:p,setStatusGame:m}),(0,n.jsx)(ho,{statusGame:p,setStatusGame:m}),(0,n.jsx)("div",Object.assign({className:"m-5"},{children:(0,n.jsx)(mo,{seconds:A,statusGame:p,setStatusGame:m,setSeconds:f})})),(0,n.jsx)("p",Object.assign({className:"m-5"},{children:(0,n.jsx)(wt,{id:"score",values:{n:u}})})),(0,n.jsx)("p",Object.assign({className:"border-blue flex h-[50px] w-[50px] items-center justify-center rounded-full border-4 border-blue-300"},{children:`x${E}`}))]})),(0,n.jsx)("p",{children:(0,n.jsx)(wt,{id:"question_speed_match"})}),(0,n.jsxs)("div",Object.assign({className:"cover flex"},{children:[(0,n.jsx)("div",Object.assign({className:"left-card"},{children:(0,n.jsx)(Zo,{card:{src:"card-cover.jpeg",name:"cover"}})})),(0,n.jsx)("div",Object.assign({className:"right-card"},{children:(0,n.jsxs)("div",Object.assign({className:"card"},{children:[(0,n.jsx)("div",Object.assign({className:`card-front ${h}`},{children:(0,n.jsx)(Zo,{card:a})})),(0,n.jsx)("div",Object.assign({className:`card-back ${B} `},{children:(0,n.jsx)(Zo,{card:l})}))]}))}))]})),(0,n.jsxs)("div",Object.assign({className:"flex justify-center align-middle"},{children:[(0,n.jsx)(vo,{val:"no",callback:()=>{i!==a?T():P(),j(k+(+new Date-+S)),O(),_(new Date)},disabled:"Started"!==p}),(0,n.jsx)(vo,{val:"yes",callback:()=>{i===a?T():P(),j(k+(+new Date-+S)),O(),_(new Date)},disabled:"Started"!==p})]}))]}))]}))]})}}];var ii=function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}l((r=r.apply(e,n||[])).next())}))};function si(){const{loggedIn:e}=eo((e=>e.loggedInInfo)),[t,r]=(0,X.useState)(),a=no(),[o,i]=(0,X.useState)(""),s=()=>ii(this,void 0,void 0,(function*(){const e=yield ba();e&&(a({payload:e,type:Na}),r(to(e)))})),l=()=>ii(this,void 0,void 0,(function*(){const e=yield Ao();(null==e?void 0:e.length)?(console.log("resp fav",e),console.log("length",e.length),a({payload:e,type:Pa}),i((()=>{const n=oi.filter((n=>e[fo(0,e.length-1)].category===n.category));return n[fo(0,n.length-1)].path}))):i(oi[fo(0,oi.length-1)].path)}));return(0,X.useEffect)((()=>{s(),l()}),[]),(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("main",Object.assign({className:"main"},{children:(0,n.jsxs)("div",Object.assign({className:"main-container"},{children:[(0,n.jsxs)("div",Object.assign({className:"workout-container"},{children:[(0,n.jsx)("div",Object.assign({className:"today-workout ml-auto mr-auto flex w-[100%] justify-center bg-blue-500"},{children:(0,n.jsx)(wt,{id:"today"})})),(0,n.jsxs)("div",Object.assign({className:"workout width-[100%] flex flex-row justify-around"},{children:[(0,n.jsx)("div",Object.assign({className:"workout-image w-[200px]"},{children:(0,n.jsx)("img",{src:"logo-brain.png"})})),(0,n.jsxs)("div",Object.assign({className:"flex flex-col justify-center"},{children:[(0,n.jsx)("p",Object.assign({className:"text-center text-xl"},{children:(0,n.jsx)(wt,{id:"description"})})),e&&(0,n.jsx)(io,Object.assign({to:`/games/${o}`},{children:(0,n.jsx)("button",Object.assign({className:"btn start-workout ml-auto mr-auto flex w-[150px] items-center justify-center rounded bg-blue-700"},{children:(0,n.jsx)(wt,{id:"start_random_game"})}))})),!e&&(0,n.jsx)("button",Object.assign({onClick:()=>{a({type:ya})},className:"btn start-workout ml-auto mr-auto flex w-[150px] items-center justify-center rounded bg-blue-700"},{children:(0,n.jsx)(wt,{id:"start_random_game"})}))]}))]}))]})),(0,n.jsxs)("div",Object.assign({className:"calendar-container m-2"},{children:[(0,n.jsx)(wt,{id:"show_calendar"}),(0,n.jsx)(_t,{activeDays:t})]}))]}))}))})}a.p,a.p,a.p,a.p,a.p;const li=[{category:"all_categories",src:"all_categories.png"}];for(let e of oi)li.map((e=>e.category)).includes(e.category)||li.push({category:e.category,src:`${e.category}.jpeg`});const ci=li;var ui=a(3011),di={};function Ai(){const{updateSearchParams:e}=(()=>{const[e,n]=co(),[t,r]=(0,X.useState)({});return(0,X.useEffect)((()=>{const n={};e.forEach(((e,t)=>{n[t]=e})),r(n)}),[e]),{updateSearchParams:(e,r)=>{n(Object.assign(Object.assign({},t),{[e]:r}))}}})(),[t]=co(),r=t.get("category");return(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("div",Object.assign({className:"flex flex-col"},{children:ci.map((t=>(0,n.jsx)(X.Fragment,{children:(0,n.jsx)("div",Object.assign({className:" "+(r===t.category?"open-now":"")},{children:(0,n.jsxs)("label",Object.assign({htmlFor:t.category,className:"upper-case aside-nav-game-list"},{children:[(0,n.jsx)("input",{type:"radio",className:"input-radio  checked:text-red-500 ",id:t.category,value:t.category,name:"category",checked:r===t.category,onChange:()=>{(n=>{e("category",n)})(t.category)}}),(0,n.jsx)(wt,{id:t.category})]}))}))},t.category)))}))})}di.styleTagTransform=m(),di.setAttributes=d(),di.insert=c().bind(null,"head"),di.domAPI=s(),di.insertStyleElement=f(),o()(ui.Z,di),ui.Z&&ui.Z.locals&&ui.Z.locals;var fi=a(5659),pi={};function mi(){const[e]=co(),t=e.get("category");return(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("div",Object.assign({className:"game-page"},{children:(0,n.jsxs)("div",Object.assign({className:"game-page-container"},{children:[(0,n.jsx)("aside",Object.assign({className:"aside-nav-game"},{children:(0,n.jsx)(Ai,{})})),(0,n.jsx)("main",Object.assign({className:""},{children:(0,n.jsxs)("div",Object.assign({className:"games-info"},{children:[(0,n.jsxs)("div",Object.assign({className:"h2-category upper-case"},{children:[(0,n.jsx)("img",{className:"category-image",src:t?ci.filter((e=>e.category===t))[0].src:ci[0].src,alt:t||"all_categories"}),(0,n.jsx)(wt,{id:t||"all_categories"})]})),(0,n.jsx)("div",Object.assign({className:"game-contant flex flex-wrap justify-center"},{children:(()=>{let e=oi;return"all_categories"!==t&&t&&(e=oi.filter((e=>e.category===t))),e})().map((e=>(0,n.jsx)(X.Fragment,{children:(0,n.jsx)(io,Object.assign({to:`/games/${e.path}`},{children:(0,n.jsx)("div",Object.assign({className:"game-small "},{children:(0,n.jsxs)("div",Object.assign({className:"all-games-wrap"},{children:[(0,n.jsx)("img",{className:"game-image-small",src:e.srcEn,alt:e.path}),(0,n.jsx)("p",Object.assign({className:"upper-case name-of-game"},{children:e.name})),(0,n.jsx)("p",Object.assign({className:"text-cursive"},{children:e.categoryName}))]}))}))}))},e.path)))}))]}))}))]}))}))})}function hi({currentLang:e,handleChangeLang:t}){const r=eo((e=>e.userInfo)),a=eo((e=>e.tokenInfo)),{loggedIn:o}=eo((e=>e.loggedInInfo)),[i,s]=(0,X.useState)(r.nickname),l=no();return console.log("user in user main",r.nickname),console.log("cur user in main",i),(0,X.useEffect)((()=>{s(r.nickname)}),[a]),(0,n.jsxs)("nav",Object.assign({className:"upper-case flex h-16 w-[100%] items-center justify-between bg-blue-300 py-3 px-12 text-center text-lg text-white"},{children:[(0,n.jsx)("a",Object.assign({className:"unlink mr-2",href:"https://github.com/rolling-scopes-school/tasks/blob/master/tasks/rsclone/rsclone.md"},{children:(0,n.jsx)("img",{className:"w-[50px]",src:"Logo.png"})})),(0,n.jsxs)("div",{children:[(0,n.jsx)(io,Object.assign({to:"/",className:"mr-5 hover:text-red-200"},{children:(0,n.jsx)(wt,{id:"to_main"})})),(0,n.jsx)(io,Object.assign({to:"/games",className:"mr-5 hover:text-red-200"},{children:(0,n.jsx)(wt,{id:"to_games"})})),(0,n.jsx)(io,Object.assign({to:"/statistic",className:"mr-5 hover:text-red-200"},{children:(0,n.jsx)(wt,{id:"to_statistic"})}))]}),!o&&(0,n.jsxs)("div",Object.assign({className:"upper-case"},{children:[(0,n.jsx)("span",Object.assign({className:"mr-5 cursor-pointer hover:text-red-200",onClick:()=>{l({type:ya})}},{children:(0,n.jsx)(wt,{id:"to_login"})})),(0,n.jsx)("span",Object.assign({className:"mr-12 cursor-pointer hover:text-red-200",onClick:()=>{l({type:xa})}},{children:(0,n.jsx)(wt,{id:"to_signup"})}))]})),o&&(0,n.jsx)(io,Object.assign({to:"/account-settings",className:"mr-5 hover:text-red-200"},{children:(0,n.jsx)(wt,{id:"to_settings"})})),(0,n.jsx)("button",Object.assign({onClick:()=>t(),className:"w-16 rounded-full border p-2 hover:bg-red-200"},{children:e})),o&&(0,n.jsxs)(n.Fragment,{children:[" ",(0,n.jsx)("p",{children:r.nickname}),(0,n.jsx)(io,Object.assign({to:"/"},{children:(0,n.jsxs)("div",Object.assign({onClick:()=>{l({type:Sa}),l({payload:{id:0,nickname:"",loggedIn:!1,email:"",language:"en",alwaysSignIn:!1},type:Ba}),localStorage.removeItem("user")},className:"flex items-center justify-between"},{children:[(0,n.jsx)("p",Object.assign({className:"mr-3"},{children:(0,n.jsx)(wt,{id:"to_logout"})})),(0,n.jsx)("p",{children:(0,n.jsx)("img",{className:"h-[20px] w-[20px]",src:"logout.png"})})]}))}))]})]}))}pi.styleTagTransform=m(),pi.setAttributes=d(),pi.insert=c().bind(null,"head"),pi.domAPI=s(),pi.insertStyleElement=f(),o()(fi.Z,pi),fi.Z&&fi.Z.locals&&fi.Z.locals,a.p,a.p;const gi=({canvasId:e,results:t})=>{var r;const a=(0,X.useRef)(null);null===(r=a.current)||void 0===r||r.getContext("2d");const o=X.useRef(null);return(0,X.useEffect)((()=>{if(a.current){o.current=a.current.getContext("2d");let e=o.current;e.beginPath(),e.clearRect(0,0,a.current.width,a.current.height),e.fillStyle="#000000",e.fillRect(0,250,2,-250),e.fillStyle="#000000",e.fillRect(0,250,500,-2);let n=30,r=2;const i=200,s=t.length<5?50:t.length<10?25:15,l=t.length<5?1.5*s:t.length<10?2*s:3*s;for(let a of t){const t=a.value<50?a.value/50*i:a.value/1e4*i;e.fillStyle="#b3d5fc",e.font="14px arial",e.save(),e.translate(0,250),null==e||e.fillRect(n,-r,s,-t),e.fillStyle="#085a88",e.fillText(a.value.toString(),n,-t-30),e.restore(),n+=l}}}),[]),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("p",Object.assign({className:"upper-case text-blue-800"},{children:(0,n.jsx)(wt,{id:"your_progress"})})),(0,n.jsx)("canvas",{width:"500",ref:a,id:e,height:"250"})]})};a.p,a.p;const bi=e=>{return n=void 0,t=void 0,a=function*(){try{return(yield ha.get(`${Nt}/game/${e}/leaders`,{withCredentials:!0})).data}catch(e){return console.log(e),null}},new((r=void 0)||(r=Promise))((function(e,o){function i(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(n){var t;n.done?e(n.value):(t=n.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,s)}l((a=a.apply(n,t||[])).next())}));var n,t,r,a},yi=()=>{const e=no();return(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("div",Object.assign({className:"account-page"},{children:(0,n.jsxs)("div",Object.assign({className:"account-container"},{children:[(0,n.jsx)("aside",Object.assign({className:"aside-nav-account"},{children:(0,n.jsx)(io,Object.assign({to:"/"},{children:(0,n.jsx)("div",Object.assign({className:"aside-nav-list upper-case"},{children:(0,n.jsx)(wt,{id:"to_main"})}))}))})),(0,n.jsx)("div",Object.assign({className:"account-info"},{children:(0,n.jsxs)("p",{children:[(0,n.jsx)(wt,{id:"you_are_not_loggin"}),(0,n.jsx)("span",Object.assign({className:"change-info",onClick:()=>{e({type:ya})}},{children:(0,n.jsx)(wt,{id:"login"})})),(0,n.jsx)("span",{children:". "}),(0,n.jsx)("span",{children:(0,n.jsx)(wt,{id:"need_account"})}),(0,n.jsx)("span",Object.assign({className:"change-info",onClick:()=>{e({type:xa})}},{children:(0,n.jsx)(wt,{id:"signup"})}))]})}))]}))}))})};var vi=a(9303),xi={};xi.styleTagTransform=m(),xi.setAttributes=d(),xi.insert=c().bind(null,"head"),xi.domAPI=s(),xi.insertStyleElement=f(),o()(vi.Z,xi),vi.Z&&vi.Z.locals&&vi.Z.locals,a.p;var Ei=function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}l((r=r.apply(e,n||[])).next())}))};function wi(){const{loggedIn:e}=eo((e=>e.loggedInInfo)),t=eo((e=>e.userInfo)),[r,a]=(0,X.useState)([]),[o,i]=(0,X.useState)([0,0]),[s,l]=(0,X.useState)([]),c=no(),u=()=>Ei(this,void 0,void 0,(function*(){const e=yield ba();e&&(console.log("results",e),c({payload:e,type:Na}),a((e=>{const n=[];for(let t=0;t<oi.length;t++){n.push({gameId:t+1,gameName:oi[t].name,bestScore:0,results:[]});for(let r of e)r.gameId===t+1&&(n[t].results.push({value:r.value,createdAt:r.createdAt}),n[t].bestScore=n[t].bestScore>r.value?n[t].bestScore:r.value)}return n})(e)),i((e=>{let n=0,t=0;if(e.length){t=1,n=1;let r=new Date(e[0]);if(e.length>1)for(let a=1;a<e.length;a++)+new Date(e[a])-+r<=864e5?(n+=1,t=n>t?n:t):n=1,r=new Date(e[a])}return[n,t]})(to(e))))})),d=()=>Ei(this,void 0,void 0,(function*(){const e=[];for(let n=0;n<oi.length;n++){const t=yield bi(n+1);t&&e.push({game:oi[n].path,gameID:oi[n].id,leaders:t})}l(e)}));return(0,X.useEffect)((()=>{u(),d()}),[]),(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"page-container"},{children:[!e&&(0,n.jsx)(yi,{}),e&&(0,n.jsx)("div",Object.assign({className:"statistic-container"},{children:(0,n.jsxs)("div",Object.assign({className:"statistic-page"},{children:[(0,n.jsxs)("div",Object.assign({className:"statistic-h2 upper-case"},{children:[(0,n.jsx)("img",{className:"small-img",src:"statistic.jpeg",alt:"statistic"}),(0,n.jsx)(wt,{id:"to_statistic"})]})),(0,n.jsxs)("div",Object.assign({className:"statistic-block "},{children:[(0,n.jsxs)("p",Object.assign({className:"upper-case mb-3 text-lg"},{children:[(0,n.jsx)(wt,{id:"name"}),": ",t.nickname]})),(0,n.jsxs)("div",Object.assign({className:"flex"},{children:[(0,n.jsx)("p",Object.assign({className:"mb-1 mr-1 text-sm"},{children:(0,n.jsx)(wt,{id:"your_best_streak",values:{count:o[1]}})})),(0,n.jsx)("img",{className:"max-h-5 w-[30px]",src:"fire-blue.jpeg"})]})),(0,n.jsxs)("div",Object.assign({className:"flex"},{children:[(0,n.jsx)("p",Object.assign({className:"mb-1 mr-2"},{children:(0,n.jsx)(wt,{id:"your_streak",values:{count:o[0]}})})),(0,n.jsx)("img",{className:"max-h-5 w-[17px]",src:"fire-red.jpeg"})]}))]})),(0,n.jsx)("div",{}),r.sort(((e,n)=>n.results.length-e.results.length)).map((e=>{var t;return(0,n.jsxs)("section",Object.assign({className:"statistic-block"},{children:[(0,n.jsxs)("div",Object.assign({className:"mb-3"},{children:[(0,n.jsx)("p",Object.assign({className:"upper-case text-xl"},{children:e.gameName})),(0,n.jsx)("p",{children:(0,n.jsx)(wt,{id:"best_result",values:{score:e.bestScore}})}),(0,n.jsx)("p",{children:(0,n.jsx)(wt,{id:"times_played",values:{times:e.results.length}})})]})),(0,n.jsxs)("div",Object.assign({className:"game-statistic"},{children:[0!==e.results.length&&(0,n.jsx)("div",Object.assign({className:"mb-4 h-[276px] w-[504px] border-2"},{children:(0,n.jsx)(gi,{canvasId:`game-${e.gameId}`,results:e.results})})),(0,n.jsx)("div",Object.assign({className:"result-table-container"},{children:(0,n.jsxs)("table",Object.assign({className:"result-table"},{children:[(0,n.jsxs)("thead",Object.assign({className:"result-table-head"},{children:[(0,n.jsx)("tr",{children:(0,n.jsx)("th",{children:"Best results"})}),(0,n.jsx)("tr",{children:(0,n.jsx)("th",{children:e.gameName})})]})),(0,n.jsx)("tbody",{children:s.length?null===(t=s.filter((n=>n.gameID===e.gameId))[0].leaders)||void 0===t?void 0:t.map(((e,t)=>(0,n.jsx)(X.Fragment,{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:t+1}),(0,n.jsx)("td",Object.assign({colSpan:2},{children:e.value})),(0,n.jsx)("td",Object.assign({colSpan:3},{children:e.nickname}))]})},t))):null})]}))}))]}))]}),e.gameId)}))]}))}))]}))})}function Bi(){return(0,n.jsxs)("footer",Object.assign({className:"h-18 flex w-[100%] items-center justify-between bg-blue-300 px-12 align-baseline text-lg text-white"},{children:[(0,n.jsxs)("div",Object.assign({className:"github -ml-3 flex items-center"},{children:[(0,n.jsx)("a",Object.assign({className:"unlink",href:"https://github.com/novedice/Brain-Workout"},{children:(0,n.jsx)("img",{className:"w-[150px]",src:"GitHubLogo1.png"})})),(0,n.jsxs)("div",Object.assign({className:"flex flex-col  justify-start"},{children:[(0,n.jsx)("a",Object.assign({className:"unlink",href:"https://github.com/SergeiBuiko"},{children:"sergeibuiko"})),(0,n.jsx)("a",Object.assign({className:"unlink",href:"https://github.com/novedice"},{children:"novedice"})),(0,n.jsx)("a",Object.assign({className:"unlink",href:"https://github.com/sluzerpp"},{children:"sluzerpp"}))]}))]})),(0,n.jsx)("div",Object.assign({className:"year-main"},{children:(0,n.jsx)("p",Object.assign({className:"text-header"},{children:"2023"}))})),(0,n.jsx)("div",Object.assign({className:"rs-school"},{children:(0,n.jsx)("a",Object.assign({className:"unlink",href:"https://rs.school/js/"},{children:(0,n.jsx)("img",{className:"w-[80px]",src:"https://rs.school/images/rs_school_js.svg",alt:"RS-logo"})}))}))]}))}a.p,a.p;var Ci=function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}l((r=r.apply(e,n||[])).next())}))};const ki=e=>Ci(void 0,void 0,void 0,(function*(){try{return(yield ha.put(`${Nt}/${Ot}/`,e,{withCredentials:!0})).data}catch(e){return console.log(e),null}})),ji=(e,n)=>Ci(void 0,void 0,void 0,(function*(){try{const t=yield ma.post(`${Nt}/${Ot}/${n}`,e,{withCredentials:!0});return console.log("response",t.data),t.data}catch(e){e&&console.log(e)}})),Si="block appearance-none rounded border border-gray-200 bg-gray-200 py-2 px-4 leading-tight text-gray-700 focus:border-gray-500 focus:bg-white focus:outline-none",_i="mb-1 block text-xs text-gray-700",Ni="font-bold uppercase tracking-wide",Oi="mb-3 text-xs italic text-red-500",Ti=(e,t)=>e.length<4||!e.includes("@")||!e.includes(".")||e.startsWith("@")||e.lastIndexOf(".")<e.lastIndexOf("@")?(t+=1,{err:(0,n.jsx)(wt,{id:"email_error"}),n:t}):{err:"",n:t},Pi=(e,t)=>e.trim().length<3?(console.log("nameEr in func",e),t+=1,{err:(0,n.jsx)(wt,{id:"name_error"}),n:t}):{err:"",n:t},Ri="abcdefghijklmnopqrstuvwxyz",Ii=(e,t)=>{let r,a,o,i;return e.length<8&&(r=(0,n.jsx)(wt,{id:"password_er_first"}),t+=1),(e=>{let n=!1;for(let t of e)if(Ri.toLowerCase().includes(t)){n=!0;break}return n})(e)||(a=(0,n.jsx)(wt,{id:"password_er_second"}),t+=1),(e=>{let n=!1;for(let t of e)if(Ri.toUpperCase().includes(t)){n=!0;break}return n})(e)||(o=(0,n.jsx)(wt,{id:"password_er_third"}),t+=1),function(e){let n=!1;for(let t=0;t<e.length;t+=1)if("1234567890".includes(e[t])){n=!0;break}return n}(e)||(i=(0,n.jsx)(wt,{id:"password_er_forth"}),t+=1),r||a||o||i?{err:(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("p",{children:[r,a,o,i]})}),n:t}:{err:"",n:t}},Li=(e,t,r)=>e!==t?(r+=1,{err:(0,n.jsx)(wt,{id:"password_confirm_error"}),n:r}):{err:"",n:r};function Mi(e){this.message=e}Mi.prototype=new Error,Mi.prototype.name="InvalidCharacterError";var Di="undefined"!=typeof window&&window.atob&&window.atob.bind(window)||function(e){var n=String(e).replace(/=+$/,"");if(n.length%4==1)throw new Mi("'atob' failed: The string to be decoded is not correctly encoded.");for(var t,r,a=0,o=0,i="";r=n.charAt(o++);~r&&(t=a%4?64*t+r:r,a++%4)?i+=String.fromCharCode(255&t>>(-2*a&6)):0)r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(r);return i};function Fi(e){var n=e.replace(/-/g,"+").replace(/_/g,"/");switch(n.length%4){case 0:break;case 2:n+="==";break;case 3:n+="=";break;default:throw"Illegal base64url string!"}try{return function(e){return decodeURIComponent(Di(e).replace(/(.)/g,(function(e,n){var t=n.charCodeAt(0).toString(16).toUpperCase();return t.length<2&&(t="0"+t),"%"+t})))}(n)}catch(e){return Di(n)}}function Ui(e){this.message=e}Ui.prototype=new Error,Ui.prototype.name="InvalidTokenError";const zi=function(e,n){if("string"!=typeof e)throw new Ui("Invalid token specified");var t=!0===(n=n||{}).header?0:1;try{return JSON.parse(Fi(e.split(".")[t]))}catch(e){throw new Ui("Invalid token specified: "+e.message)}};const Hi=()=>{const[e,t]=(0,X.useState)(!1),r=no(),{loggedIn:a}=eo((e=>e.loggedInInfo));return(0,n.jsxs)(n.Fragment,{children:[!e&&(0,n.jsxs)("div",Object.assign({className:"block-changing"},{children:[(0,n.jsx)("div",Object.assign({className:"mb-8"},{children:(0,n.jsx)(wt,{id:"in_case_of_delete"})})),(0,n.jsx)("button",Object.assign({type:"submit",className:"mb-3 w-[full] rounded-full border bg-blue-400 p-1 px-3 hover:bg-red-200",onClick:()=>{return e=void 0,n=void 0,i=function*(){const e=yield Ci(void 0,void 0,void 0,(function*(){try{return(yield ha.delete(`${Nt}/${Ot}`,{withCredentials:!0})).data}catch(e){console.log(e)}}));e&&(console.log("delete response",e),t(!0),r({type:Sa}),r({payload:{id:0,nickname:"",loggedIn:!1,email:"",language:"en",alwaysSignIn:!1},type:Ba}),localStorage.removeItem("user"),localStorage.clear(),console.log("after logout",a))},new((o=void 0)||(o=Promise))((function(t,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(a,s)}l((i=i.apply(e,n||[])).next())}));var e,n,o,i}},{children:(0,n.jsx)(wt,{id:"submit_changes"})}))]})),e&&(0,n.jsx)("div",{children:(0,n.jsx)(wt,{id:"account_deleted"})})]})};const Gi=({typeOfChanges:e,setOpenChanges:t})=>{const r=eo((e=>e.userInfo)),a=no(),[o,i]=(0,X.useState)(),[s,l]=(0,X.useState)(""),[c,u]=(0,X.useState)("");return(0,n.jsxs)(n.Fragment,{children:["delete"===e&&(0,n.jsx)(Hi,{}),"delete"!==e&&(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"block-changing"},{children:[(0,n.jsxs)("label",Object.assign({className:`label__settings ${_i} ${Ni}`},{children:[(0,n.jsx)(wt,{id:`new_${e}`}),(0,n.jsx)("input",{type:"name"===e?"text":e,name:e,className:`mt-[10px] mb-4 w-full ${Si}`,onChange:e=>{l(e.target.value)}})]})),"password"===e&&(0,n.jsxs)("label",Object.assign({className:`label__settings ${_i} ${Ni}`},{children:[(0,n.jsx)(wt,{id:"confirm_new_password"}),(0,n.jsx)("input",{type:"password",name:"password",className:`mt-[10px] mb-4 w-full ${Si}`,onChange:e=>{u(e.target.value)}})]})),o&&(0,n.jsx)("div",Object.assign({className:Oi},{children:o})),(0,n.jsx)("button",Object.assign({type:"submit",className:"mb-3 w-[full] rounded-full border bg-blue-400 p-1 px-3 hover:bg-red-200",onClick:l=>{l.preventDefault();let u=0;switch(i(""),e){case"name":console.log("name change");let e=Pi(s,u);i(e.err),u=e.n,console.log("name er:",o);break;case"email":console.log("email change");let n=Ti(s,u);i(n.err),u=n.n;break;case"password":console.log("password change");let t=Ii(s,u);if(i(t.err),u=t.n,0===u){let e=Li(c,s,u);i(e.err),u=e.n}}return 0!==u?void console.log("error in if:",o):(d=void 0,A=void 0,p=function*(){const o="password"===e?yield ki({password:s}):yield ki({email:"email"===e?s:r.email,nickname:"name"===e?s:r.nickname});o?(console.log("token data",zi(o.token)),a({payload:{id:zi(o.token).id,nickname:zi(o.token).nickname,loggedIn:!0,language:zi(o.token).lang,email:zi(o.token).email,alwaysSignIn:!0},type:Ba}),a({payload:{token:o.token},type:Ca}),localStorage.setItem("user",JSON.stringify(r)),localStorage.setItem("token",JSON.stringify(o.token)),document.cookie=`auth=Bearer ${o.token}`,console.log("user after changes",r),e="",t(!1)):i((0,n.jsx)(wt,{id:"user_exists"}))},void new((f=void 0)||(f=Promise))((function(e,n){function t(e){try{a(p.next(e))}catch(e){n(e)}}function r(e){try{a(p.throw(e))}catch(e){n(e)}}function a(n){var a;n.done?e(n.value):(a=n.value,a instanceof f?a:new f((function(e){e(a)}))).then(t,r)}a((p=p.apply(d,A||[])).next())})));var d,A,f,p}},{children:(0,n.jsx)(wt,{id:"submit_changes"})}))]}))})]})};a.p;var Wi=function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}l((r=r.apply(e,n||[])).next())}))};const $i=()=>{const[e,t]=(0,X.useState)([]),[r,a]=(0,X.useState)(""),o=no();return(0,X.useEffect)((()=>{Wi(void 0,void 0,void 0,(function*(){const e=yield Ao();(null==e?void 0:e.length)&&(t(e),o({payload:e,type:Pa}))}))}),[]),(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"flex flex-col"},{children:[(0,n.jsx)("p",Object.assign({className:"mb-10"},{children:(0,n.jsx)(wt,{id:"choose_favorite_categories"})})),ci.map((r=>{if("all_categories"!==r.category)return(0,n.jsx)(X.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"category-in-favorites upper-case "+((null==e?void 0:e.map((e=>e.category)).includes(r.category))?"choosen-category":""),onClick:()=>(n=>Wi(void 0,void 0,void 0,(function*(){a("");let r=0,i="";if(null==e?void 0:e.length)for(let t of e)if(t.category===n){r=t.id,i=t.category;break}if(0===r)if(e.length<2){const r=yield(e=>uo(void 0,void 0,void 0,(function*(){try{const n=yield ha.post(`${Nt}/${Ot}/${Pt}`,{category:e},{withCredentials:!0});return console.log("response create",n.data),console.log("all response create:",n),n.data}catch(e){console.log(e)}})))(n);console.log(r),r?(t([...e,r]),o({payload:r.category,type:Oa}),console.log("favorite cat:",e)):console.log("something create got wrong")}else a("category_error");else{console.log("delete");const n=yield(s=r,uo(void 0,void 0,void 0,(function*(){try{return(yield ha.delete(`${Nt}/${Ot}/${Pt}/${s}`,{withCredentials:!0})).data}catch(e){console.log(e)}})));if(n)return t(e.filter((e=>e.id!==r))),void o({payload:i,type:Ta});console.log("something delete went wrong")}var s})))(r.category)},{children:[(0,n.jsx)(wt,{id:r.category}),(0,n.jsx)("img",{className:"checked mr-4 h-[auto] w-[20px]",src:"i.png"})]}))},r.category)})),r&&(0,n.jsx)("div",Object.assign({className:Oi},{children:(0,n.jsx)(wt,{id:r})}))]}))})};var qi=a(4168),Zi={};function Vi(){const e=eo((e=>e.userInfo)),t=eo((e=>e.loggedInInfo)),r=eo((e=>e.tokenInfo)),[a,o]=(0,X.useState)("account"),[i,s]=(0,X.useState)(!1),[l,c]=(0,X.useState)(""),[u,d]=(0,X.useState)(e.nickname),[A,f]=(0,X.useState)(e.email);return(0,X.useEffect)((()=>{f(e.email),d(e.nickname),console.log(t)}),[r]),(0,n.jsxs)(n.Fragment,{children:[!t.loggedIn&&(0,n.jsx)(yi,{}),t.loggedIn&&(0,n.jsx)("div",Object.assign({className:"account-page"},{children:(0,n.jsxs)("div",Object.assign({className:"account-container"},{children:[(0,n.jsxs)("aside",Object.assign({className:"aside-nav-account"},{children:[(!i||"training"===a&&i)&&(0,n.jsx)("div",Object.assign({className:"aside-nav-list upper-case "+("account"===a?"open-now":""),onClick:()=>o("account")},{children:(0,n.jsx)(wt,{id:"to_settings"})})),i&&"training"!==a&&(0,n.jsx)("div",Object.assign({className:"aside-nav-list upper-case "+("account"===a?"open-now":""),onClick:()=>{o("account"),s(!1)}},{children:(0,n.jsx)(wt,{id:"back_to_settings"})})),(0,n.jsx)("div",Object.assign({className:"aside-nav-list upper-case "+("training"===a?"open-now":""),onClick:()=>o("training")},{children:(0,n.jsx)(wt,{id:"training_preferences"})}))]})),(0,n.jsxs)("main",{children:["account"===a&&(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("article",Object.assign({className:"account-info"},{children:[i&&(0,n.jsx)(Gi,{typeOfChanges:l,setOpenChanges:s}),!i&&(0,n.jsxs)(n.Fragment,{children:[" ",(0,n.jsxs)("section",Object.assign({className:"section"},{children:[(0,n.jsx)("h2",Object.assign({className:"h2-account upper-case"},{children:(0,n.jsx)(wt,{id:"account"})})),(0,n.jsxs)("div",Object.assign({className:"info-block"},{children:[(0,n.jsxs)("div",Object.assign({className:"info"},{children:[(0,n.jsx)("p",Object.assign({className:"name-email"},{children:(0,n.jsx)(wt,{id:"your_name"})})),(0,n.jsx)("p",Object.assign({className:"user-name-email"},{children:u}))]})),(0,n.jsx)("div",Object.assign({className:"change-in-process"},{children:(0,n.jsx)("p",Object.assign({className:"name-email change-info",onClick:()=>{c("name"),s(!0)}},{children:(0,n.jsx)(wt,{id:"change_name"})}))}))]}))]})),(0,n.jsxs)("section",Object.assign({className:"section"},{children:[(0,n.jsx)("h3",Object.assign({className:"h3-account"},{children:(0,n.jsx)(wt,{id:"login_information"})})),(0,n.jsxs)("div",Object.assign({className:"info-block"},{children:[(0,n.jsxs)("div",Object.assign({className:"info"},{children:[(0,n.jsx)("p",Object.assign({className:"name-email"},{children:(0,n.jsx)(wt,{id:"your_email"})})),(0,n.jsx)("p",Object.assign({className:"user-name-email"},{children:A}))]})),(0,n.jsxs)("div",Object.assign({className:"change-info"},{children:[(0,n.jsx)("div",Object.assign({className:"change-in-process"},{children:(0,n.jsx)("p",Object.assign({className:"name-email",onClick:()=>{c("email"),s(!0)}},{children:(0,n.jsx)(wt,{id:"change_email"})}))})),(0,n.jsx)("div",Object.assign({className:"change-in-process"},{children:(0,n.jsx)("p",Object.assign({className:"name-email",onClick:()=>{c("password"),s(!0)}},{children:(0,n.jsx)(wt,{id:"change_password"})}))}))]}))]}))]})),(0,n.jsx)("section",Object.assign({className:"section"},{children:(0,n.jsx)("div",Object.assign({className:"info-block"},{children:(0,n.jsx)("div",Object.assign({className:"change-info name-email",onClick:()=>{c("delete"),s(!0)}},{children:(0,n.jsx)(wt,{id:"delete_account"})}))}))}))]})]}))}),"training"===a&&(0,n.jsx)("article",Object.assign({className:"account-info"},{children:(0,n.jsx)("section",Object.assign({className:"section"},{children:(0,n.jsx)($i,{})}))}))]})]}))}))]})}Zi.styleTagTransform=m(),Zi.setAttributes=d(),Zi.insert=c().bind(null,"head"),Zi.domAPI=s(),Zi.insertStyleElement=f(),o()(qi.Z,Zi),qi.Z&&qi.Z.locals&&qi.Z.locals;var Yi=a(6228),Xi={};Xi.styleTagTransform=m(),Xi.setAttributes=d(),Xi.insert=c().bind(null,"head"),Xi.domAPI=s(),Xi.insertStyleElement=f(),o()(Yi.Z,Xi),Yi.Z&&Yi.Z.locals&&Yi.Z.locals;const Ki=()=>{const e=no(),{openLogInModal:t}=eo((e=>e.logInModal)),[r,a]=(0,X.useState)(""),[o,i]=(0,X.useState)(""),[s,l]=(0,X.useState)(""),[c,u]=(0,X.useState)(""),d=eo((e=>e.userInfo)),[A,f]=(0,X.useState)(!0),p=()=>{e({type:va})};return(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("div",Object.assign({className:t?"modal active":"modal",onClick:()=>p()},{children:(0,n.jsxs)("div",Object.assign({className:t?"modal__content active flex flex-col items-center":"modal__content flex flex-col items-center",onClick:e=>e.stopPropagation()},{children:[(0,n.jsx)("h1",Object.assign({className:"caption_login mb-2"},{children:(0,n.jsx)(wt,{id:"login"})})),(0,n.jsxs)("p",Object.assign({className:"mb-2"},{children:[(0,n.jsx)(wt,{id:"need_account"}),(0,n.jsx)("span",Object.assign({className:"link__signup",onClick:()=>{p(),e({type:xa})}},{children:(0,n.jsx)(wt,{id:"signup"})}))]})),(0,n.jsxs)("form",Object.assign({onSubmit:t=>{var a,o,l,c;t.preventDefault(),u(""),i(""),s&&r?(a=void 0,o=void 0,c=function*(){const t=yield ji({email:r,password:s,lang:d.lang},"login");t?(e({type:ja}),e({payload:{id:zi(t.token).id,nickname:zi(t.token).nickname,loggedIn:!0,email:r,language:d.lang,alwaysSignIn:A},type:Ba}),localStorage.setItem("token",t.token),e({type:ka}),p(),A?localStorage.setItem("user",JSON.stringify(d)):(localStorage.removeItem("user"),localStorage.removeItem("token"))):u((0,n.jsx)(wt,{id:"wrong_password"}))},new((l=void 0)||(l=Promise))((function(e,n){function t(e){try{i(c.next(e))}catch(e){n(e)}}function r(e){try{i(c.throw(e))}catch(e){n(e)}}function i(n){var a;n.done?e(n.value):(a=n.value,a instanceof l?a:new l((function(e){e(a)}))).then(t,r)}i((c=c.apply(a,o||[])).next())}))):u((0,n.jsx)("p",{children:"Please enter your email and password"}))},className:"ml-auto mr-auto flex w-full max-w-lg flex-col p-4"},{children:[(0,n.jsxs)("label",Object.assign({className:`label__signup ${_i} ${Ni}`},{children:[(0,n.jsx)(wt,{id:"e_mail"}),(0,n.jsx)("input",{type:"text",className:`mb-1 w-full ${Si}`,onChange:e=>{a(e.target.value)}})]})),o&&(0,n.jsx)("p",Object.assign({className:Oi},{children:o})),(0,n.jsxs)("label",Object.assign({className:`label__signup ${_i} ${Ni}`},{children:[(0,n.jsx)(wt,{id:"password"}),(0,n.jsx)("input",{type:"password",className:`mb-1 w-full ${Si}`,onChange:e=>{l(e.target.value)}})]})),c&&(0,n.jsx)("p",Object.assign({className:`${Oi} text-lg`},{children:c})),(0,n.jsx)("button",Object.assign({className:"mb-3 w-[full] rounded-full border bg-blue-400 p-1 px-3  hover:bg-red-200"},{children:(0,n.jsx)(wt,{id:"login"})})),(0,n.jsx)("div",Object.assign({className:"flex items-center justify-start"},{children:(0,n.jsxs)("label",{children:[(0,n.jsx)("input",{className:"mr-3",type:"checkbox",checked:A,onChange:()=>{f(!A)}}),(0,n.jsx)(wt,{id:"stay_signed"})]})}))]}))]}))}))})};var Qi=function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}l((r=r.apply(e,n||[])).next())}))};const Ji=()=>{const[e,t]=(0,X.useState)(""),[r,a]=(0,X.useState)(),[o,i]=(0,X.useState)(""),[s,l]=(0,X.useState)(),[c,u]=(0,X.useState)(""),[d,A]=(0,X.useState)(),[f,p]=(0,X.useState)(""),[m,h]=(0,X.useState)(),[g,b]=(0,X.useState)(!0),y=eo((e=>e.userInfo)),v=no(),{openSignUpModal:x}=eo((e=>e.signUpModal)),E=()=>{v({type:Ea})};return(0,n.jsx)("div",Object.assign({className:x?"modal active":"modal",onClick:()=>E()},{children:(0,n.jsxs)("div",Object.assign({className:x?"modal__content active flex flex-col items-center":"modal__content flex flex-col items-center",onClick:e=>e.stopPropagation()},{children:[(0,n.jsx)("h1",Object.assign({className:"caption_login mb-2"},{children:(0,n.jsx)(wt,{id:"registration"})})),(0,n.jsxs)("p",Object.assign({className:"mb-2"},{children:[(0,n.jsx)(wt,{id:"already_have"}),(0,n.jsx)("span",Object.assign({className:"link__signup",onClick:()=>{E(),v({type:ya})}},{children:(0,n.jsx)(wt,{id:"to_login"})}))]})),(0,n.jsxs)("form",Object.assign({onSubmit:t=>Qi(void 0,void 0,void 0,(function*(){t.preventDefault();let r=d?1:0;return l(Ii(o,r).err),r=Ii(o,r).n,a(Pi(e,r).err),r=Pi(e,r).n,A(Ti(c,r).err),r=Ti(c,r).n,h(Li(f,o,r).err),r=Ti(c,r).n,0!==r?void console.log("numbers in sign up",r):void Qi(void 0,void 0,void 0,(function*(){const t=yield ji({email:c,password:o,nickname:e,lang:y.lang},"registration");console.log("registration data",t),t?(v({type:ja}),console.log("token data",zi(t.token)),v({payload:{id:zi(t.token).id,nickname:zi(t.token).nickname,loggedIn:!0,language:y.lang,email:y.email,alwaysSignIn:g},type:Ba}),v({payload:{token:t.token},type:Ca}),v({type:ka}),localStorage.setItem("user",JSON.stringify(y)),localStorage.setItem("token",t.token),g?localStorage.setItem("user",JSON.stringify(y)):(localStorage.removeItem("user"),localStorage.removeItem("token")),E()):A((0,n.jsx)(wt,{id:"user_exists"}))}))})),className:"ml-auto mr-auto flex w-full max-w-lg flex-col p-4"},{children:[(0,n.jsxs)("label",Object.assign({className:`label__signup ${_i} ${Ni}`},{children:[(0,n.jsx)(wt,{id:"e_mail"}),(0,n.jsx)("input",{type:"email",name:"email",className:`mb-1 w-full ${Si}`,onChange:e=>{u(e.target.value)}})]})),d&&(0,n.jsx)("div",Object.assign({className:Oi},{children:d})),(0,n.jsxs)("label",Object.assign({className:`label__signup ${_i} ${Ni}`},{children:[(0,n.jsx)(wt,{id:"name"}),(0,n.jsx)("input",{type:"text",className:`mb-1 w-full ${Si}`,onChange:e=>{t(e.target.value)}})]})),r&&(0,n.jsx)("div",Object.assign({className:Oi},{children:r})),(0,n.jsxs)("label",Object.assign({className:`label__signup ${_i} ${Ni}`},{children:[(0,n.jsx)(wt,{id:"password"}),(0,n.jsx)("input",{type:"password",className:`mb-1 w-full ${Si}`,onChange:e=>{i(e.target.value)}})]})),s&&(0,n.jsx)("div",Object.assign({className:Oi},{children:s})),(0,n.jsxs)("label",Object.assign({className:`label__signup ${_i} ${Ni}`},{children:[(0,n.jsx)(wt,{id:"confirm_password"}),(0,n.jsx)("input",{type:"password",className:`mb-1 w-full ${Si}`,onChange:e=>{p(e.target.value)}})]})),m&&(0,n.jsx)("div",Object.assign({className:Oi},{children:m})),(0,n.jsx)("button",Object.assign({type:"submit",className:"mb-3 w-[full] rounded-full border bg-blue-400 p-1 px-3 hover:bg-red-200"},{children:(0,n.jsx)(wt,{id:"registration"})})),(0,n.jsx)("div",Object.assign({className:"flex items-center justify-start"},{children:(0,n.jsxs)("label",{children:[(0,n.jsx)("input",{className:"mr-3",type:"checkbox",checked:g,onChange:()=>{b(!g)}}),(0,n.jsx)(wt,{id:"stay_signed"})]})}))]}))]}))}))},es=()=>{let e=({gameId:e,gameName:t})=>(0,n.jsxs)(n.Fragment,{children:[e," ",t]}),t=0,r="",a="",o="";const{CurrentGame:i}=function(){let{matches:e}=X.useContext(le),n=e[e.length-1];return n?n.params:{}}();for(let n=0;n<oi.length;n++)if(oi[n].path===i){e=oi[n].game,t=n+1,r=oi[n].path,(oi[n].srcRus||oi[n].srcEn)&&(a=oi[n].srcRus,o=oi[n].srcEn);break}return(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",Object.assign({className:"game-wrap flex h-screen flex-col bg-slate-200 pr-[10%] pl-[10%]"},{children:[(0,n.jsx)(io,Object.assign({to:"/games",className:"upper-case my-3 w-fit rounded bg-blue-300 p-4 text-white duration-300 hover:bg-red-200"},{children:(0,n.jsx)(wt,{id:"all_games"})})),(0,n.jsx)("div",Object.assign({className:"game mb-8 h-full rounded-xl bg-white"},{children:e&&(0,n.jsx)(e,{gameId:t,gameName:r,srcRus:a,srcEn:o})}))]}))})};function ns(e,n){return Object.keys(e).reduce((function(t,r){return t[r]=Oe({timeZone:n},e[r]),t}),{})}function ts(e,n){return Object.keys(Oe(Oe({},e),n)).reduce((function(t,r){return t[r]=Oe(Oe({},e[r]||{}),n[r]||{}),t}),{})}function rs(e,n){if(!n)return e;var t=it.formats;return Oe(Oe(Oe({},t),e),{date:ts(ns(t.date,n),ns(e.date||{},n)),time:ts(ns(t.time,n),ns(e.time||{},n))})}var as=function(e,n,t,r,a){var o=e.locale,i=e.formats,s=e.messages,l=e.defaultLocale,c=e.defaultFormats,u=e.fallbackOnEmptyString,d=e.onError,A=e.timeZone,f=e.defaultRichTextElements;void 0===t&&(t={id:""});var p=t.id,m=t.defaultMessage;Ue(!!p,"[@formatjs/intl] An `id` must be provided to format a message. You can either:\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\nto autofix this issue");var h=String(p),g=s&&Object.prototype.hasOwnProperty.call(s,h)&&s[h];if(Array.isArray(g)&&1===g.length&&g[0].type===Ie.literal)return g[0].value;if(!r&&g&&"string"==typeof g&&!f)return g.replace(/'\{(.*?)\}'/gi,"{$1}");if(r=Oe(Oe({},f),r||{}),i=rs(i,A),c=rs(c,A),!g){if(!1===u&&""===g)return g;if((!m||o&&o.toLowerCase()!==l.toLowerCase())&&d(new ft(t,o)),m)try{return n.getMessageFormat(m,l,c,a).format(r)}catch(e){return d(new At('Error formatting default message for: "'.concat(h,'", rendering default message verbatim'),o,t,e)),"string"==typeof m?m:h}return h}try{return n.getMessageFormat(g,o,i,Oe({formatters:n},a||{})).format(r)}catch(e){d(new At('Error formatting message: "'.concat(h,'", using ').concat(m?"default message":"id"," as fallback."),o,t,e))}if(m)try{return n.getMessageFormat(m,l,c,a).format(r)}catch(e){d(new At('Error formatting the default message for: "'.concat(h,'", rendering message verbatim'),o,t,e))}return"string"==typeof g?g:"string"==typeof m?m:h},os=["style","currency","currencyDisplay","unit","unitDisplay","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","compactDisplay","currencyDisplay","currencySign","notation","signDisplay","unit","unitDisplay","numberingSystem"];function is(e,n,t){var r=e.locale,a=e.formats,o=e.onError;void 0===t&&(t={});var i=t.format,s=i&&gt(a,"number",i,o)||{};return n(r,pt(t,os,s))}function ss(e,n,t,r){void 0===r&&(r={});try{return is(e,n,r).format(t)}catch(n){e.onError(new st(ot.FORMAT_ERROR,"Error formatting number.",n))}return String(t)}function ls(e,n,t,r){void 0===r&&(r={});try{return is(e,n,r).formatToParts(t)}catch(n){e.onError(new st(ot.FORMAT_ERROR,"Error formatting number.",n))}return[]}var cs=["numeric","style"];function us(e,n,t,r,a){void 0===a&&(a={}),r||(r="second"),Intl.RelativeTimeFormat||e.onError(new Qn('Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-relativetimeformat"\n',Vn.MISSING_INTL_API));try{return function(e,n,t){var r=e.locale,a=e.formats,o=e.onError;void 0===t&&(t={});var i=t.format,s=!!i&&gt(a,"relative",i,o)||{};return n(r,pt(t,cs,s))}(e,n,a).format(t,r)}catch(n){e.onError(new dt("Error formatting relative time.",e.locale,n))}return String(t)}var ds=["formatMatcher","timeZone","hour12","weekday","era","year","month","day","hour","minute","second","timeZoneName","hourCycle","dateStyle","timeStyle","calendar","numberingSystem","fractionalSecondDigits"];function As(e,n,t,r){var a=e.locale,o=e.formats,i=e.onError,s=e.timeZone;void 0===r&&(r={});var l=r.format,c=Oe(Oe({},s&&{timeZone:s}),l&&gt(o,n,l,i)),u=pt(r,ds,c);return"time"!==n||u.hour||u.minute||u.second||u.timeStyle||u.dateStyle||(u=Oe(Oe({},u),{hour:"numeric",minute:"numeric"})),t(a,u)}function fs(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=t[0],o=t[1],i=void 0===o?{}:o,s="string"==typeof a?new Date(a||0):a;try{return As(e,"date",n,i).format(s)}catch(n){e.onError(new st(ot.FORMAT_ERROR,"Error formatting date.",n))}return String(s)}function ps(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=t[0],o=t[1],i=void 0===o?{}:o,s="string"==typeof a?new Date(a||0):a;try{return As(e,"time",n,i).format(s)}catch(n){e.onError(new st(ot.FORMAT_ERROR,"Error formatting time.",n))}return String(s)}function ms(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=t[0],o=t[1],i=t[2],s=void 0===i?{}:i,l=e.timeZone,c=e.locale,u=e.onError,d=pt(s,ds,l?{timeZone:l}:{});try{return n(c,d).formatRange(a,o)}catch(e){u(new st(ot.FORMAT_ERROR,"Error formatting date time range.",e))}return String(a)}function hs(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=t[0],o=t[1],i=void 0===o?{}:o,s="string"==typeof a?new Date(a||0):a;try{return As(e,"date",n,i).formatToParts(s)}catch(n){e.onError(new st(ot.FORMAT_ERROR,"Error formatting date.",n))}return[]}function gs(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=t[0],o=t[1],i=void 0===o?{}:o,s="string"==typeof a?new Date(a||0):a;try{return As(e,"time",n,i).formatToParts(s)}catch(n){e.onError(new st(ot.FORMAT_ERROR,"Error formatting time.",n))}return[]}var bs=["type"];function ys(e,n,t,r){var a=e.locale,o=e.onError;void 0===r&&(r={}),Intl.PluralRules||o(new Qn('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n',Vn.MISSING_INTL_API));var i=pt(r,bs);try{return n(a,i).select(t)}catch(e){o(new dt("Error formatting plural.",a,e))}return"other"}var vs=["type","style"],xs=Date.now();function Es(e,n,t,r){void 0===r&&(r={});var a=ws(e,n,t,r).reduce((function(e,n){var t=n.value;return"string"!=typeof t?e.push(t):"string"==typeof e[e.length-1]?e[e.length-1]+=t:e.push(t),e}),[]);return 1===a.length?a[0]:0===a.length?"":a}function ws(e,n,t,r){var a=e.locale,o=e.onError;void 0===r&&(r={}),Intl.ListFormat||o(new Qn('Intl.ListFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-listformat"\n',Vn.MISSING_INTL_API));var i=pt(r,vs);try{var s={},l=t.map((function(e,n){if("object"==typeof e){var t=function(e){return"".concat(xs,"_").concat(e,"_").concat(xs)}(n);return s[t]=e,t}return String(e)}));return n(a,i).formatToParts(l).map((function(e){return"literal"===e.type?e:Oe(Oe({},e),{value:s[e.value]||e.value})}))}catch(e){o(new st(ot.FORMAT_ERROR,"Error formatting list.",e))}return t}var Bs=["style","type","fallback","languageDisplay"];function Cs(e,n,t,r){var a=e.locale,o=e.onError;Intl.DisplayNames||o(new Qn('Intl.DisplayNames is not available in this environment.\nTry polyfilling it using "@formatjs/intl-displaynames"\n',Vn.MISSING_INTL_API));var i=pt(r,Bs);try{return n(a,i).of(t)}catch(e){o(new st(ot.FORMAT_ERROR,"Error formatting display name.",e))}}function ks(e,n){var t=function(e){void 0===e&&(e={dateTime:{},number:{},message:{},relativeTime:{},pluralRules:{},list:{},displayNames:{}});var n=Intl.RelativeTimeFormat,t=Intl.ListFormat,r=Intl.DisplayNames,a=zn((function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return new((e=Intl.DateTimeFormat).bind.apply(e,Pe([void 0],n,!1)))}),{cache:ht(e.dateTime),strategy:Xn.variadic}),o=zn((function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return new((e=Intl.NumberFormat).bind.apply(e,Pe([void 0],n,!1)))}),{cache:ht(e.number),strategy:Xn.variadic}),i=zn((function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return new((e=Intl.PluralRules).bind.apply(e,Pe([void 0],n,!1)))}),{cache:ht(e.pluralRules),strategy:Xn.variadic});return{getDateTimeFormat:a,getNumberFormat:o,getMessageFormat:zn((function(e,n,t,r){return new it(e,n,t,Oe({formatters:{getNumberFormat:o,getDateTimeFormat:a,getPluralRules:i}},r||{}))}),{cache:ht(e.message),strategy:Xn.variadic}),getRelativeTimeFormat:zn((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new(n.bind.apply(n,Pe([void 0],e,!1)))}),{cache:ht(e.relativeTime),strategy:Xn.variadic}),getPluralRules:i,getListFormat:zn((function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new(t.bind.apply(t,Pe([void 0],e,!1)))}),{cache:ht(e.list),strategy:Xn.variadic}),getDisplayNames:zn((function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new(r.bind.apply(r,Pe([void 0],e,!1)))}),{cache:ht(e.displayNames),strategy:Xn.variadic})}}(n),r=Oe(Oe({},mt),e),a=r.locale,o=r.defaultLocale,i=r.onError;return a?!Intl.NumberFormat.supportedLocalesOf(a).length&&i?i(new ut('Missing locale data for locale: "'.concat(a,'" in Intl.NumberFormat. Using default locale: "').concat(o,'" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details'))):!Intl.DateTimeFormat.supportedLocalesOf(a).length&&i&&i(new ut('Missing locale data for locale: "'.concat(a,'" in Intl.DateTimeFormat. Using default locale: "').concat(o,'" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details'))):(i&&i(new ct('"locale" was not configured, using "'.concat(o,'" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details'))),r.locale=r.defaultLocale||"en"),function(e){e.onWarn&&e.defaultRichTextElements&&function(e){return"string"==typeof(e?e[Object.keys(e)[0]]:void 0)}(e.messages||{})&&e.onWarn('[@formatjs/intl] "defaultRichTextElements" was specified but "message" was not pre-compiled. \nPlease consider using "@formatjs/cli" to pre-compile your messages for performance.\nFor more details see https://formatjs.io/docs/getting-started/message-distribution')}(r),Oe(Oe({},r),{formatters:t,formatNumber:ss.bind(null,r,t.getNumberFormat),formatNumberToParts:ls.bind(null,r,t.getNumberFormat),formatRelativeTime:us.bind(null,r,t.getRelativeTimeFormat),formatDate:fs.bind(null,r,t.getDateTimeFormat),formatDateToParts:hs.bind(null,r,t.getDateTimeFormat),formatTime:ps.bind(null,r,t.getDateTimeFormat),formatDateTimeRange:ms.bind(null,r,t.getDateTimeFormat),formatTimeToParts:gs.bind(null,r,t.getDateTimeFormat),formatPlural:ys.bind(null,r,t.getPluralRules),formatMessage:as.bind(null,r,t),$t:as.bind(null,r,t),formatList:Es.bind(null,r,t.getListFormat),formatListToParts:ws.bind(null,r,t.getListFormat),formatDisplayName:Cs.bind(null,r,t.getDisplayNames)})}function js(e){return{locale:e.locale,timeZone:e.timeZone,fallbackOnEmptyString:e.fallbackOnEmptyString,formats:e.formats,textComponent:e.textComponent,messages:e.messages,defaultLocale:e.defaultLocale,defaultFormats:e.defaultFormats,onError:e.onError,onWarn:e.onWarn,wrapRichTextChunksInFragment:e.wrapRichTextChunksInFragment,defaultRichTextElements:e.defaultRichTextElements}}function Ss(e){return e?Object.keys(e).reduce((function(n,t){var r,a=e[t];return n[t]=tt(a)?(r=a,function(e){return r(X.Children.toArray(e))}):a,n}),{}):e}var _s=function(e,n,t,r){for(var a=[],o=4;o<arguments.length;o++)a[o-4]=arguments[o];var i=Ss(r),s=as.apply(void 0,Pe([e,n,t,i],a,!1));return Array.isArray(s)?X.Children.toArray(s):s},Ns=function(e,n){var t=e.defaultRichTextElements,r=Te(e,["defaultRichTextElements"]),a=Ss(t),o=ks(Oe(Oe(Oe({},yt),r),{defaultRichTextElements:a}),n),i={locale:o.locale,timeZone:o.timeZone,fallbackOnEmptyString:o.fallbackOnEmptyString,formats:o.formats,defaultLocale:o.defaultLocale,defaultFormats:o.defaultFormats,messages:o.messages,onError:o.onError,defaultRichTextElements:a};return Oe(Oe({},o),{formatMessage:_s.bind(null,i,o.formatters),$t:_s.bind(null,i,o.formatters)})},Os=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.cache={dateTime:{},number:{},message:{},relativeTime:{},pluralRules:{},list:{},displayNames:{}},n.state={cache:n.cache,intl:Ns(js(n.props),n.cache),prevConfig:js(n.props)},n}return Ne(n,e),n.getDerivedStateFromProps=function(e,n){var t=n.prevConfig,r=n.cache,a=js(e);return vt(t,a)?null:{intl:Ns(a,r),prevConfig:a}},n.prototype.render=function(){return bt(this.state.intl),X.createElement(De,{value:this.state.intl},this.props.children)},n.displayName="IntlProvider",n.defaultProps=yt,n}(X.PureComponent);const Ts=Os,Ps={[ko]:{to_main:"HOME",to_games:"BRAIN GAMES",to_statistic:"statistic",to_settings:"Account settings",to_login:"log in",to_signup:"SIGN UP",to_logout:"Log out",today:"Today's workout",show_calendar:"Training calendar",start_train:"START WORKOUT",description:"A daily taste of assorted cognitive tasks",speed:"speed",memory:"memory",flexibility:"flexibility",problem_solving:"problem solving",reaction_time:"reaction time",memory_game:"Memory game",speed_match:"Speed match",color_match:"Color match",chimp_test:"chimp test",number_memory:"Number memory",pixel_logic:"pixel logic",typing:"typing",aim_trainer:"aim trainer",visual_memory:"visual memory",verbal_memory:"verbal memory",sequence_memory:"Sequence memory",all_categories:"all categories",how_to_play:"how to play",yes:"yes",no:"no",red:"red",green:"green",blue:"blue",black:"black",yellow:"yellow",start_game:"start game",pause:"pause",play:"play",how_color:"Ignore meaning of the word at the right and focus just on its color. Ignore color of the word at the right and focus just on its meaning.",all_games:"all games",stop:"stop",start:"start",start_again:"start again",time_left:"time left: {n, number}s",score:"score: {n, number}",question_speed_match:"Does this title matches the previous one?",correct_answers:"Correct: {n, number} of {m, number}",average_speed:"Average answer: {n, number} ms",accuracy:"Accuracy: {n, number}%",new_game:"new game",moves:"moves: {n, number}",best_score:"Best score: {s, number}",login:"Log in",signup:"Sign up",need_account:"If you do not have an accont, please ",e_mail:"e-mail",password:"password",stay_signed:"stay signed in",forgot_password:"Forgot password? ",reset_password:"Reset password",name:"name",confirm_password:"confirm password",already_have:"Already have an account? ",registration:"sign up",password_confirm_error:"The passwords are not the same!",email_error:"Please enter valid email",name_error:"The name should be at least 3 characters",password_er_first:"Password length should be at leact 8 characters. ",password_er_second:"Password shoud include at least 1 lower letter.",password_er_third:"Password shoud include at least 1 upper letter.",password_er_forth:"Password shoud contain at least 1 number.",user_exists:"User with this email already exists. Please check the information and try again. If you already have an account, please Log In.",user_not_exists:"User with this email does not exists.",wrong_password:"Your email or password is incorrect. Please try again",your_best_streak:"your best streak {count, plural, one {# day} other {# days}}",your_streak:"your streak now {count, plural, one {# day} other {# days}}",best_result:"best result: {score, number}",times_played:"times played: {times, number}",your_progress:"your progress",save:"save",remember_number:"Remember the number and then enter it.",your_best_result:"Your best result: Level {n, number}",level:"level",number:"number",submit:"submit",jan:"january",feb:"february",mar:"march",apr:"april",may:"may",jun:"june",jul:"july",aug:"august",sep:"september",oct:"october",nov:"november",dec:"december",sun:"sun",mon:"mon",tue:"tue",wed:"wed",thu:"thu",fri:"fri",sat:"sat",training_preferences:"training preferences",back_to_settings:"Back to account settings",account:"account",your_name:"your name",change_name:"change name",login_information:"Login information",your_email:"Your email",change_email:"change email",change_password:"change password",delete_account:"delete account",new_name:"enter new name",new_password:"enter new password",new_email:"enter new email",confirm_new_password:"confirm new password",submit_changes:"submit",in_case_of_delete:"If you delete your account, you will lose all of your data, including: Training Progress, History Game Scores and History",account_deleted:"Your account was deleted successfully.",confirm_password_delete:"Please enter your password",choose_favorite_categories:"Choose your favorite categories. You can choose up to 2 categories",category_error:"If you want add category to choosen, please delete one of ypur favorite categories before.",you_are_not_loggin:"You are not logged in. If you have an account, please ",reaction_time_test:"Reaction time test",reaction_time_description:"When the red box turns green, click as quickly as you can.",click_for_start:"Click for starting game",wait_for_green:"Wait for green...",too_soon:"Too soon!",click_to_try_again:"Click to try again!",your_reaction_time:"Your reaction time: {n, number} ms",click_to_keep_going:"Click to keep going",your_best_reaction_time:"Your best reaction time: {n, number} ms",try_again:"try again",save_result:"save result",typing_speed_test:"Typing speed test",time_left_typing:"Time left: ",new_test:"New test",words_per_minute:"Words per minute: {n, number} ",accuracy_simple:"Accuracy",sequence_memory_description:"Memorize the pattern. Try to repeat it. ",typing_speed:"Typing speed",color_match_description:"This game will help you learn to focus on important things and not pay attention to unimportant aspects.",speed_match_description:"This game will help you to make a desicion faster. Try to remember previous image and decide is this image matches the previous one.",typing_speed_description:"This game will help you learn to type fast and correct. Check how fast you can type now. ",memory_game_description:"This game improves your memory. Try to find all the same cards using as few moves as possible.",number_memory_description:"This game improves your number memory. Remember the number and then try to repeat it. ",game_in_development:"Sorry, this game is under development. As soon as the game is ready, it will immediately appear here! We are constantly working hard to improve our application. Our team is doing its best to bring new and interesting games to the app as soon as possible. Thanks for understanding)",start_random_game:"Start random game!"},[jo]:{to_main:"НА ГЛАВНУЮ",to_games:"ИГРЫ",to_statistic:"статистика",to_settings:"Настройки",to_login:"войти",to_signup:"ЗАРЕГИСТРИРОВАТЬСЯ",to_logout:"Выйти",today:"Тренировка сегодня",show_calendar:"Календарь тренировок",start_train:"НАЧАТЬ ТРЕНИРОВКУ",description:"Ежедневные разнообразные когнитивные задачи",speed:"скорость",memory:"память",flexibility:"гибкость мышления",problem_solving:"решение проблем",reaction_time:"время реакции",memory_game:"найди пару",speed_match:"совпадение на скорость",color_match:"соответствие цвета",chimp_test:"шимпанзе тест",number_memory:"память на числа",pixel_logic:"логика",typing:"печать",aim_trainer:"тренировка цели",visual_memory:"визуальная памать",verbal_memory:"вербальная память",sequence_memory:"порядок следования",all_categories:"все категории",how_to_play:"Как играть?",yes:"да",no:"нет",red:"красный",green:"зеленый",blue:"синий",black:"черный",yellow:"желтый",start_game:"начать игру",pause:"пауза",play:"продолжить",how_color:"Не обращайте внимания на значение слова справа, сконцентрируйтесь только на его цвете. Игнорируйте цвет слова слева, сосредоточьтесь на значении.",all_games:"все игры",stop:"стоп",start:"старт",start_again:"начать заново",time_left:"Время: {n, number}с",score:"Счет: {n, number}",question_speed_match:"Эта картинка такая же, как и предыдущая?",correct_answers:"Правильных ответов: {n, number} из {m, number}",average_speed:"Средняя скорость ответа: {n, number} мс",accuracy:"Точность: {n, number}%",new_game:"новая игра",moves:"Ходы: {n, number}",best_score:"Лучший счет: {s, number}",login:"Вход",signup:"зарегистрироваться",need_account:"Если у вас еще нет аккаунта, нажмите ",e_mail:"электронная почта",password:"пароль",stay_signed:"оставаться зарегистрированным",forgot_password:"Забыли пароль? ",reset_password:"Восстановить пароль",name:"имя",confirm_password:"подтверждение пароля",already_have:"У вас уже есть аккаунт? Нажмите ",registration:"Регистрация",password_confirm_error:"Пароли не совпадают!",email_error:"Пожалуйста, введите правильный адрес электронной почты",name_error:"Имя должно содержать не менее трех символов",password_er_first:"Длина пароля должна быть не менее 8 символов. ",password_er_second:"Пароль должен содержать как минимум 1 маленькую букву.",password_er_third:"Пароль должен содержать как минимум одну заглавную букву.",password_er_forth:"Пароль должен содержать как минимум одну цифру.",user_exists:"Пользователь с таким адресом электронной почты уже существует. Пожалуйста, проверьте информацию и попробуйте снова. Если у вас уже есть аккаунт, нажмите войти.",user_not_exists:"пользователя с таким адресом электронной почты не существует.",wrong_password:"Неправильный имэйл или пароль.",your_best_streak:"Максимально сыграно без перерыва {count, plural, one {# день} two {# дня} three {# дня} four {# дня} other {# дней}}",your_streak:"Сыграно подряд сейчас {count, plural, one {# день} two {# дня} three {# дня} four {# дня} other {# дней}}",best_result:"лучший результат: {score, number}",times_played:"раз сыграно: {times, number}",your_progress:"ваш прогресс",save:"сохранить",remember_number:"Запомните число и после введите его.",your_best_result:"Ваш лучший результат: Уровень {n, number}",level:"уровень",number:"число",submit:"ввод",jan:"январь",feb:"февраль",mar:"март",apr:"апрель",may:"май",jun:"июнь",jul:"июль",aug:"август",sep:"сентябрь",oct:"октябрь",nov:"ноябрь",dec:"декабрь",sun:"вс",mon:"пн",tue:"вт",wed:"ср",thu:"чт",fri:"пт",sat:"сб",training_preferences:"предпочтения по категориям",back_to_settings:"вернуться к настройкам аккаунта",account:"аккаунт",your_name:"ваше имя",change_name:"изменить имя",login_information:"Информация о логине",your_email:"ваш адрес электронной почты",change_email:"изменить адрес электронной почты",change_password:"изменить пароль",delete_account:"удалить аккаунт",new_name:"введите новое имя",new_password:"введите новый пароль",new_email:"введите новый адрес электронной почты",confirm_new_password:"подтвердите новый пароль",submit_changes:"подтвердить",in_case_of_delete:"Если вы удалите свой аккаунт, вы потеряете все данные, включая ваш прогресс, историю ваших рекордов и историю тренировок.",account_deleted:"Ваш аккаунт был успешно удален.",confirm_password_delete:"Пожалуйста, введите ваш пароль",choose_favorite_categories:"Выберите ваши любимые категории. Вы можете выбрать до двух категорий.",category_error:"Чтобы добавить категорию в выбранные, пожалуйста, удалите одну из выбранных категорий",you_are_not_loggin:"Вы не зарегистрированы в системе. Если у вас уже есть аккаунт, пожалуйста, ",sequence_memory_description:"Запомните паттерн. Постарайтесь повторить.",reaction_time_test:"Тест на время реакции",reaction_time_description:"Когда красный цвет сменится зеленым, кликните так быстро, как сможете.",click_for_start:"Нажмите, чтобы начать игру",wait_for_green:"Дождитесь зеленого...",too_soon:"Слишком быстро!",click_to_try_again:"Нажмите, чтобы попробовать снова!!",your_reaction_time:"Ваше время реакции: {n, number} мс",click_to_keep_going:"Нажмите, чтобы продолжить",your_best_reaction_time:"Лучшее время реакции: {n, number} мс",try_again:"играть еще раз",save_result:"сохранить результат",typing_speed_test:"Печать на скорость",time_left_typing:"Осталось времени: ",new_test:"Пройти тест еще раз",words_per_minute:"Количество слов вминуту: {n, number}",accuracy_simple:"Точность",typing_speed:"Скорость печати",color_match_description:"Эта игра поможет научиться концентрироваться на важных вещах и не обращать внимания на неважные аспекты. ",speed_match_description:"Эта игра поможет научиться принимать решение быстро. Попробуйте решить, соответствует ли эта картинка предыдущей настолько быстро, насколько возможно. ",typing_speed_description:"Эта игра поможет вам научиться печатать быстро и правильно. Проверьте себя, насколько быстро вы сможете печатать. ",memory_game_description:"Эта игра развивает память. Попробуйте найти все одинаковые карточки, за наименьшее количество ходов.",number_memory_description:"Эта игра развивает память на числа. Сначала запомните число, потом попытайтесь повторить его. ",game_in_development:"Извините, данная игра находится в разработке. Как только игра будет готова, она сразу же появится здесь! Мы постоянно работаем над улучшением нашего приложения. Наша команда делает все возможное, чтобы в приложении появлялись новые и интересные игры.  Спасибо за понимание)",start_random_game:"Начать случайную игру!"}};var Rs=function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}l((r=r.apply(e,n||[])).next())}))};function Is(e){return Is="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Is(e)}function Ls(e,n,t){return(n=function(e){var n=function(e,n){if("object"!==Is(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!==Is(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Is(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ms(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ds(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ms(Object(t),!0).forEach((function(n){Ls(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ms(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Fs(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var Us="function"==typeof Symbol&&Symbol.observable||"@@observable",zs=function(){return Math.random().toString(36).substring(7).split("").join(".")},Hs={INIT:"@@redux/INIT"+zs(),REPLACE:"@@redux/REPLACE"+zs(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+zs()}};function Gs(e){if("object"!=typeof e||null===e)return!1;for(var n=e;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return Object.getPrototypeOf(e)===n}function Ws(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return 0===n.length?function(e){return e}:1===n.length?n[0]:n.reduce((function(e,n){return function(){return e(n.apply(void 0,arguments))}}))}function $s(e){return function(n){var t=n.dispatch,r=n.getState;return function(n){return function(a){return"function"==typeof a?a(t,r,e):n(a)}}}}var qs=$s();qs.withExtraArgument=$s;const Zs=qs,Vs={loggedIn:!1},Ys={openLogInModal:!1},Xs={openSignUpModal:!1},Ks={token:""},Qs={id:0,nickname:"",lang:ko,loggedIn:!1,email:"",alwaysSignIn:!0},Js=function(e){for(var n=Object.keys(e),t={},r=0;r<n.length;r++){var a=n[r];"function"==typeof e[a]&&(t[a]=e[a])}var o,i=Object.keys(t);try{!function(e){Object.keys(e).forEach((function(n){var t=e[n];if(void 0===t(void 0,{type:Hs.INIT}))throw new Error(Fs(12));if(void 0===t(void 0,{type:Hs.PROBE_UNKNOWN_ACTION()}))throw new Error(Fs(13))}))}(t)}catch(e){o=e}return function(e,n){if(void 0===e&&(e={}),o)throw o;for(var r=!1,a={},s=0;s<i.length;s++){var l=i[s],c=t[l],u=e[l],d=c(u,n);if(void 0===d)throw n&&n.type,new Error(Fs(14));a[l]=d,r=r||d!==u}return(r=r||i.length!==Object.keys(e).length)?a:e}}({logInModal:(e=Ys,n)=>{switch(n.type){case ya:return{openLogInModal:!0};case va:return{openLogInModal:!1};default:return e}},signUpModal:(e=Xs,n)=>{switch(n.type){case xa:return{openSignUpModal:!0};case Ea:return{openSignUpModal:!1};default:return e}},userInfo:(e=Qs,n)=>{switch(n.type){case Ba:return e.nickname=n.payload.nickname?n.payload.nickname:e.nickname,e.email=n.payload.email?n.payload.email:e.email,e.loggedIn=n.payload.loggedIn,e.lang=n.payload.lang?n.payload.lang:e.lang,e.alwaysSignIn=n.payload.alwaysSignIn,e.id=n.payload.id?n.payload.id:e.id,e;case wa:return e.lang=e.lang===ko?jo:ko,e;case ka:return e.loggedIn=!0,e;case"DELETE_USER":return Qs;default:return e}},tokenInfo:(e=Ks,n)=>n.type===Ca?n.payload:e,loggedInInfo:(e=Vs,n)=>{switch(n.type){case ja:return{loggedIn:!0};case Sa:return{loggedIn:!1};default:return e}},resultsInfo:(e=[],n)=>{switch(n.type){case _a:return[...e,n.payload[0]];case Na:return n.payload;default:return e}},favoriteCategoriesInfo:(e=[],n)=>{switch(n.type){case Oa:return[...e,n.payload[0]];case Pa:return n.payload;case Ta:return e.filter((e=>e!==n.payload[0]));default:return e}}}),el=function e(n,t,r){var a;if("function"==typeof t&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error(Fs(0));if("function"==typeof t&&void 0===r&&(r=t,t=void 0),void 0!==r){if("function"!=typeof r)throw new Error(Fs(1));return r(e)(n,t)}if("function"!=typeof n)throw new Error(Fs(2));var o=n,i=t,s=[],l=s,c=!1;function u(){l===s&&(l=s.slice())}function d(){if(c)throw new Error(Fs(3));return i}function A(e){if("function"!=typeof e)throw new Error(Fs(4));if(c)throw new Error(Fs(5));var n=!0;return u(),l.push(e),function(){if(n){if(c)throw new Error(Fs(6));n=!1,u();var t=l.indexOf(e);l.splice(t,1),s=null}}}function f(e){if(!Gs(e))throw new Error(Fs(7));if(void 0===e.type)throw new Error(Fs(8));if(c)throw new Error(Fs(9));try{c=!0,i=o(i,e)}finally{c=!1}for(var n=s=l,t=0;t<n.length;t++)(0,n[t])();return e}function p(e){if("function"!=typeof e)throw new Error(Fs(10));o=e,f({type:Hs.REPLACE})}function m(){var e,n=A;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(Fs(11));function t(){e.next&&e.next(d())}return t(),{unsubscribe:n(t)}}})[Us]=function(){return this},e}return f({type:Hs.INIT}),(a={dispatch:f,subscribe:A,getState:d,replaceReducer:p})[Us]=m,a}(Js,function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return function(e){return function(){var t=e.apply(void 0,arguments),r=function(){throw new Error(Fs(15))},a={getState:t.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=n.map((function(e){return e(a)}));return r=Ws.apply(void 0,o)(t.dispatch),Ds(Ds({},t),{},{dispatch:r})}}}(Zs));var nl=a(8087);function tl(e,n){void 0===n&&(n={});var t=function(e){return e&&"j"===e[0]&&":"===e[1]?e.substr(2):e}(e);if(function(e,n){return void 0===n&&(n=!e||"{"!==e[0]&&"["!==e[0]&&'"'!==e[0]),!n}(t,n.doNotParse))try{return JSON.parse(t)}catch(e){}return e}var rl=function(){return rl=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},rl.apply(this,arguments)},al=function(){function e(e,n){var t=this;this.changeListeners=[],this.HAS_DOCUMENT_COOKIE=!1,this.cookies=function(e,n){return"string"==typeof e?nl.Q(e,n):"object"==typeof e&&null!==e?e:{}}(e,n),new Promise((function(){t.HAS_DOCUMENT_COOKIE="object"==typeof document&&"string"==typeof document.cookie})).catch((function(){}))}return e.prototype._updateBrowserValues=function(e){this.HAS_DOCUMENT_COOKIE&&(this.cookies=nl.Q(document.cookie,e))},e.prototype._emitChange=function(e){for(var n=0;n<this.changeListeners.length;++n)this.changeListeners[n](e)},e.prototype.get=function(e,n,t){return void 0===n&&(n={}),this._updateBrowserValues(t),tl(this.cookies[e],n)},e.prototype.getAll=function(e,n){void 0===e&&(e={}),this._updateBrowserValues(n);var t={};for(var r in this.cookies)t[r]=tl(this.cookies[r],e);return t},e.prototype.set=function(e,n,t){var r;"object"==typeof n&&(n=JSON.stringify(n)),this.cookies=rl(rl({},this.cookies),((r={})[e]=n,r)),this.HAS_DOCUMENT_COOKIE&&(document.cookie=nl.q(e,n,t)),this._emitChange({name:e,value:n,options:t})},e.prototype.remove=function(e,n){var t=n=rl(rl({},n),{expires:new Date(1970,1,1,0,0,1),maxAge:0});this.cookies=rl({},this.cookies),delete this.cookies[e],this.HAS_DOCUMENT_COOKIE&&(document.cookie=nl.q(e,"",t)),this._emitChange({name:e,value:void 0,options:n})},e.prototype.addChangeListener=function(e){this.changeListeners.push(e)},e.prototype.removeChangeListener=function(e){var n=this.changeListeners.indexOf(e);n>=0&&this.changeListeners.splice(n,1)},e}();const ol=al,il=ol;var sl=X.createContext(new il),ll=sl.Provider;sl.Consumer;var cl=function(){var e=function(n,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])},e(n,t)};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}();const ul=function(e){function n(n){var t=e.call(this,n)||this;return n.cookies?t.cookies=n.cookies:t.cookies=new ol,t}return cl(n,e),n.prototype.render=function(){return X.createElement(ll,{value:this.cookies},this.props.children)},n}(X.Component);t.createRoot(document.getElementById("root")).render((0,n.jsx)((function(n){let{basename:t,children:r,window:a}=n,o=X.useRef();null==o.current&&(o.current=function(n){return void 0===n&&(n={}),function(n,t,r,a){void 0===a&&(a={});let{window:o=document.defaultView,v5Compat:i=!1}=a,s=o.history,l=e.Pop,c=null;function u(){l=e.Pop,c&&c({action:l,location:d.location})}let d={get action(){return l},get location(){return n(o,s)},listen(e){if(c)throw new Error("A history only accepts one active listener");return o.addEventListener(y,u),c=e,()=>{o.removeEventListener(y,u),c=null}},createHref:e=>t(o,e),encodeLocation(e){let n=C("string"==typeof e?e:w(e));return{pathname:n.pathname,search:n.search,hash:n.hash}},push:function(n,t){l=e.Push;let a=E(d.location,n,t);r&&r(a,n);let u=x(a),A=d.createHref(a);try{s.pushState(u,"",A)}catch(e){o.location.assign(A)}i&&c&&c({action:l,location:d.location})},replace:function(n,t){l=e.Replace;let a=E(d.location,n,t);r&&r(a,n);let o=x(a),u=d.createHref(a);s.replaceState(o,"",u),i&&c&&c({action:l,location:d.location})},go:e=>s.go(e)};return d}((function(e,n){let{pathname:t,search:r,hash:a}=e.location;return E("",{pathname:t,search:r,hash:a},n.state&&n.state.usr||null,n.state&&n.state.key||"default")}),(function(e,n){return"string"==typeof n?n:w(n)}),null,n)}({window:a,v5Compat:!0}));let i=o.current,[s,l]=X.useState({action:i.action,location:i.location});return X.useLayoutEffect((()=>i.listen(l)),[i]),X.createElement(xe,{basename:t,children:r,location:s.location,navigationType:s.action,navigator:i})}),Object.assign({basename:"/"},{children:(0,n.jsx)(ul,{children:(0,n.jsx)((function({store:e,context:n,children:t,serverState:r}){const a=(0,X.useMemo)((()=>{const n=function(e,n){let t,r=$a;function a(){i.onStateChange&&i.onStateChange()}function o(){t||(t=n?n.addNestedSub(a):e.subscribe(a),r=function(){const e=Da();let n=null,t=null;return{clear(){n=null,t=null},notify(){e((()=>{let e=n;for(;e;)e.callback(),e=e.next}))},get(){let e=[],t=n;for(;t;)e.push(t),t=t.next;return e},subscribe(e){let r=!0,a=t={callback:e,next:null,prev:t};return a.prev?a.prev.next=a:n=a,function(){r&&null!==n&&(r=!1,a.next?a.next.prev=a.prev:t=a.prev,a.prev?a.prev.next=a.next:n=a.next)}}}}())}const i={addNestedSub:function(e){return o(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:a,isSubscribed:function(){return Boolean(t)},trySubscribe:o,tryUnsubscribe:function(){t&&(t(),t=void 0,r.clear(),r=$a)},getListeners:()=>r};return i}(e);return{store:e,subscription:n,getServerState:r?()=>r:void 0}}),[e,r]),o=(0,X.useMemo)((()=>e.getState()),[e]);qa((()=>{const{subscription:n}=a;return n.onStateChange=n.notifyNestedSubs,n.trySubscribe(),o!==e.getState()&&n.notifyNestedSubs(),()=>{n.tryUnsubscribe(),n.onStateChange=void 0}}),[a,o]);const i=n||Fa;return X.createElement(i.Provider,{value:a},t)}),Object.assign({store:el},{children:(0,n.jsx)((function(){const e=eo((e=>e.userInfo)),t=no(),[r,a]=(0,X.useState)(e.lang),o=()=>Rs(this,void 0,void 0,(function*(){if(localStorage.getItem("token")){const e=yield Ci(void 0,void 0,void 0,(function*(){let e;try{return(yield ha.get(`${Nt}/${Ot}/auth`,{withCredentials:!0})).data}catch(n){e=n.message,console.log(e)}}));console.log("new token",e),e&&(t({type:ja}),console.log("decode token:",zi(e.token).lang),t({payload:{id:zi(e.token).id,nickname:zi(e.token).nickname,loggedIn:!0,language:"en"===zi(e.token).lang?ko:jo,email:zi(e.token).email,alwaysSignIn:!0},type:Ba}),t({payload:{token:e.token},type:Ca}),t({type:ka}),a("en"===zi(e.token).lang?ko:jo),localStorage.setItem("token",e.token))}}));return(0,X.useEffect)((()=>{o()}),[localStorage]),(0,n.jsx)(Ts,Object.assign({messages:Ps[r],locale:r,defaultLocale:ko},{children:(0,n.jsxs)("div",Object.assign({className:"flex h-screen flex-col justify-between"},{children:[(0,n.jsx)(hi,{currentLang:r,handleChangeLang:()=>Rs(this,void 0,void 0,(function*(){t({type:wa}),a(e.lang);const n=yield ki({lang:e.lang});n&&localStorage.setItem("token",n.token),localStorage.setItem("user",JSON.stringify(e))}))}),(0,n.jsxs)(Ee,{children:[(0,n.jsx)(ve,{path:"/",element:(0,n.jsx)(si,{})}),(0,n.jsx)(ve,{path:"/games",element:(0,n.jsx)(mi,{})}),(0,n.jsx)(ve,{path:"/games/:CurrentGame",element:(0,n.jsx)(es,{})}),(0,n.jsx)(ve,{path:"/statistic",element:(0,n.jsx)(wi,{})}),(0,n.jsx)(ve,{path:"/account-settings/",element:(0,n.jsx)(Vi,{})})]}),(0,n.jsx)(Bi,{}),(0,n.jsx)(Ki,{}),(0,n.jsx)(Ji,{})]}))}))}),{})}))})})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,